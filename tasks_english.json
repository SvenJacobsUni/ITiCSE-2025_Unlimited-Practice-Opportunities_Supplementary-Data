[
  {
    "id": 1,
    "programming_concept": "For loops",
    "context": "Modern Gaming",
    "task_description": "### Exercise: Highscore List in Modern Gaming\n\nWrite a function named `highscore_list(scores)` that receives a list of player scores as an argument. The function should sort the player scores in descending order and return the top 5 scores. If there are fewer than 5 scores, all available scores should be returned.\n\nExample call:\n```python\nhighscore_list([1500, 3000, 2500, 5000, 1000, 2000])\n```\n\nExpected return:\n```python\n[5000, 3000, 2500, 2000, 1500]\n```",
    "code_skeleton": "def highscore_list(scores):\n    ## Insert code here",
    "model_solution": "def highscore_list(scores):\n    return sorted(scores, reverse=True)[:5]\n\nprint(highscore_list([1500, 3000, 2500, 5000, 1000, 2000]))",
    "unit_tests": "import unittest\nfrom main import highscore_list\n\nclass TestHighscoreList(unittest.TestCase):\n    def test_more_than_five_scores(self):\n        self.assertEqual(highscore_list([1500, 3000, 2500, 5000, 1000, 2000]), [5000, 3000, 2500, 2000, 1500])\n\n    def test_exactly_five_scores(self):\n        self.assertEqual(highscore_list([1500, 3000, 2500, 5000, 1000]), [5000, 3000, 2500, 1500, 1000])\n\n    def test_less_than_five_scores(self):\n        self.assertEqual(highscore_list([1500, 3000, 2500]), [3000, 2500, 1500])\n\n    def test_empty_list(self):\n        self.assertEqual(highscore_list([]), [])\n\n    def test_all_scores_equal(self):\n        self.assertEqual(highscore_list([1000, 1000, 1000, 1000, 1000, 1000]), [1000, 1000, 1000, 1000, 1000])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 2,
    "programming_concept": "While loops",
    "context": "Film",
    "task_description": "### Exercise Task: Film Watchlist\n\nWrite a function called `film_watchlist(movies)`, which takes a list of movies as an argument. The function should use a while loop to iterate through the list and print each movie. If the list is empty, the function should print \"No movies in the watchlist.\".",
    "code_skeleton": "def film_watchlist(movies):\n    ## Insert code here",
    "model_solution": "def film_watchlist(movies):\n    if not movies:\n        print(\"No movies in the watchlist.\")\n    while movies:\n        print(movies.pop(0))\n\nfilm_watchlist([\"Inception\", \"The Matrix\", \"Interstellar\"])\nfilm_watchlist([])",
    "unit_tests": "import unittest\nfrom io import StringIO\nimport sys\nfrom main import film_watchlist\n\nclass TestFilmWatchlist(unittest.TestCase):\n    def test_watchlist_with_movies(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        film_watchlist([\"Inception\", \"The Matrix\", \"Interstellar\"])\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Inception\\nThe Matrix\\nInterstellar\")\n\n    def test_empty_watchlist(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        film_watchlist([])\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"No movies in the watchlist.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 3,
    "programming_concept": "For Loops",
    "context": "Relationships",
    "task_description": "### Exercise: Relationships and For Loops\n\nWrite a function named `relationship_status(names_list)` that takes a list of names as its argument. The function should output a message for each name in the list describing the relationship status of the person. Use a for loop to iterate through the list and generate the messages.\n\nExample call:\n```python\nrelationship_status([\"Anna\", \"Ben\", \"Clara\"])\n```\n\nExample output:\n```\nAnna is single.\nBen is in a relationship.\nClara is married.\n```\n\nNote: The messages can be the same for each name; the goal is to practice using the for loop.",
    "code_skeleton": "def relationship_status(names_list):\n    ## Insert code here",
    "model_solution": "def relationship_status(names_list):\n    for name in names_list:\n        print(f\"{name} is single.\")\n\nrelationship_status([\"Anna\", \"Ben\", \"Clara\"])",
    "unit_tests": "import unittest\nfrom main import relationship_status\n\nclass TestRelationshipStatus(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(relationship_status([]), [])\n\n    def test_single_name(self):\n        self.assertEqual(relationship_status([\"Anna\"]), [\"Anna is single.\"])\n\n    def test_multiple_names(self):\n        self.assertEqual(relationship_status([\"Anna\", \"Ben\", \"Clara\"]), [\"Anna is single.\", \"Ben is single.\", \"Clara is single.\"])\n\n    def test_names_with_spaces(self):\n        self.assertEqual(relationship_status([\" Anna \", \" Ben \", \" Clara \"]), [\" Anna  is single.\", \" Ben  is single.\", \" Clara  is single.\"])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 4,
    "programming_concept": "String",
    "context": "Pets",
    "task_description": "### Exercise: Pet Description\n\nWrite a function named `pet_description(animal_type, name)` that creates a description of a pet. The function should take two parameters: `animal_type` (e.g., \"Dog\", \"Cat\") and `name` (e.g., \"Bello\", \"Minka\"). The function should return a string that describes the pet.\n\nExample call: \n```python\npet_description(\"Dog\", \"Bello\")\n```\n\nExpected output:\n```python\n\"Bello is a Dog.\"\n```\n\nExample call:\n```python\npet_description(\"Cat\", \"Minka\")\n```\n\nExpected output:\n```python\n\"Minka is a Cat.\"\n```",
    "code_skeleton": "def pet_description(animal_type, name):\n    ## Insert code here",
    "model_solution": "def pet_description(animal_type, name):\n    return f\"{name} is a{'' if animal_type.lower() in ['dog', 'bird'] else 'n/a'} {animal_type}.\"\n\nprint(pet_description(\"Dog\", \"Bello\"))\nprint(pet_description(\"Cat\", \"Minka\"))",
    "unit_tests": "import unittest\nfrom main import pet_description\n\nclass TestPetDescription(unittest.TestCase):\n    def test_dog(self):\n        self.assertEqual(pet_description(\"Dog\", \"Bello\"), \"Bello is a Dog.\")\n\n    def test_cat(self):\n        self.assertEqual(pet_description(\"Cat\", \"Minka\"), \"Minka is a Cat.\")\n\n    def test_bird(self):\n        self.assertEqual(pet_description(\"Bird\", \"Tweety\"), \"Tweety is a Bird.\")\n\n    def test_fish(self):\n        self.assertEqual(pet_description(\"Fish\", \"Nemo\"), \"Nemo is a Fish.\")\n\n    def test_empty_name(self):\n        self.assertEqual(pet_description(\"Dog\", \"\"), \" is a Dog.\")\n\n    def test_empty_animal_type(self):\n        self.assertEqual(pet_description(\"\", \"Bello\"), \"Bello is a .\")\n\n    def test_empty_parameters(self):\n        self.assertEqual(pet_description(\"\", \"\"), \" is a .\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 5,
    "programming_concept": "Recursion",
    "context": "Cooking",
    "task_description": "### Exercise: Recursive Recipe Instructions\n\nWrite a recursive function named `cook_recipe(steps, index)` that takes a list of cooking steps and an index as arguments. The function should output the cooking steps in sequence, starting from the given index, and do so recursively. The function should stop when the index reaches the end of the list.\n\nExample call:\n```python\ncooking_steps = [\"Slice the onions.\", \"Heat the oil in the pan.\", \"Fry the onions.\", \"Add the tomatoes.\", \"Let everything simmer for 10 minutes.\"]\ncook_recipe(cooking_steps, 0)\n```\n\nExpected output:\n```\nSlice the onions.\nHeat the oil in the pan.\nFry the onions.\nAdd the tomatoes.\nLet everything simmer for 10 minutes.\n```",
    "code_skeleton": "def cook_recipe(steps, index):\n    ## Insert code here\n",
    "model_solution": "def cook_recipe(steps, index):\n    if index < len(steps):\n        print(steps[index])\n        cook_recipe(steps, index + 1)\n\ncooking_steps = [\"Slice the onions.\", \"Heat the oil in the pan.\", \"Fry the onions.\", \"Add the tomatoes.\", \"Let everything simmer for 10 minutes.\"]\ncook_recipe(cooking_steps, 0)\n",
    "unit_tests": "import unittest\nfrom io import StringIO\nimport sys\nfrom main import cook_recipe\n\nclass TestCookRecipe(unittest.TestCase):\n    def setUp(self):\n        self.cooking_steps = [\"Slice the onions.\", \"Heat the oil in the pan.\", \"Fry the onions.\", \"Add the tomatoes.\", \"Let everything simmer for 10 minutes.\"]\n        self.saved_stdout = sys.stdout\n        self.output = StringIO()\n        sys.stdout = self.output\n\n    def tearDown(self):\n        sys.stdout = self.saved_stdout\n\n    def test_cook_recipe_complete(self):\n        cook_recipe(self.cooking_steps, 0)\n        self.assertEqual(self.output.getvalue().strip(), \"\\n\".join(self.cooking_steps))\n\n    def test_cook_recipe_from_middle(self):\n        cook_recipe(self.cooking_steps, 2)\n        self.assertEqual(self.output.getvalue().strip(), \"\\n\".join(self.cooking_steps[2:]))\n\n    def test_cook_recipe_last_step(self):\n        cook_recipe(self.cooking_steps, 4)\n        self.assertEqual(self.output.getvalue().strip(), self.cooking_steps[4])\n\n    def test_cook_recipe_beyond_index(self):\n        cook_recipe(self.cooking_steps, 5)\n        self.assertEqual(self.output.getvalue().strip(), \"\")\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 6,
    "programming_concept": "If-Else statements",
    "context": "Animals",
    "task_description": "### Exercise: Animal Classification\n\nWrite a function named `animal_classification(animal)` that returns a message based on the passed animal. The function should recognize the following animals and return appropriate messages:\n\n- For \"Dog\", it should return \"That is a loyal companion!\"\n- For \"Cat\", it should return \"That is an independent friend!\"\n- For \"Bird\", it should return \"That is a feathered friend!\"\n- For all other animals, it should return \"That is an interesting animal!\"\n\nExample calls:\n\n```python\nprint(animal_classification(\"Dog\"))  # Output: That is a loyal companion!\nprint(animal_classification(\"Cat\"))  # Output: That is an independent friend!\nprint(animal_classification(\"Bird\"))  # Output: That is a feathered friend!\nprint(animal_classification(\"Fish\"))  # Output: That is an interesting animal!\n```",
    "code_skeleton": "def animal_classification(animal):\n    ## Insert code here",
    "model_solution": "def animal_classification(animal):\n    if animal == \"Dog\":\n        return \"That is a loyal companion!\"\n    elif animal == \"Cat\":\n        return \"That is an independent friend!\"\n    elif animal == \"Bird\":\n        return \"That is a feathered friend!\"\n    else:\n        return \"That is an interesting animal!\"\n\nprint(animal_classification(\"Dog\"))\nprint(animal_classification(\"Cat\"))\nprint(animal_classification(\"Bird\"))\nprint(animal_classification(\"Fish\"))",
    "unit_tests": "import unittest\nfrom main import animal_classification\n\nclass TestAnimalClassification(unittest.TestCase):\n    def test_dog(self):\n        self.assertEqual(animal_classification(\"Dog\"), \"That is a loyal companion!\")\n\n    def test_cat(self):\n        self.assertEqual(animal_classification(\"Cat\"), \"That is an independent friend!\")\n\n    def test_bird(self):\n        self.assertEqual(animal_classification(\"Bird\"), \"That is a feathered friend!\")\n\n    def test_unknown_animal(self):\n        self.assertEqual(animal_classification(\"Fish\"), \"That is an interesting animal!\")\n\n    def test_empty_string(self):\n        self.assertEqual(animal_classification(\"\"), \"That is an interesting animal!\")\n\n    def test_none(self):\n        self.assertEqual(animal_classification(None), \"That is an interesting animal!\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 7,
    "programming_concept": "If-Else statements",
    "context": "Basketball",
    "task_description": "### Exercise: Basketball Player Evaluation\n\nWrite a function named `evaluate_player(points)` that evaluates the performance of a basketball player based on the number of points scored. The function should return an appropriate message using `return`.\n\n- If the player scores 30 or more points, the message \"Outstanding Performance!\" should be returned.\n- If the player scores between 20 and 29 points, the message \"Good Performance!\" should be returned.\n- If the player scores between 10 and 19 points, the message \"Average Performance.\" should be returned.\n- If the player scores less than 10 points, the message \"Needs Improvement.\" should be returned.\n\nExample calls:\n- `evaluate_player(35)` returns \"Outstanding Performance!\".\n- `evaluate_player(25)` returns \"Good Performance!\".\n- `evaluate_player(15)` returns \"Average Performance.\".\n- `evaluate_player(5)` returns \"Needs Improvement.\".",
    "code_skeleton": "def evaluate_player(points):\n    ## Insert code here",
    "model_solution": "def evaluate_player(points):\n    if points >= 30:\n        return \"Outstanding Performance!\"\n    elif points >= 20:\n        return \"Good Performance!\"\n    elif points >= 10:\n        return \"Average Performance.\"\n    else:\n        return \"Needs Improvement.\"\n\n# Example calls\nprint(evaluate_player(35))\nprint(evaluate_player(25))\nprint(evaluate_player(15))\nprint(evaluate_player(5))",
    "unit_tests": "import unittest\n\nfrom main import evaluate_player\n\nclass TestEvaluatePlayer(unittest.TestCase):\n    def test_outstanding_performance(self):\n        self.assertEqual(evaluate_player(35), \"Outstanding Performance!\")\n        self.assertEqual(evaluate_player(30), \"Outstanding Performance!\")\n\n    def test_good_performance(self):\n        self.assertEqual(evaluate_player(25), \"Good Performance!\")\n        self.assertEqual(evaluate_player(20), \"Good Performance!\")\n\n    def test_average_performance(self):\n        self.assertEqual(evaluate_player(15), \"Average Performance.\")\n        self.assertEqual(evaluate_player(10), \"Average Performance.\")\n\n    def test_needs_improvement(self):\n        self.assertEqual(evaluate_player(5), \"Needs Improvement.\")\n        self.assertEqual(evaluate_player(0), \"Needs Improvement.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 8,
    "programming_concept": "If-Else statements",
    "context": "Music",
    "task_description": "### Practice Task: Music Genre Recommendation\n\nWrite a function named `music_recommendation(genre)` that returns a corresponding message based on the provided music genre. The function should consider the following genres:\n\n- For \"Rock\", the message \"You like it loud and energetic!\" should be returned.\n- For \"Pop\", the message \"You love catchy melodies and rhythms!\" should be returned.\n- For \"Jazz\", the message \"You appreciate complex harmonies and improvisation!\" should be returned.\n- For \"Classical\", the message \"You enjoy timeless masterpieces and orchestral sounds!\" should be returned.\n\nIf another genre is provided, the message \"Genre not recognized. Try Rock, Pop, Jazz, or Classical.\" should be returned.\n\nExample calls:\n- `music_recommendation(\"Rock\")` returns \"You like it loud and energetic!\".\n- `music_recommendation(\"Hip-Hop\")` returns \"Genre not recognized. Try Rock, Pop, Jazz, or Classical.\".",
    "code_skeleton": "def music_recommendation(genre):\n    ## Insert code here",
    "model_solution": "def music_recommendation(genre):\n    if genre == \"Rock\":\n        return \"You like it loud and energetic!\"\n    elif genre == \"Pop\":\n        return \"You love catchy melodies and rhythms!\"\n    elif genre == \"Jazz\":\n        return \"You appreciate complex harmonies and improvisation!\"\n    elif genre == \"Classical\":\n        return \"You enjoy timeless masterpieces and orchestral sounds!\"\n    else:\n        return \"Genre not recognized. Try Rock, Pop, Jazz, or Classical.\"\n\n# Example calls\nprint(music_recommendation(\"Rock\"))\nprint(music_recommendation(\"Hip-Hop\"))",
    "unit_tests": "import unittest\nfrom main import music_recommendation\n\nclass TestMusicRecommendation(unittest.TestCase):\n    def test_rock(self):\n        self.assertEqual(music_recommendation(\"Rock\"), \"You like it loud and energetic!\")\n\n    def test_pop(self):\n        self.assertEqual(music_recommendation(\"Pop\"), \"You love catchy melodies and rhythms!\")\n\n    def test_jazz(self):\n        self.assertEqual(music_recommendation(\"Jazz\"), \"You appreciate complex harmonies and improvisation!\")\n\n    def test_classical(self):\n        self.assertEqual(music_recommendation(\"Classical\"), \"You enjoy timeless masterpieces and orchestral sounds!\")\n\n    def test_unknown_genre(self):\n        self.assertEqual(music_recommendation(\"Hip-Hop\"), \"Genre not recognized. Try Rock, Pop, Jazz, or Classical.\")\n\n    def test_empty_genre(self):\n        self.assertEqual(music_recommendation(\"\"), \"Genre not recognized. Try Rock, Pop, Jazz, or Classical.\")\n\n    def test_none_genre(self):\n        self.assertEqual(music_recommendation(None), \"Genre not recognized. Try Rock, Pop, Jazz, or Classical.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 9,
    "programming_concept": "Higher-order functions",
    "context": "Streaming Services",
    "task_description": "### Exercise: Higher-order Functions in the Context of Streaming Services\n\nWrite a function `filter_movies(movies, criterion)`, which takes a list of movies and a function as a criterion. The function should return a new list that contains only the movies that meet the criterion.\n\nA movie is represented by a dictionary that contains at least the keys `title` and `rating`. The function `criterion` takes a movie dictionary as an argument and returns a Boolean value.\n\nExample call:\n```python\nmovies = [\n    {\"title\": \"Film A\", \"rating\": 8.5},\n    {\"title\": \"Film B\", \"rating\": 7.0},\n    {\"title\": \"Film C\", \"rating\": 9.0}\n]\n\ndef high_rating(movie):\n    return movie[\"rating\"] > 8.0\n\nfiltered_movies = filter_movies(movies, high_rating)\n# filtered_movies should contain [{\"title\": \"Film A\", \"rating\": 8.5}, {\"title\": \"Film C\", \"rating\": 9.0}]\n```\n\nImplement the function `filter_movies(movies, criterion)`.",
    "code_skeleton": "def filter_movies(movies, criterion):\n    ## Insert code here",
    "model_solution": "def filter_movies(movies, criterion):\n    return [movie for movie in movies if criterion(movie)]\n\nmovies = [\n    {\"title\": \"Film A\", \"rating\": 8.5},\n    {\"title\": \"Film B\", \"rating\": 7.0},\n    {\"title\": \"Film C\", \"rating\": 9.0}\n]\n\ndef high_rating(movie):\n    return movie[\"rating\"] > 8.0\n\nfiltered_movies = filter_movies(movies, high_rating)\nprint(filtered_movies)",
    "unit_tests": "import unittest\n\nclass TestFilterMovies(unittest.TestCase):\n    def test_high_rating(self):\n        movies = [\n            {\"title\": \"Film A\", \"rating\": 8.5},\n            {\"title\": \"Film B\", \"rating\": 7.0},\n            {\"title\": \"Film C\", \"rating\": 9.0}\n        ]\n        def high_rating(movie):\n            return movie[\"rating\"] > 8.0\n        self.assertEqual(filter_movies(movies, high_rating), [\n            {\"title\": \"Film A\", \"rating\": 8.5},\n            {\"title\": \"Film C\", \"rating\": 9.0}\n        ])\n\n    def test_low_rating(self):\n        movies = [\n            {\"title\": \"Film A\", \"rating\": 8.5},\n            {\"title\": \"Film B\", \"rating\": 7.0},\n            {\"title\": \"Film C\", \"rating\": 9.0}\n        ]\n        def low_rating(movie):\n            return movie[\"rating\"] < 8.0\n        self.assertEqual(filter_movies(movies, low_rating), [\n            {\"title\": \"Film B\", \"rating\": 7.0}\n        ])\n\n    def test_empty_list(self):\n        movies = []\n        def high_rating(movie):\n            return movie[\"rating\"] > 8.0\n        self.assertEqual(filter_movies(movies, high_rating), [])\n\n    def test_all_movies(self):\n        movies = [\n            {\"title\": \"Film A\", \"rating\": 8.5},\n            {\"title\": \"Film B\", \"rating\": 7.0},\n            {\"title\": \"Film C\", \"rating\": 9.0}\n        ]\n        def all_movies(movie):\n            return True\n        self.assertEqual(filter_movies(movies, all_movies), movies)\n\n    def test_no_movies(self):\n        movies = [\n            {\"title\": \"Film A\", \"rating\": 8.5},\n            {\"title\": \"Film B\", \"rating\": 7.0},\n            {\"title\": \"Film C\", \"rating\": 9.0}\n        ]\n        def no_movies(movie):\n            return False\n        self.assertEqual(filter_movies(movies, no_movies), [])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 10,
    "programming_concept": "Functions as Variables",
    "context": "Virtual Reality",
    "task_description": "### Exercise: Functions as Variables in Virtual Reality\n\nIn virtual reality (VR), various actions can be represented by functions. Write a function `execute_action(action)`, which takes an action as a parameter and executes that action. The action is represented by a function that has no parameters and returns a message.\n\nDefine two example actions:\n1. `start_vr()`: Returns the message \"VR started!\".\n2. `end_vr()`: Returns the message \"VR ended!\".\n\nThe function `execute_action(action)` should execute the given action and return the corresponding message.\n\nExample calls:\n```python\nprint(execute_action(start_vr))  # Output: \"VR started!\"\nprint(execute_action(end_vr))  # Output: \"VR ended!\"\n```",
    "code_skeleton": "def execute_action(action):\n    ## Insert code here\n\n\ndef start_vr():\n    ## Insert code here\n\n\ndef end_vr():\n    ## Insert code here\n",
    "model_solution": "def execute_action(action):\n    return action()\n\n\ndef start_vr():\n    return \"VR started!\"\n\n\ndef end_vr():\n    return \"VR ended!\"\n\n\nprint(execute_action(start_vr))\nprint(execute_action(end_vr))",
    "unit_tests": "import unittest\nfrom main import execute_action, start_vr, end_vr\n\n\nclass TestExecuteAction(unittest.TestCase):\n    def test_start_vr(self):\n        self.assertEqual(execute_action(start_vr), \"VR started!\")\n\n\n    def test_end_vr(self):\n        self.assertEqual(execute_action(end_vr), \"VR ended!\")\n\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 11,
    "programming_concept": "Recursion",
    "context": "Aquarium",
    "task_description": "### Exercise: Recursion in the Aquarium\n\nWrite a recursive function named `count_fish(aquarium)` that counts the number of fish in a nested aquarium. An aquarium can either be empty, contain a list of fish, or a list of other aquariums (which in turn can contain fish or further aquariums).\n\nAn example call could look like this:\n```python\naquarium = [[], [\"Fish1\", \"Fish2\"], [[\"Fish3\"], []], \"Fish4\"]\nprint(count_fish(aquarium))  # Output: 4\n```\n\nImplement the function `count_fish(aquarium)` that returns the total number of fish in the entire nested aquarium.",
    "code_skeleton": "def count_fish(aquarium):\n    ## Insert code here\n",
    "model_solution": "def count_fish(aquarium):\n    if not isinstance(aquarium, list):\n        return 1\n    return sum(count_fish(item) for item in aquarium)\n\naquarium = [[], [\"Fish1\", \"Fish2\"], [[\"Fish3\"], []], \"Fish4\"]\nprint(count_fish(aquarium))  # Output: 4\n",
    "unit_tests": "import unittest\nfrom main import count_fish\n\nclass TestCountFish(unittest.TestCase):\n    def test_empty_aquarium(self):\n        self.assertEqual(count_fish([]), 0)\n\n    def test_one_fish(self):\n        self.assertEqual(count_fish([\"Fish1\"]), 1)\n\n    def test_multiple_fish(self):\n        self.assertEqual(count_fish([\"Fish1\", \"Fish2\", \"Fish3\"]), 3)\n\n    def test_nested_aquarium(self):\n        self.assertEqual(count_fish([[], [\"Fish1\", \"Fish2\"], [[\"Fish3\"], []], \"Fish4\"]), 4)\n\n    def test_deeply_nested_aquarium(self):\n        self.assertEqual(count_fish([[[[[[\"Fish1\"]]]]]]), 1)\n\n    def test_aquarium_with_empty_and_full_subaquariums(self):\n        self.assertEqual(count_fish([[], [\"Fish1\"], [], [\"Fish2\", [\"Fish3\"]], []]), 3)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 12,
    "programming_concept": "While loops",
    "context": "Sports",
    "task_description": "### Exercise Task: Sports Repetitions\n\nWrite a function named `training_plan(repetitions)`, which uses a while loop to count and print a specific number of repetitions of an exercise. The function should take the number of repetitions as an argument and for each repetition, output a message in the form of \"Repetition X\", where X is the current repetition number.\n\nExample call: `training_plan(5)` should produce the following outputs:\n```\nRepetition 1\nRepetition 2\nRepetition 3\nRepetition 4\nRepetition 5\n```",
    "code_skeleton": "def training_plan(repetitions):\n    ## Insert code here\n",
    "model_solution": "def training_plan(repetitions):\n    i = 1\n    while i <= repetitions:\n        print(f\"Repetition {i}\")\n        i += 1\n\ntraining_plan(5)\n",
    "unit_tests": "import unittest\nfrom io import StringIO\nimport sys\nfrom main import training_plan\n\nclass TestTrainingPlan(unittest.TestCase):\n    def test_five_repetitions(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        training_plan(5)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Repetition 1\\nRepetition 2\\nRepetition 3\\nRepetition 4\\nRepetition 5\")\n\n    def test_no_repetitions(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        training_plan(0)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"\")\n\n    def test_one_repetition(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        training_plan(1)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Repetition 1\")\n\n    def test_ten_repetitions(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        training_plan(10)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Repetition 1\\nRepetition 2\\nRepetition 3\\nRepetition 4\\nRepetition 5\\nRepetition 6\\nRepetition 7\\nRepetition 8\\nRepetition 9\\nRepetition 10\")\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 13,
    "programming_concept": "Higher-order functions",
    "context": "Rugby",
    "task_description": "### Exercise: Higher-order functions in a Rugby context\n\nWrite a function `calculate_points(player_points, calculation_function)` that takes a list of points scored by different rugby players and a function as arguments. The function `calculate_points` should apply the passed calculation function to the list of player points and return the result.\n\nExample:\n- `player_points` is a list of points, e.g., `[5, 3, 7, 2]`.\n- `calculation_function` could be a function that calculates the sum of the points.\n\nExample call:\n```python\ndef sum_points(points):\n    return sum(points)\n\npoints = [5, 3, 7, 2]\nresult = calculate_points(points, sum_points)\nprint(result)  # Output: 17\n```\n\nImplement the function `calculate_points` and test it with various calculation functions.",
    "code_skeleton": "def calculate_points(player_points, calculation_function):\n    ## Insert code here",
    "model_solution": "def calculate_points(player_points, calculation_function):\n    return calculation_function(player_points)\n\ndef sum_points(points):\n    return sum(points)\n\npoints = [5, 3, 7, 2]\nresult = calculate_points(points, sum_points)\nprint(result)  # Output: 17",
    "unit_tests": "import unittest\nfrom main import calculate_points\n\ndef sum_points(points):\n    return sum(points)\n\ndef max_points(points):\n    return max(points)\n\ndef min_points(points):\n    return min(points)\n\nclass TestCalculatePoints(unittest.TestCase):\n    def test_sum_points(self):\n        self.assertEqual(calculate_points([5, 3, 7, 2], sum_points), 17)\n\n    def test_max_points(self):\n        self.assertEqual(calculate_points([5, 3, 7, 2], max_points), 7)\n\n    def test_min_points(self):\n        self.assertEqual(calculate_points([5, 3, 7, 2], min_points), 2)\n\n    def test_empty_list_sum(self):\n        self.assertEqual(calculate_points([], sum_points), 0)\n\n    def test_empty_list_max(self):\n        with self.assertRaises(ValueError):\n            calculate_points([], max_points)\n\n    def test_empty_list_min(self):\n        with self.assertRaises(ValueError):\n            calculate_points([], min_points)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 14,
    "programming_concept": "Higher-order functions",
    "context": "Mental Health",
    "task_description": "### Exercise: Higher-order functions in the context of mental health\n\nWrite a function `filter_positive_affirmations(affirmations, filter_function)` that receives a list of affirmations (positive statements) and a filter function as arguments. The function should filter the affirmations based on the given filter function and return the filtered list.\n\nExample call:\n```python\naffirmations = [\n    \"I am strong.\",\n    \"I am valuable.\",\n    \"I can achieve anything.\",\n    \"I am loved.\",\n    \"I am enough.\"\n]\n\ndef contains_word_i(affirmation):\n    return \"I\" in affirmation\n\npositive_affirmations = filter_positive_affirmations(affirmations, contains_word_i)\nprint(positive_affirmations)\n```\n\nExpected output:\n```\n[\"I am strong.\", \"I am valuable.\", \"I can achieve anything.\", \"I am loved.\", \"I am enough.\"]\n```\n\nImplement the function `filter_positive_affirmations` and test it with different filter functions.",
    "code_skeleton": "def filter_positive_affirmations(affirmations, filter_function):\n    ## Insert code here",
    "model_solution": "def filter_positive_affirmations(affirmations, filter_function):\n    return list(filter(filter_function, affirmations))\n\naffirmations = [\n    \"I am strong.\",\n    \"I am valuable.\",\n    \"I can achieve anything.\",\n    \"I am loved.\",\n    \"I am enough.\"\n]\n\ndef contains_word_i(affirmation):\n    return \"I\" in affirmation\n\npositive_affirmations = filter_positive_affirmations(affirmations, contains_word_i)\nprint(positive_affirmations)",
    "unit_tests": "import unittest\n\nclass TestFilterPositiveAffirmations(unittest.TestCase):\n    def test_contains_word_i(self):\n        affirmations = [\n            \"I am strong.\",\n            \"I am valuable.\",\n            \"I can achieve anything.\",\n            \"I am loved.\",\n            \"I am enough.\"\n        ]\n        def contains_word_i(affirmation):\n            return \"I\" in affirmation\n        expected = [\n            \"I am strong.\",\n            \"I am valuable.\",\n            \"I can achieve anything.\",\n            \"I am loved.\",\n            \"I am enough.\"\n        ]\n        self.assertEqual(filter_positive_affirmations(affirmations, contains_word_i), expected)\n\n    def test_contains_word_am(self):\n        affirmations = [\n            \"I am strong.\",\n            \"I am valuable.\",\n            \"I can achieve anything.\",\n            \"I am loved.\",\n            \"I am enough.\"\n        ]\n        def contains_word_am(affirmation):\n            return \"am\" in affirmation\n        expected = [\n            \"I am strong.\",\n            \"I am valuable.\",\n            \"I am loved.\",\n            \"I am enough.\"\n        ]\n        self.assertEqual(filter_positive_affirmations(affirmations, contains_word_am), expected)\n\n    def test_no_match(self):\n        affirmations = [\n            \"I am strong.\",\n            \"I am valuable.\",\n            \"I can achieve anything.\",\n            \"I am loved.\",\n            \"I am enough.\"\n        ]\n        def contains_word_xyz(affirmation):\n            return \"xyz\" in affirmation\n        expected = []\n        self.assertEqual(filter_positive_affirmations(affirmations, contains_word_xyz), expected)\n\n    def test_empty_list(self):\n        affirmations = []\n        def contains_word_i(affirmation):\n            return \"I\" in affirmation\n        expected = []\n        self.assertEqual(filter_positive_affirmations(affirmations, contains_word_i), expected)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 15,
    "programming_concept": "Lists",
    "context": "Pets",
    "task_description": "### Exercise Task: Pet List\n\nWrite a function named `pet_list(pets)`, which receives a list of pet names as an argument. The function should count the number of pets in the list and return a message indicating the number of pets. If the list is empty, the message \"No pets found.\" should be returned.\n\nExample Calls:\n\n- `pet_list([\"Bella\", \"Charlie\", \"Luna\"])` returns \"You have 3 pets.\"\n- `pet_list([])` returns \"No pets found.\"",
    "code_skeleton": "def pet_list(pets):\n    ## Insert code here",
    "model_solution": "def pet_list(pets):\n    if not pets:\n        return \"No pets found.\"\n    else:\n        return f\"You have {len(pets)} pets.\"\n\npet_list([\"Bella\", \"Charlie\", \"Luna\"])\npet_list([])",
    "unit_tests": "import unittest\nfrom main import pet_list\n\nclass TestPetList(unittest.TestCase):\n    def test_multiple_pets(self):\n        self.assertEqual(pet_list([\"Bella\", \"Charlie\", \"Luna\"]), \"You have 3 pets.\")\n\n    def test_no_pets(self):\n        self.assertEqual(pet_list([]), \"No pets found.\")\n\n    def test_one_pet(self):\n        self.assertEqual(pet_list([\"Bella\"]), \"You have 1 pet.\")\n\n    def test_two_pets(self):\n        self.assertEqual(pet_list([\"Bella\", \"Charlie\"]), \"You have 2 pets.\")\n\n    def test_many_pets(self):\n        self.assertEqual(pet_list([\"Bella\", \"Charlie\", \"Luna\", \"Max\", \"Lucy\", \"Daisy\", \"Bailey\", \"Molly\", \"Coco\", \"Buddy\"]), \"You have 10 pets.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 16,
    "programming_concept": "If-Else statements",
    "context": "Animals",
    "task_description": "### Exercise: Animal Classification\n\nWrite a function named `animal_classification(animal)` that classifies the type of an animal based on the passed string. The function should return a corresponding message with `return`.\n\n- If the animal is a \"Dog\", the message \"This is a mammal.\" should be returned.\n- If the animal is an \"Eagle\", the message \"This is a bird.\" should be returned.\n- If the animal is a \"Shark\", the message \"This is a fish.\" should be returned.\n- For all other animals, the message \"Unknown animal class.\" should be returned.\n\nExample calls:\n- `animal_classification(\"Dog\")` returns \"This is a mammal.\"\n- `animal_classification(\"Eagle\")` returns \"This is a bird.\"\n- `animal_classification(\"Shark\")` returns \"This is a fish.\"\n- `animal_classification(\"Crocodile\")` returns \"Unknown animal class.\"\n",
    "code_skeleton": "def animal_classification(animal):\n    ## Insert code here\n",
    "model_solution": "def animal_classification(animal):\n    if animal == \"Dog\":\n        return \"This is a mammal.\"\n    elif animal == \"Eagle\":\n        return \"This is a bird.\"\n    elif animal == \"Shark\":\n        return \"This is a fish.\"\n    else:\n        return \"Unknown animal class.\"\n\n# Example calls\nprint(animal_classification(\"Dog\"))\nprint(animal_classification(\"Eagle\"))\nprint(animal_classification(\"Shark\"))\nprint(animal_classification(\"Crocodile\"))\n",
    "unit_tests": "import unittest\n\nfrom main import animal_classification\n\nclass TestAnimalClassification(unittest.TestCase):\n    def test_dog(self):\n        self.assertEqual(animal_classification(\"Dog\"), \"This is a mammal.\")\n\n    def test_eagle(self):\n        self.assertEqual(animal_classification(\"Eagle\"), \"This is a bird.\")\n\n    def test_shark(self):\n        self.assertEqual(animal_classification(\"Shark\"), \"This is a fish.\")\n\n    def test_unknown_animal(self):\n        self.assertEqual(animal_classification(\"Crocodile\"), \"Unknown animal class.\")\n\n    def test_empty_string(self):\n        self.assertEqual(animal_classification(\"\"), \"Unknown animal class.\")\n\n    def test_none(self):\n        self.assertEqual(animal_classification(None), \"Unknown animal class.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 17,
    "programming_concept": "Float",
    "context": "Modern Gaming",
    "task_description": "### Practice Task: Calculating Player Score\n\nIn modern video games, it is crucial to accurately calculate a player's score, especially when it comes to highscores. Write a function called `calculate_score(kills, assists, deaths)` that calculates the player's score based on the following criteria:\n\n- Each kill gives 10.5 points.\n- Each assist gives 5.25 points.\n- Each death subtracts 2.75 points.\n\nThe function should return the calculated score as a float value.\n\nExample Call:\n```python\ncalculate_score(10, 5, 2)\n```\nThis call should calculate the score for a player with 10 kills, 5 assists, and 2 deaths.",
    "code_skeleton": "def calculate_score(kills, assists, deaths):\n    ## Insert code here",
    "model_solution": "def calculate_score(kills, assists, deaths):\n    return kills * 10.5 + assists * 5.25 - deaths * 2.75\n\n# Example call\nprint(calculate_score(10, 5, 2))",
    "unit_tests": "import unittest\nfrom main import calculate_score\n\nclass TestCalculateScore(unittest.TestCase):\n    def test_positive_values(self):\n        self.assertAlmostEqual(calculate_score(10, 5, 2), 123.75)\n\n    def test_zero_values(self):\n        self.assertAlmostEqual(calculate_score(0, 0, 0), 0.0)\n\n    def test_negative_values(self):\n        self.assertAlmostEqual(calculate_score(-10, -5, -2), -123.75)\n\n    def test_mixed_values(self):\n        self.assertAlmostEqual(calculate_score(10, 0, 5), 89.75)\n\n    def test_large_values(self):\n        self.assertAlmostEqual(calculate_score(1000, 500, 200), 12375.0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 18,
    "programming_concept": "Integer",
    "context": "Aquarium",
    "task_description": "### Exercise: Counting Fish in the Aquarium\n\nWrite a function named `count_fish(fish_count)`, which counts the number of fish in an aquarium and returns a corresponding message. The function should take an integer value `fish_count` as a parameter and return a message in the form \"There are [fish_count] fish in the aquarium.\"\n\nExample call:\n```python\nprint(count_fish(10))\n```\n\nExpected output:\n```\nThere are 10 fish in the aquarium.\n```",
    "code_skeleton": "def count_fish(fish_count):\n    ## Insert code here",
    "model_solution": "def count_fish(fish_count):\n    return f\"There are {fish_count} fish in the aquarium.\"\n\nprint(count_fish(10))",
    "unit_tests": "import unittest\nfrom main import count_fish\n\nclass TestCountFish(unittest.TestCase):\n    def test_ten_fish(self):\n        self.assertEqual(count_fish(10), \"There are 10 fish in the aquarium.\")\n\n    def test_zero_fish(self):\n        self.assertEqual(count_fish(0), \"There are 0 fish in the aquarium.\")\n\n    def test_one_fish(self):\n        self.assertEqual(count_fish(1), \"There is 1 fish in the aquarium.\")\n\n    def test_negative_fish(self):\n        self.assertEqual(count_fish(-5), \"There are -5 fish in the aquarium.\")\n\n    def test_large_number_of_fish(self):\n        self.assertEqual(count_fish(1000), \"There are 1000 fish in the aquarium.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 19,
    "programming_concept": "For loops",
    "context": "Amusement Park",
    "task_description": "### Exercise: Amusement Park - Visitor Counting\n\nWrite a function named `count_visitors(visitor_list)` that receives a list of visitor names as an argument. The function should count the number of visitors in the amusement park and return this number. Use a for loop to iterate through the list and determine the number of visitors.\n\nExample call:\n```python\nvisitor_list = [\"Anna\", \"Ben\", \"Clara\", \"David\", \"Eva\"]\nvisitor_count = count_visitors(visitor_list)\nprint(visitor_count)  # Output: 5\n```\n\nIn this example, the list `visitor_list` contains five names, so the function `count_visitors` should return the value `5`.",
    "code_skeleton": "def count_visitors(visitor_list):\n    ## Insert code here",
    "model_solution": "def count_visitors(visitor_list):\n    return len(visitor_list)\n\nvisitor_list = [\"Anna\", \"Ben\", \"Clara\", \"David\", \"Eva\"]\nvisitor_count = count_visitors(visitor_list)\nprint(visitor_count)  # Output: 5",
    "unit_tests": "import unittest\nfrom main import count_visitors\n\nclass TestCountVisitors(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(count_visitors([]), 0)\n\n    def test_single_visitor(self):\n        self.assertEqual(count_visitors([\"Anna\"]), 1)\n\n    def test_multiple_visitors(self):\n        self.assertEqual(count_visitors([\"Anna\", \"Ben\", \"Clara\", \"David\", \"Eva\"]), 5)\n\n    def test_duplicate_visitors(self):\n        self.assertEqual(count_visitors([\"Anna\", \"Anna\", \"Ben\", \"Ben\"]), 4)\n\n    def test_mixed_visitors(self):\n        self.assertEqual(count_visitors([\"Anna\", \"Ben\", \"Clara\", \"David\", \"Eva\", \"Anna\", \"Ben\"]), 7)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 20,
    "programming_concept": "Tuples",
    "context": "Film",
    "task_description": "### Practice Task: Film Tuples\n\nWrite a function named `film_info(film)` that takes a tuple as an argument. The tuple contains information about a film in the following order: title (String), release year (Integer), director (String), and rating (Float).\n\nThe function should return a formatted string that displays the film's information in a readable format.\n\nExample call:\n```python\nfilm = (\"Inception\", 2010, \"Christopher Nolan\", 8.8)\nprint(film_info(film))\n```\n\nExpected output:\n```\nTitle: Inception\nRelease Year: 2010\nDirector: Christopher Nolan\nRating: 8.8\n```",
    "code_skeleton": "def film_info(film):\n    ## Insert code here",
    "model_solution": "def film_info(film):\n    return f\"Title: {film[0]}\\nRelease Year: {film[1]}\\nDirector: {film[2]}\\nRating: {film[3]}\"\n\nfilm = (\"Inception\", 2010, \"Christopher Nolan\", 8.8)\nprint(film_info(film))",
    "unit_tests": "import unittest\nfrom main import film_info\n\nclass TestFilmInfo(unittest.TestCase):\n    def test_standard_film(self):\n        film = (\"Inception\", 2010, \"Christopher Nolan\", 8.8)\n        expected = \"Title: Inception\\nRelease Year: 2010\\nDirector: Christopher Nolan\\nRating: 8.8\"\n        self.assertEqual(film_info(film), expected)\n\n    def test_film_with_comma_in_title(self):\n        film = (\"Spider-Man: No Way Home\", 2021, \"Jon Watts\", 8.4)\n        expected = \"Title: Spider-Man: No Way Home\\nRelease Year: 2021\\nDirector: Jon Watts\\nRating: 8.4\"\n        self.assertEqual(film_info(film), expected)\n\n    def test_film_with_low_rating(self):\n        film = (\"The Room\", 2003, \"Tommy Wiseau\", 3.7)\n        expected = \"Title: The Room\\nRelease Year: 2003\\nDirector: Tommy Wiseau\\nRating: 3.7\"\n        self.assertEqual(film_info(film), expected)\n\n    def test_film_with_high_rating(self):\n        film = (\"The Godfather\", 1972, \"Francis Ford Coppola\", 9.2)\n        expected = \"Title: The Godfather\\nRelease Year: 1972\\nDirector: Francis Ford Coppola\\nRating: 9.2\"\n        self.assertEqual(film_info(film), expected)\n\n    def test_film_with_integer_rating(self):\n        film = (\"A Beautiful Mind\", 2001, \"Ron Howard\", 8.0)\n        expected = \"Title: A Beautiful Mind\\nRelease Year: 2001\\nDirector: Ron Howard\\nRating: 8.0\"\n        self.assertEqual(film_info(film), expected)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 21,
    "programming_concept": "Higher-order functions",
    "context": "Rugby",
    "task_description": "### Practice Task: Higher-order functions in the Rugby context\n\nWrite a function `filter_players(player_list, criterion_function)` that takes a list of rugby players and a criterion function as arguments. The function should return a new list containing only the players that meet the criterion.\n\nEach player is represented by a dictionary that contains at least the following keys:\n- `name`: The name of the player (String)\n- `position`: The player's position (String)\n- `points`: The number of points scored (Integer)\n\nExample:\n```python\nplayer_list = [\n    {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15},\n    {\"name\": \"Tom\", \"position\": \"Defender\", \"points\": 5},\n    {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}\n]\n\ndef criterion(player):\n    return player[\"points\"] > 10\n\nresult = filter_players(player_list, criterion)\n# result should be [{\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15}, {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}]\n```\n\nImplement the function `filter_players(player_list, criterion_function)`.",
    "code_skeleton": "def filter_players(player_list, criterion_function):\n    ## Insert code here",
    "model_solution": "def filter_players(player_list, criterion_function):\n    return [player for player in player_list if criterion_function(player)]\n\nplayer_list = [\n    {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15},\n    {\"name\": \"Tom\", \"position\": \"Defender\", \"points\": 5},\n    {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}\n]\n\ndef criterion(player):\n    return player[\"points\"] > 10\n\nresult = filter_players(player_list, criterion)\nprint(result)",
    "unit_tests": "import unittest\nfrom main import filter_players\n\nclass TestFilterPlayers(unittest.TestCase):\n    def test_all_players_meet_criterion(self):\n        player_list = [\n            {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15},\n            {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}\n        ]\n        def criterion(player):\n            return player[\"points\"] > 10\n        self.assertEqual(filter_players(player_list, criterion), player_list)\n\n    def test_no_player_meets_criterion(self):\n        player_list = [\n            {\"name\": \"Tom\", \"position\": \"Defender\", \"points\": 5},\n            {\"name\": \"Jim\", \"position\": \"Defender\", \"points\": 3}\n        ]\n        def criterion(player):\n            return player[\"points\"] > 10\n        self.assertEqual(filter_players(player_list, criterion), [])\n\n    def test_some_players_meet_criterion(self):\n        player_list = [\n            {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15},\n            {\"name\": \"Tom\", \"position\": \"Defender\", \"points\": 5},\n            {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}\n        ]\n        def criterion(player):\n            return player[\"points\"] > 10\n        expected_result = [\n            {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15},\n            {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}\n        ]\n        self.assertEqual(filter_players(player_list, criterion), expected_result)\n\n    def test_empty_list(self):\n        player_list = []\n        def criterion(player):\n            return player[\"points\"] > 10\n        self.assertEqual(filter_players(player_list, criterion), [])\n\n    def test_criterion_always_true(self):\n        player_list = [\n            {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15},\n            {\"name\": \"Tom\", \"position\": \"Defender\", \"points\": 5},\n            {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}\n        ]\n        def criterion(player):\n            return True\n        self.assertEqual(filter_players(player_list, criterion), player_list)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 22,
    "programming_concept": "Recursion",
    "context": "Virtual Reality",
    "task_description": "### Exercise: Recursive Calculation of VR Worlds\n\nIn virtual reality (VR), worlds can be nested within each other, similar to a fractal. Each VR world can contain a certain number of subworlds, and each of these subworlds can in turn contain more subworlds.\n\nWrite a recursive function `count_subworlds(world)`, which calculates the total number of subworlds in a given VR world. The VR world is represented as a dictionary, where the key \"subworlds\" contains a list of further VR worlds (also dictionaries).\n\nExample:\n\n```python\nvr_world = {\n    \"name\": \"Main World\",\n    \"subworlds\": [\n        {\n            \"name\": \"Subworld 1\",\n            \"subworlds\": []\n        },\n        {\n            \"name\": \"Subworld 2\",\n            \"subworlds\": [\n                {\n                    \"name\": \"Subworld 2.1\",\n                    \"subworlds\": []\n                }\n            ]\n        }\n    ]\n}\n```\n\nIn this example, the main world has two direct subworlds and one further subworld in the second subworld, totaling three subworlds.\n\nImplement the function `count_subworlds(world)`, which calculates and returns the total number of subworlds in the given VR world.\n\nExample Call:\n\n```python\nprint(count_subworlds(vr_world))  # Output: 3\n```",
    "code_skeleton": "def count_subworlds(world):\n    ## Insert code here",
    "model_solution": "def count_subworlds(world):\n    return len(world[\"subworlds\"]) + sum(count_subworlds(sw) for sw in world[\"subworlds\"])\n\nvr_world = {\n    \"name\": \"Main World\",\n    \"subworlds\": [\n        {\n            \"name\": \"Subworld 1\",\n            \"subworlds\": []\n        },\n        {\n            \"name\": \"Subworld 2\",\n            \"subworlds\": [\n                {\n                    \"name\": \"Subworld 2.1\",\n                    \"subworlds\": []\n                }\n            ]\n        }\n    ]\n}\n\nprint(count_subworlds(vr_world))  # Output: 3",
    "unit_tests": "import unittest\nfrom main import count_subworlds\n\nclass TestCountSubworlds(unittest.TestCase):\n    def test_simple_world(self):\n        world = {\n            \"name\": \"Main World\",\n            \"subworlds\": []\n        }\n        self.assertEqual(count_subworlds(world), 0)\n\n    def test_world_with_one_subworld(self):\n        world = {\n            \"name\": \"Main World\",\n            \"subworlds\": [\n                {\n                    \"name\": \"Subworld 1\",\n                    \"subworlds\": []\n                }\n            ]\n        }\n        self.assertEqual(count_subworlds(world), 1)\n\n    def test_world_with_multiple_subworlds(self):\n        world = {\n            \"name\": \"Main World\",\n            \"subworlds\": [\n                {\n                    \"name\": \"Subworld 1\",\n                    \"subworlds\": []\n                },\n                {\n                    \"name\": \"Subworld 2\",\n                    \"subworlds\": [\n                        {\n                            \"name\": \"Subworld 2.1\",\n                            \"subworlds\": []\n                        }\n                    ]\n                }\n            ]\n        }\n        self.assertEqual(count_subworlds(world), 3)\n\n    def test_deeply_nested_world(self):\n        world = {\n            \"name\": \"Main World\",\n            \"subworlds\": [\n                {\n                    \"name\": \"Subworld 1\",\n                    \"subworlds\": [\n                        {\n                            \"name\": \"Subworld 1.1\",\n                            \"subworlds\": [\n                                {\n                                    \"name\": \"Subworld 1.1.1\",\n                                    \"subworlds\": []\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n        self.assertEqual(count_subworlds(world), 3)\n\n    def test_empty_world(self):\n        world = {}\n        self.assertEqual(count_subworlds(world), 0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 23,
    "programming_concept": "Higher-order functions",
    "context": "Rugby",
    "task_description": "### Practice Task: Higher-order Functions in a Rugby Context\n\nWrite a function `filter_players(player_list, criterion_function)` that takes a list of rugby players and a criterion function as arguments. The function should return a new list that only contains the players who meet the criterion.\n\nEach player is represented by a dictionary that contains at least the following keys:\n- `name`: The player's name (String)\n- `position`: The player's position (String)\n- `points`: The number of points scored (Integer)\n\nExample:\n```python\nplayer_list = [\n    {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15},\n    {\"name\": \"Tom\", \"position\": \"Defender\", \"points\": 5},\n    {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}\n]\n\ndef criterion(player):\n    return player[\"points\"] > 10\n\nresult = filter_players(player_list, criterion)\n# result should be [{\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15}, {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}]",
    "code_skeleton": "def filter_players(player_list, criterion_function):\n    ## Insert code here",
    "model_solution": "def filter_players(player_list, criterion_function):\n    return [player for player in player_list if criterion_function(player)]\n\nplayer_list = [\n    {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15},\n    {\"name\": \"Tom\", \"position\": \"Defender\", \"points\": 5},\n    {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}\n]\n\ndef criterion(player):\n    return player[\"points\"] > 10\n\nresult = filter_players(player_list, criterion)\nprint(result)",
    "unit_tests": "import unittest\nfrom main import filter_players\n\nclass TestFilterPlayers(unittest.TestCase):\n    def test_points_greater_than_10(self):\n        player_list = [\n            {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15},\n            {\"name\": \"Tom\", \"position\": \"Defender\", \"points\": 5},\n            {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}\n        ]\n        def criterion(player):\n            return player[\"points\"] > 10\n        expected = [\n            {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15},\n            {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}\n        ]\n        self.assertEqual(filter_players(player_list, criterion), expected)\n\n    def test_position_forward(self):\n        player_list = [\n            {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15},\n            {\"name\": \"Tom\", \"position\": \"Defender\", \"points\": 5},\n            {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}\n        ]\n        def criterion(player):\n            return player[\"position\"] == \"Forward\"\n        expected = [\n            {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15},\n            {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}\n        ]\n        self.assertEqual(filter_players(player_list, criterion), expected)\n\n    def test_empty_list(self):\n        player_list = []\n        def criterion(player):\n            return player[\"points\"] > 10\n        expected = []\n        self.assertEqual(filter_players(player_list, criterion), expected)\n\n    def test_all_players_meet_criterion(self):\n        player_list = [\n            {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15},\n            {\"name\": \"Tom\", \"position\": \"Defender\", \"points\": 12},\n            {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}\n        ]\n        def criterion(player):\n            return player[\"points\"] > 10\n        expected = [\n            {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 15},\n            {\"name\": \"Tom\", \"position\": \"Defender\", \"points\": 12},\n            {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 20}\n        ]\n        self.assertEqual(filter_players(player_list, criterion), expected)\n\n    def test_none_meet_criterion(self):\n        player_list = [\n            {\"name\": \"Max\", \"position\": \"Forward\", \"points\": 5},\n            {\"name\": \"Tom\", \"position\": \"Defender\", \"points\": 3},\n            {\"name\": \"Leo\", \"position\": \"Forward\", \"points\": 2}\n        ]\n        def criterion(player):\n            return player[\"points\"] > 10\n        expected = []\n        self.assertEqual(filter_players(player_list, criterion), expected)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 24,
    "programming_concept": "Tuples",
    "context": "Fishing",
    "task_description": "### Exercise: Fishing with Tuples\n\nWrite a function named `catch_fish(fishes)` that takes a tuple of fish species as an argument. The function should count the number of different species in the tuple and return a new tuple containing the species and their respective frequencies.\n\nExample call:\n```python\nfishes = (\"Pike\", \"Carp\", \"Pike\", \"Trout\", \"Carp\", \"Pike\")\nprint(catch_fish(fishes))\n```\n\nExpected output:\n```python\n((\"Pike\", 3), (\"Carp\", 2), (\"Trout\", 1))\n```",
    "code_skeleton": "def catch_fish(fishes):\n    ## Insert code here",
    "model_solution": "def catch_fish(fishes):\n    return tuple((fish, fishes.count(fish)) for fish in set(fishes))\n\nfishes = (\"Pike\", \"Carp\", \"Pike\", \"Trout\", \"Carp\", \"Pike\")\nprint(catch_fish(fishes))",
    "unit_tests": "import unittest\nfrom main import catch_fish\n\nclass TestCatchFish(unittest.TestCase):\n    def test_simple_case(self):\n        fishes = (\"Pike\", \"Carp\", \"Pike\", \"Trout\", \"Carp\", \"Pike\")\n        expected = ((\"Pike\", 3), (\"Carp\", 2), (\"Trout\", 1))\n        self.assertEqual(catch_fish(fishes), expected)\n\n    def test_empty_tuple(self):\n        fishes = ()\n        expected = ()\n        self.assertEqual(catch_fish(fishes), expected)\n\n    def test_one_fish(self):\n        fishes = (\"Pike\",)\n        expected = ((\"Pike\", 1),)\n        self.assertEqual(catch_fish(fishes), expected)\n\n    def test_all_different(self):\n        fishes = (\"Pike\", \"Carp\", \"Trout\")\n        expected = ((\"Pike\", 1), (\"Carp\", 1), (\"Trout\", 1))\n        self.assertEqual(catch_fish(fishes), expected)\n\n    def test_same_fishes(self):\n        fishes = (\"Pike\", \"Pike\", \"Pike\")\n        expected = ((\"Pike\", 3),)\n        self.assertEqual(catch_fish(fishes), expected)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 25,
    "programming_concept": "While loops",
    "context": "Gardening",
    "task_description": "### Exercise: Gardening with While Loops\n\nWrite a function named `water_plant(plants)` that takes a list of plants as an argument. Each plant in the list has a water level represented by a number. The function should water each plant until its water level reaches at least 5. The water level of each plant increases by 1 with each watering. The function should return the number of watering operations needed for each plant.\n\nExample call:\n```python\nplants = [2, 4, 1]\nprint(water_plant(plants))  # Output: [3, 1, 4]\n```\n\nIn this example, the first plant needs 3 waterings, the second plant needs 1 watering, and the third plant needs 4 waterings to reach a water level of at least 5.",
    "code_skeleton": "def water_plant(plants):\n    ## Insert code here",
    "model_solution": "def water_plant(plants):\n    return [max(0, 5 - plant) for plant in plants]\n\nplants = [2, 4, 1]\nprint(water_plant(plants))",
    "unit_tests": "import unittest\nfrom main import water_plant\n\nclass TestWaterPlant(unittest.TestCase):\n    def test_simple_case(self):\n        self.assertEqual(water_plant([2, 4, 1]), [3, 1, 4])\n\n    def test_all_plants_already_watered_sufficiently(self):\n        self.assertEqual(water_plant([5, 6, 7]), [0, 0, 0])\n\n    def test_all_plants_need_watering(self):\n        self.assertEqual(water_plant([0, 0, 0]), [5, 5, 5])\n\n    def test_empty_list(self):\n        self.assertEqual(water_plant([]), [])\n\n    def test_edge_conditions(self):\n        self.assertEqual(water_plant([4, 5, 6]), [1, 0, 0])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 26,
    "programming_concept": "If-Else statements",
    "context": "Modern Gaming",
    "task_description": "### Exercise Task: Modern Gaming - Player Selection\n\nWrite a function named `player_selection(level)` that returns an appropriate message based on the player's passed level. The function should consider the following conditions:\n\n- If the player's level is less than 10, the message \"Beginner: Welcome to the world of gaming!\" should be returned.\n- If the player's level is between 10 and 20 (inclusive), the message \"Intermediate: You are making progress!\" should be returned.\n- If the player's level is greater than 20, the message \"Pro: You are a true gamer!\" should be returned.\n\nExample calls:\n- `player_selection(5)` returns \"Beginner: Welcome to the world of gaming!\"\n- `player_selection(15)` returns \"Intermediate: You are making progress!\"\n- `player_selection(25)` returns \"Pro: You are a true gamer!\"",
    "code_skeleton": "def player_selection(level):\n    ## Insert code here",
    "model_solution": "def player_selection(level):\n    if level < 10:\n        return \"Beginner: Welcome to the world of gaming!\"\n    elif 10 <= level <= 20:\n        return \"Intermediate: You are making progress!\"\n    else:\n        return \"Pro: You are a true gamer!\"\n\n# Example calls\nprint(player_selection(5))\nprint(player_selection(15))\nprint(player_selection(25))",
    "unit_tests": "import unittest\nfrom main import player_selection\n\nclass TestPlayerSelection(unittest.TestCase):\n    def test_beginner(self):\n        self.assertEqual(player_selection(5), \"Beginner: Welcome to the world of gaming!\")\n\n    def test_intermediate(self):\n        self.assertEqual(player_selection(15), \"Intermediate: You are making progress!\")\n\n    def test_pro(self):\n        self.assertEqual(player_selection(25), \"Pro: You are a true gamer!\")\n\n    def test_edge_beginner(self):\n        self.assertEqual(player_selection(9), \"Beginner: Welcome to the world of gaming!\")\n\n    def test_edge_intermediate_lower(self):\n        self.assertEqual(player_selection(10), \"Intermediate: You are making progress!\")\n\n    def test_edge_intermediate_upper(self):\n        self.assertEqual(player_selection(20), \"Intermediate: You are making progress!\")\n\n    def test_edge_pro(self):\n        self.assertEqual(player_selection(21), \"Pro: You are a true gamer!\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 27,
    "programming_concept": "Logical operators (==, !=, <, >, <=, >=, or, and, not)",
    "context": "Fishing",
    "task_description": "### Practice Task: Control Structures in Fishing\n\nWrite a function named `catch_fish(weight, length)` that checks whether a caught fish meets the minimum requirements for keeping. The minimum requirements are:\n\n- The fish's weight must be at least 1.5 kilograms.\n- The fish's length must be at least 30 centimeters.\n\nThe function should return `True` if both conditions are fulfilled and `False` if one or both conditions are not fulfilled.\n\nExample calls:\n- `catch_fish(2.0, 35)` returns `True`.\n- `catch_fish(1.0, 40)` returns `False`.\n- `catch_fish(1.5, 25)` returns `False`.",
    "code_skeleton": "def catch_fish(weight, length):\n    ## Insert code here",
    "model_solution": "def catch_fish(weight, length):\n    return weight >= 1.5 and length >= 30\n\n# Example calls\nprint(catch_fish(2.0, 35))  # True\nprint(catch_fish(1.0, 40))  # False\nprint(catch_fish(1.5, 25))  # False",
    "unit_tests": "import unittest\nfrom main import catch_fish\n\nclass TestCatchFish(unittest.TestCase):\n    def test_both_conditions_met(self):\n        self.assertTrue(catch_fish(2.0, 35))\n\n    def test_weight_below_minimum(self):\n        self.assertFalse(catch_fish(1.0, 40))\n\n    def test_length_below_minimum(self):\n        self.assertFalse(catch_fish(1.5, 25))\n\n    def test_both_conditions_not_met(self):\n        self.assertFalse(catch_fish(1.0, 20))\n\n    def test_threshold_weight(self):\n        self.assertTrue(catch_fish(1.5, 30))\n\n    def test_threshold_length(self):\n        self.assertTrue(catch_fish(2.0, 30))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 28,
    "programming_concept": "While loops",
    "context": "Social Media",
    "task_description": "### Exercise: Follower Counter\n\nWrite a function named `follower_counter(start_followers, target_followers)` that calculates the number of days needed to reach a certain number of followers on a social media platform.\n\n- `start_followers` is the number of followers you have at the beginning.\n- `target_followers` is the number of followers you aim to achieve.\n\nEvery day you gain 10 new followers. The function should return the number of days needed to reach or exceed the `target_followers`.\n\nExample call: `follower_counter(100, 150)` returns `5`.",
    "code_skeleton": "def follower_counter(start_followers, target_followers):\n    ## Insert code here",
    "model_solution": "def follower_counter(start_followers, target_followers):\n    return (target_followers - start_followers + 9) // 10\n\nprint(follower_counter(100, 150))",
    "unit_tests": "import unittest\nfrom main import follower_counter\n\nclass TestFollowerCounter(unittest.TestCase):\n    def test_simple_case(self):\n        self.assertEqual(follower_counter(100, 150), 5)\n\n    def test_no_increase_needed(self):\n        self.assertEqual(follower_counter(100, 100), 0)\n\n    def test_one_day_needed(self):\n        self.assertEqual(follower_counter(100, 109), 1)\n\n    def test_multiple_days_needed(self):\n        self.assertEqual(follower_counter(100, 200), 10)\n\n    def test_large_increase(self):\n        self.assertEqual(follower_counter(100, 1000), 90)\n\n    def test_start_and_target_equal(self):\n        self.assertEqual(follower_counter(0, 0), 0)\n\n    def test_start_greater_than_target(self):\n        self.assertEqual(follower_counter(150, 100), 0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 29,
    "programming_concept": "Recursion",
    "context": "Fishing",
    "task_description": "### Exercise Task: Recursive Fish Counting\n\nWrite a recursive function named `count_fish(lake)` that counts the number of fish in a lake. The lake is represented as a nested list, where each list either contains a number (the number of fish in that part of the lake) or another list (a deeper part of the lake).\n\nExample:\n```python\nlake = [2, [3, [1, 4], 5], [6, 7], 8]\n```\n\nIn this example, the lake contains a total of 36 fish.\n\nImplement the function `count_fish(lake)` that returns the total count of fish in the lake.\n\nExample call:\n```python\nprint(count_fish(lake))  # Output: 36\n```",
    "code_skeleton": "def count_fish(lake):\n    ## Insert code here",
    "model_solution": "def count_fish(lake):\n    if isinstance(lake, int):\n        return lake\n    return sum(count_fish(part) for part in lake)\n\nlake = [2, [3, [1, 4], 5], [6, 7], 8]\nprint(count_fish(lake))  # Output: 36",
    "unit_tests": "import unittest\n\nfrom main import count_fish\n\nclass TestCountFish(unittest.TestCase):\n    def test_simple_lake(self):\n        self.assertEqual(count_fish([1, 2, 3]), 6)\n\n    def test_empty_lake(self):\n        self.assertEqual(count_fish([]), 0)\n\n    def test_one_fish(self):\n        self.assertEqual(count_fish([1]), 1)\n\n    def test_nested_lake(self):\n        self.assertEqual(count_fish([1, [2, [3, 4]], 5]), 15)\n\n    def test_deeply_nested_lake(self):\n        self.assertEqual(count_fish([1, [2, [3, [4, [5]]]]]), 15)\n\n    def test_mixed_lake(self):\n        self.assertEqual(count_fish([2, [3, [1, 4], 5], [6, 7], 8]), 36)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 30,
    "programming_concept": "Lists",
    "context": "Cooking",
    "task_description": "### Exercise: Ingredient List for a Recipe\n\nWrite a function named `add_ingredient(ingredient_list, new_ingredient)`, which receives a list of ingredients and a new ingredient as parameters. The function should add the new ingredient to the ingredient list and return the updated list.\n\nExample call:\n```python\ningredients = [\"Flour\", \"Sugar\", \"Eggs\"]\nnew_ingredient = \"Milk\"\nprint(add_ingredient(ingredients, new_ingredient))\n```\n\nExpected Output:\n```\n[\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"]\n```",
    "code_skeleton": "def add_ingredient(ingredient_list, new_ingredient):\n    ## Insert code here",
    "model_solution": "def add_ingredient(ingredient_list, new_ingredient):\n    ingredient_list.append(new_ingredient)\n    return ingredient_list\n\ningredients = [\"Flour\", \"Sugar\", \"Eggs\"]\nnew_ingredient = \"Milk\"\nprint(add_ingredient(ingredients, new_ingredient))",
    "unit_tests": "import unittest\nfrom main import add_ingredient\n\nclass TestAddIngredient(unittest.TestCase):\n    def test_simple_ingredient(self):\n        self.assertEqual(add_ingredient([\"Flour\", \"Sugar\", \"Eggs\"], \"Milk\"), [\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"])\n\n    def test_empty_list(self):\n        self.assertEqual(add_ingredient([], \"Milk\"), [\"Milk\"])\n\n    def test_multiple_ingredients(self):\n        self.assertEqual(add_ingredient([\"Flour\"], \"Sugar\"), [\"Flour\", \"Sugar\"])\n\n    def test_duplicate_ingredient(self):\n        self.assertEqual(add_ingredient([\"Flour\", \"Sugar\", \"Eggs\"], \"Sugar\"), [\"Flour\", \"Sugar\", \"Eggs\", \"Sugar\"])\n\n    def test_ingredient_as_number(self):\n        self.assertEqual(add_ingredient([\"Flour\", \"Sugar\", \"Eggs\"], 123), [\"Flour\", \"Sugar\", \"Eggs\", 123])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 31,
    "programming_concept": "Lists",
    "context": "Cooking",
    "task_description": "### Practice Task: Ingredient List for a Recipe\n\nWrite a function named `add_ingredient(ingredient_list, new_ingredient)`, which receives a list of ingredients and a new ingredient as parameters. The function should add the new ingredient to the ingredient list and return the updated list.\n\nExample call:\n```python\ningredients = [\"Flour\", \"Sugar\", \"Eggs\"]\nnew_ingredient = \"Milk\"\nupdated_list = add_ingredient(ingredients, new_ingredient)\nprint(updated_list)  # Output: [\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"]\n```\n\nAlso, create a function `remove_ingredient(ingredient_list, ingredient_to_remove)`, which receives a list of ingredients and an ingredient to remove as parameters. The function should remove the specified ingredient from the ingredient list and return the updated list.\n\nExample call:\n```python\ningredients = [\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"]\ningredient_to_remove = \"Sugar\"\nupdated_list = remove_ingredient(ingredients, ingredient_to_remove)\nprint(updated_list)  # Output: [\"Flour\", \"Eggs\", \"Milk\"]\n```\n\nImplement both functions in Python.",
    "code_skeleton": "def add_ingredient(ingredient_list, new_ingredient):\n    ## Insert code here\n\n\ndef remove_ingredient(ingredient_list, ingredient_to_remove):\n    ## Insert code here\n",
    "model_solution": "def add_ingredient(ingredient_list, new_ingredient):\n    ingredient_list.append(new_ingredient)\n    return ingredient_list\n\n\ndef remove_ingredient(ingredient_list, ingredient_to_remove):\n    ingredient_list.remove(ingredient_to_remove)\n    return ingredient_list\n\n# Example calls\ningredients = [\"Flour\", \"Sugar\", \"Eggs\"]\nnew_ingredient = \"Milk\"\nupdated_list = add_ingredient(ingredients, new_ingredient)\nprint(updated_list)  # Output: [\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"]\n\ningredients = [\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"]\ningredient_to_remove = \"Sugar\"\nupdated_list = remove_ingredient(ingredients, ingredient_to_remove)\nprint(updated_list)  # Output: [\"Flour\", \"Eggs\", \"Milk\"]\n",
    "unit_tests": "import unittest\nfrom main import add_ingredient, remove_ingredient\n\nclass TestIngredients(unittest.TestCase):\n    def test_add_ingredient_simple(self):\n        self.assertEqual(add_ingredient([\"Flour\", \"Sugar\", \"Eggs\"], \"Milk\"), [\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"])\n\n    def test_add_ingredient_empty_list(self):\n        self.assertEqual(add_ingredient([], \"Milk\"), [\"Milk\"])\n\n    def test_add_ingredient_duplicate(self):\n        self.assertEqual(add_ingredient([\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"], \"Milk\"), [\"Flour\", \"Sugar\", \"Eggs\", \"Milk\", \"Milk\"])\n\n    def test_remove_ingredient_simple(self):\n        self.assertEqual(remove_ingredient([\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"], \"Sugar\"), [\"Flour\", \"Eggs\", \"Milk\"])\n\n    def test_remove_ingredient_last_element(self):\n        self.assertEqual(remove_ingredient([\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"], \"Milk\"), [\"Flour\", \"Sugar\", \"Eggs\"])\n\n    def test_remove_ingredient_not_present(self):\n        with self.assertRaises(ValueError):\n            remove_ingredient([\"Flour\", \"Sugar\", \"Eggs\"], \"Milk\")\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 32,
    "programming_concept": "Tuples",
    "context": "Amusement Park",
    "task_description": "### Exercise: Amusement Park Tickets\n\nWrite a function named `ticket_prices(tickets)` that takes a list of tuples as an argument. Each tuple represents a ticket and contains two elements: the name of the ride (as a string) and the price of the ticket (as a float).\n\nThe function should calculate and return the total cost of all tickets.\n\nExample call:\n```python\ntickets = [(\"Roller coaster\", 5.50), (\"Ferris wheel\", 3.75), (\"Haunted house\", 4.00)]\nprint(ticket_prices(tickets))  # Output: 13.25\n```\n\nImplement the function `ticket_prices(tickets)`, which calculates and returns the total costs of the given tickets.",
    "code_skeleton": "def ticket_prices(tickets):\n    ## Insert code here",
    "model_solution": "def ticket_prices(tickets):\n    return sum(price for _, price in tickets)\n\ntickets = [(\"Roller coaster\", 5.50), (\"Ferris wheel\", 3.75), (\"Haunted house\", 4.00)]\nprint(ticket_prices(tickets))",
    "unit_tests": "import unittest\nfrom main import ticket_prices\n\nclass TestTicketPrices(unittest.TestCase):\n    def test_simple_case(self):\n        tickets = [(\"Roller coaster\", 5.50), (\"Ferris wheel\", 3.75), (\"Haunted house\", 4.00)]\n        self.assertEqual(ticket_prices(tickets), 13.25)\n\n    def test_empty_list(self):\n        tickets = []\n        self.assertEqual(ticket_prices(tickets), 0.0)\n\n    def test_single_ticket(self):\n        tickets = [(\"Roller coaster\", 5.50)]\n        self.assertEqual(ticket_prices(tickets), 5.50)\n\n    def test_mixed_prices(self):\n        tickets = [(\"Roller coaster\", 5.50), (\"Ferris wheel\", 3.75), (\"Haunted house\", 4.00), (\"Carousel\", 2.25)]\n        self.assertEqual(ticket_prices(tickets), 15.50)\n\n    def test_negative_prices(self):\n        tickets = [(\"Roller coaster\", -5.50), (\"Ferris wheel\", 3.75)]\n        self.assertEqual(ticket_prices(tickets), -1.75)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 33,
    "programming_concept": "Tuples",
    "context": "Restaurant",
    "task_description": "### Exercise: Restaurant Menu\n\nWrite a function named `create_menu()` that returns a tuple with the names of three different dishes from a restaurant menu. Each dish should be included as a string in the tuple. Example call: `create_menu()` might return a tuple like `(\"Pizza Margherita\", \"Spaghetti Carbonara\", \"Tiramisu\")`.\n\n```python\ndef create_menu():\n    # Your implementation here\n    pass\n```\n\nAlso create a function `print_menu(menu)` that iterates through the passed menu tuple and outputs each dish on a new line. Example call: `print_menu((\"Pizza Margherita\", \"Spaghetti Carbonara\", \"Tiramisu\"))` should output the dishes each on a new line.\n\n```python\ndef print_menu(menu):\n    # Your implementation here\n    pass\n```\n\nUse the `create_menu()` function and pass the returned tuple to the `print_menu()` function to print the menu to the console.",
    "code_skeleton": "def create_menu():\n    ## Insert code here\n    pass\n\ndef print_menu(menu):\n    ## Insert code here\n    pass",
    "model_solution": "def create_menu():\n    return (\"Pizza Margherita\", \"Spaghetti Carbonara\", \"Tiramisu\")\n\ndef print_menu(menu):\n    for dish in menu:\n        print(dish)\n\nmenu = create_menu()\nprint_menu(menu)",
    "unit_tests": "import unittest\nfrom main import create_menu, print_menu\nfrom io import StringIO\nimport sys\n\nclass TestRestaurantMenu(unittest.TestCase):\n    def test_create_menu(self):\n        menu = create_menu()\n        self.assertIsInstance(menu, tuple)\n        self.assertEqual(len(menu), 3)\n        for dish in menu:\n            self.assertIsInstance(dish, str)\n\n    def test_print_menu(self):\n        menu = (\"Pizza Margherita\", \"Spaghetti Carbonara\", \"Tiramisu\")\n        expected_output = \"Pizza Margherita\\nSpaghetti Carbonara\\nTiramisu\\n\"\n        \n        captured_output = StringIO()\n        sys.stdout = captured_output\n        print_menu(menu)\n        sys.stdout = sys.__stdout__\n        \n        self.assertEqual(captured_output.getvalue(), expected_output)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 34,
    "programming_concept": "String",
    "context": "Sports",
    "task_description": "### Practice Task: Filter Sports\n\nWrite a function called `filter_sports(sports_list, filter_letter)` that takes a list of sports and a letter as parameters. The function should return a new list that only contains the sports starting with the specified letter.\n\nExample call:\n```python\nsports = [\"Basketball\", \"Baseball\", \"Soccer\", \"Tennis\", \"Badminton\"]\nresult = filter_sports(sports, \"B\")\nprint(result)  # Output: [\"Basketball\", \"Baseball\", \"Badminton\"]\n```\n\nImplement the function so that it delivers the desired results.",
    "code_skeleton": "def filter_sports(sports_list, filter_letter):\n    ## Insert code here",
    "model_solution": "def filter_sports(sports_list, filter_letter):\n    return [sport for sport in sports_list if sport.startswith(filter_letter)]\n\nsports = [\"Basketball\", \"Baseball\", \"Soccer\", \"Tennis\", \"Badminton\"]\nresult = filter_sports(sports, \"B\")\nprint(result)  # Output: [\"Basketball\", \"Baseball\", \"Badminton\"]",
    "unit_tests": "import unittest\nfrom main import filter_sports\n\nclass TestFilterSports(unittest.TestCase):\n    def test_filter_b(self):\n        self.assertEqual(filter_sports([\"Basketball\", \"Baseball\", \"Soccer\", \"Tennis\", \"Badminton\"], \"B\"), [\"Basketball\", \"Baseball\", \"Badminton\"])\n\n    def test_filter_f(self):\n        self.assertEqual(filter_sports([\"Basketball\", \"Baseball\", \"Soccer\", \"Tennis\", \"Badminton\"], \"F\"), [\"Soccer\"])\n\n    def test_filter_t(self):\n        self.assertEqual(filter_sports([\"Basketball\", \"Baseball\", \"Soccer\", \"Tennis\", \"Badminton\"], \"T\"), [\"Tennis\"])\n\n    def test_filter_no_match(self):\n        self.assertEqual(filter_sports([\"Basketball\", \"Baseball\", \"Soccer\", \"Tennis\", \"Badminton\"], \"X\"), [])\n\n    def test_empty_list(self):\n        self.assertEqual(filter_sports([], \"B\"), [])\n\n    def test_case_sensitivity(self):\n        self.assertEqual(filter_sports([\"Basketball\", \"baseball\", \"Soccer\", \"Tennis\", \"badminton\"], \"b\"), [\"baseball\", \"badminton\"])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 35,
    "programming_concept": "If-Else statements; Logical operators (==, !=, <, >, <=, >=, or, and, not)",
    "context": "Olympics",
    "task_description": "### Exercise: Olympic Medal Comparison\n\nWrite a function named `compare_medals(country1_gold, country1_silver, country1_bronze, country2_gold, country2_silver, country2_bronze)` that compares the number of medals won by two countries in the Olympic Games and returns an appropriate message.\n\nThe function should take the number of gold, silver, and bronze medals of the two countries as arguments and perform the following comparisons:\n\n1. If one country has more gold medals than the other, the function should return a message indicating which country won more gold medals.\n2. If both countries have the same number of gold medals, the function should compare the number of silver medals and return an appropriate message.\n3. If the number of silver medals is also the same, the function should compare the number of bronze medals and return an appropriate message.\n4. If both countries have the same number of medals in all categories, the function should return a message stating that both countries won the same number of medals.\n\nExample call:\n```python\ncompare_medals(10, 5, 3, 8, 7, 2)\n```\n\nExpected output:\n```\nCountry 1 won more gold medals.\n```",
    "code_skeleton": "def compare_medals(country1_gold, country1_silver, country1_bronze, country2_gold, country2_silver, country2_bronze):\n    ## Insert code here",
    "model_solution": "def compare_medals(country1_gold, country1_silver, country1_bronze, country2_gold, country2_silver, country2_bronze):\n    if country1_gold > country2_gold:\n        print(\"Country 1 won more gold medals.\")\n    elif country1_gold < country2_gold:\n        print(\"Country 2 won more gold medals.\")\n    elif country1_silver > country2_silver:\n        print(\"Country 1 won more silver medals.\")\n    elif country1_silver < country2_silver:\n        print(\"Country 2 won more silver medals.\")\n    elif country1_bronze > country2_bronze:\n        print(\"Country 1 won more bronze medals.\")\n    elif country1_bronze < country2_bronze:\n        print(\"Country 2 won more bronze medals.\")\n    else:\n        print(\"Both countries won the same number of medals.\")\n\ncompare_medals(10, 5, 3, 8, 7, 2)",
    "unit_tests": "import unittest\n\nfrom main import compare_medals\n\nclass TestCompareMedals(unittest.TestCase):\n    def test_country1_more_gold(self):\n        self.assertEqual(compare_medals(10, 5, 3, 8, 7, 2), \"Country 1 won more gold medals.\")\n\n    def test_country2_more_gold(self):\n        self.assertEqual(compare_medals(8, 5, 3, 10, 7, 2), \"Country 2 won more gold medals.\")\n\n    def test_country1_more_silver(self):\n        self.assertEqual(compare_medals(10, 7, 3, 10, 5, 2), \"Country 1 won more silver medals.\")\n\n    def test_country2_more_silver(self):\n        self.assertEqual(compare_medals(10, 5, 3, 10, 7, 2), \"Country 2 won more silver medals.\")\n\n    def test_country1_more_bronze(self):\n        self.assertEqual(compare_medals(10, 5, 4, 10, 5, 3), \"Country 1 won more bronze medals.\")\n\n    def test_country2_more_bronze(self):\n        self.assertEqual(compare_medals(10, 5, 3, 10, 5, 4), \"Country 2 won more bronze medals.\")\n\n    def test_same_number_medals(self):\n        self.assertEqual(compare_medals(10, 5, 3, 10, 5, 3), \"Both countries won the same number of medals.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 36,
    "programming_concept": "Functions as variables",
    "context": "Cooking",
    "task_description": "### Exercise: Functions as Variables in the Cooking Context\n\nWrite a function `cook_recipe(recipe_name)` that accepts a function as a parameter and executes that function. Create two example recipes as functions: `recipe_pasta()` and `recipe_salad()`.\n\n- `recipe_pasta()` should output the message \"Pasta is being cooked!\".\n- `recipe_salad()` should output the message \"Salad is being prepared!\".\n\nThe function `cook_recipe(recipe_name)` should execute the passed recipe function.\n\nExample calls:\n```python\ncook_recipe(recipe_pasta)  # Output: Pasta is being cooked!\ncook_recipe(recipe_salad)  # Output: Salad is being prepared!\n```",
    "code_skeleton": "def cook_recipe(recipe_name):\n    ## Insert code here\n\ndef recipe_pasta():\n    ## Insert code here\n\ndef recipe_salad():\n    ## Insert code here",
    "model_solution": "def cook_recipe(recipe_name):\n    recipe_name()\n\ndef recipe_pasta():\n    print(\"Pasta is being cooked!\")\n\ndef recipe_salad():\n    print(\"Salad is being prepared!\")\n\ncook_recipe(recipe_pasta)\ncook_recipe(recipe_salad)",
    "unit_tests": "import unittest\nfrom io import StringIO\nimport sys\nfrom main import cook_recipe, recipe_pasta, recipe_salad\n\nclass TestCookRecipe(unittest.TestCase):\n    def test_recipe_pasta(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        cook_recipe(recipe_pasta)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Pasta is being cooked!\")\n\n    def test_recipe_salad(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        cook_recipe(recipe_salad)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Salad is being prepared!\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 37,
    "programming_concept": "Operations with numbers",
    "context": "Restaurant",
    "task_description": "### Practice Task: Calculate Restaurant Bill\n\nWrite a function called `calculate_bill(prices, tip_percent)` that calculates the total bill for a restaurant. The function should accept a list of prices (`prices`) and a percentage for the tip (`tip_percent`) as arguments. The function should calculate the total sum of the prices, add the tip based on the percentage, and return the total bill.\n\nExample call:\n```python\nprices = [10.50, 20.75, 8.99]\ntip_percent = 15\nprint(calculate_bill(prices, tip_percent))  # Expected output: 45.29\n```\n\nIn this example, the prices of the ordered dishes are 10.50, 20.75, and 8.99. The tip is 15% of the total sum of the prices. The function should calculate and return the total bill.",
    "code_skeleton": "def calculate_bill(prices, tip_percent):\n    ## Insert code here\n",
    "model_solution": "def calculate_bill(prices, tip_percent):\n    total = sum(prices)\n    tip = total * (tip_percent / 100)\n    return round(total + tip, 2)\n\nprices = [10.50, 20.75, 8.99]\ntip_percent = 15\nprint(calculate_bill(prices, tip_percent))",
    "unit_tests": "import unittest\nfrom main import calculate_bill\n\nclass TestCalculateBill(unittest.TestCase):\n    def test_simple_bill(self):\n        prices = [10.50, 20.75, 8.99]\n        tip_percent = 15\n        self.assertEqual(calculate_bill(prices, tip_percent), 45.29)\n\n    def test_no_prices(self):\n        prices = []\n        tip_percent = 15\n        self.assertEqual(calculate_bill(prices, tip_percent), 0.00)\n\n    def test_no_tip(self):\n        prices = [10.50, 20.75, 8.99]\n        tip_percent = 0\n        self.assertEqual(calculate_bill(prices, tip_percent), 40.24)\n\n    def test_high_tip(self):\n        prices = [10.50, 20.75, 8.99]\n        tip_percent = 100\n        self.assertEqual(calculate_bill(prices, tip_percent), 80.48)\n\n    def test_rounding(self):\n        prices = [10.333, 20.666, 8.999]\n        tip_percent = 10\n        self.assertEqual(calculate_bill(prices, tip_percent), 43.22)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 38,
    "programming_concept": "Logical operators (==, !=, <, >, <=, >=, or, and, not)",
    "context": "Cooking",
    "task_description": "### Exercise: Recipe Selection Based on Ingredients\n\nWrite a function called `recipe_selection(ingredients)` that decides which recipe can be cooked based on a list of ingredients. The function should consider the following recipes:\n\n- **Pasta**: If both 'Pasta' and 'Tomato Sauce' are in the ingredients list.\n- **Salad**: If both 'Salad' and 'Tomatoes' are in the ingredients list.\n- **Omelette**: If both 'Eggs' and 'Milk' are in the ingredients list.\n\nThe function should return the name of the recipe as a string that can be cooked. If none of the ingredient combinations are present, the function should return 'No Recipe Found'.\n\nExample calls:\n\n```python\nprint(recipe_selection(['Pasta', 'Tomato Sauce', 'Cheese']))  # Output: 'Pasta'\nprint(recipe_selection(['Salad', 'Tomatoes', 'Cucumber']))    # Output: 'Salad'\nprint(recipe_selection(['Eggs', 'Milk', 'Cheese']))           # Output: 'Omelette'\nprint(recipe_selection(['Bread', 'Butter']))                  # Output: 'No Recipe Found'\n```",
    "code_skeleton": "def recipe_selection(ingredients):\n    ## Insert code here",
    "model_solution": "def recipe_selection(ingredients):\n    if 'Pasta' in ingredients and 'Tomato Sauce' in ingredients:\n        return 'Pasta'\n    elif 'Salad' in ingredients and 'Tomatoes' in ingredients:\n        return 'Salad'\n    elif 'Eggs' in ingredients and 'Milk' in ingredients:\n        return 'Omelette'\n    return 'No Recipe Found'\n\nprint(recipe_selection(['Pasta', 'Tomato Sauce', 'Cheese']))\nprint(recipe_selection(['Salad', 'Tomatoes', 'Cucumber']))\nprint(recipe_selection(['Eggs', 'Milk', 'Cheese']))\nprint(recipe_selection(['Bread', 'Butter']))",
    "unit_tests": "import unittest\nfrom main import recipe_selection\n\nclass TestRecipeSelection(unittest.TestCase):\n    def test_pasta(self):\n        self.assertEqual(recipe_selection(['Pasta', 'Tomato Sauce', 'Cheese']), 'Pasta')\n\n    def test_salad(self):\n        self.assertEqual(recipe_selection(['Salad', 'Tomatoes', 'Cucumber']), 'Salad')\n\n    def test_omelette(self):\n        self.assertEqual(recipe_selection(['Eggs', 'Milk', 'Cheese']), 'Omelette')\n\n    def test_no_recipe(self):\n        self.assertEqual(recipe_selection(['Bread', 'Butter']), 'No Recipe Found')\n\n    def test_empty_list(self):\n        self.assertEqual(recipe_selection([]), 'No Recipe Found')\n\n    def test_incomplete_ingredients(self):\n        self.assertEqual(recipe_selection(['Pasta']), 'No Recipe Found')\n        self.assertEqual(recipe_selection(['Tomato Sauce']), 'No Recipe Found')\n        self.assertEqual(recipe_selection(['Salad']), 'No Recipe Found')\n        self.assertEqual(recipe_selection(['Tomatoes']), 'No Recipe Found')\n        self.assertEqual(recipe_selection(['Eggs']), 'No Recipe Found')\n        self.assertEqual(recipe_selection(['Milk']), 'No Recipe Found')\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 39,
    "programming_concept": "If-Else statements",
    "context": "Olympics",
    "task_description": "### Exercise: Olympic Medals\n\nWrite a function named `medal_evaluation(number_of_gold, number_of_silver, number_of_bronze)` that evaluates the number of medals won by a country at the Olympic Games and returns an appropriate message.\n\n- If the country has won at least 10 gold medals, the message \"Outstanding performance!\" should be returned.\n- If the country has won at least 5 gold medals and at least 5 silver medals, the message \"Very good performance!\" should be returned.\n- If the country has won at least 3 gold medals, 3 silver medals, and 3 bronze medals, the message \"Good performance!\" should be returned.\n- In all other cases, the message \"Participation is everything!\" should be returned.\n\nExample call:\n```python\nprint(medal_evaluation(12, 4, 3))  # Output: Outstanding performance!\nprint(medal_evaluation(6, 5, 2))   # Output: Very good performance!\nprint(medal_evaluation(3, 3, 3))   # Output: Good performance!\nprint(medal_evaluation(1, 2, 1))   # Output: Participation is everything!\n```",
    "code_skeleton": "def medal_evaluation(number_of_gold, number_of_silver, number_of_bronze):\n    ## Insert code here",
    "model_solution": "def medal_evaluation(number_of_gold, number_of_silver, number_of_bronze):\n    if number_of_gold >= 10:\n        return \"Outstanding performance!\"\n    elif number_of_gold >= 5 and number_of_silver >= 5:\n        return \"Very good performance!\"\n    elif number_of_gold >= 3 and number_of_silver >= 3 and number_of_bronze >= 3:\n        return \"Good performance!\"\n    else:\n        return \"Participation is everything!\"\n\nprint(medal_evaluation(12, 4, 3))\nprint(medal_evaluation(6, 5, 2))\nprint(medal_evaluation(3, 3, 3))\nprint(medal_evaluation(1, 2, 1))",
    "unit_tests": "import unittest\nfrom main import medal_evaluation\n\nclass TestMedalEvaluation(unittest.TestCase):\n    def test_outstanding_performance(self):\n        self.assertEqual(medal_evaluation(12, 4, 3), \"Outstanding performance!\")\n\n    def test_very_good_performance(self):\n        self.assertEqual(medal_evaluation(6, 5, 2), \"Very good performance!\")\n\n    def test_good_performance(self):\n        self.assertEqual(medal_evaluation(3, 3, 3), \"Good performance!\")\n\n    def test_participation_is_everything(self):\n        self.assertEqual(medal_evaluation(1, 2, 1), \"Participation is everything!\")\n\n    def test_edge_case_outstanding_performance(self):\n        self.assertEqual(medal_evaluation(10, 0, 0), \"Outstanding performance!\")\n\n    def test_edge_case_very_good_performance(self):\n        self.assertEqual(medal_evaluation(5, 5, 0), \"Very good performance!\")\n\n    def test_edge_case_good_performance(self):\n        self.assertEqual(medal_evaluation(3, 3, 3), \"Good performance!\")\n\n    def test_edge_case_participation_is_everything(self):\n        self.assertEqual(medal_evaluation(2, 2, 2), \"Participation is everything!\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 40,
    "programming_concept": "If-Else statements",
    "context": "Social Media",
    "task_description": "### Exercise: Social Media - User Status\n\nWrite a function called `user_status(number_of_followers)` that determines the status of a user on a social media platform based on their number of followers. The function should return an appropriate message with `return`.\n\n- If the number of followers is less than 100, the message 'Newbie' should be returned.\n- If the number of followers is between 100 and 1000 (inclusive), the message 'Rising Star' should be returned.\n- If the number of followers is more than 1000, the message 'Influencer' should be returned.\n\nExample calls:\n- `user_status(50)` returns 'Newbie'.\n- `user_status(500)` returns 'Rising Star'.\n- `user_status(1500)` returns 'Influencer'.",
    "code_skeleton": "def user_status(number_of_followers):\n    ## Insert code here",
    "model_solution": "def user_status(number_of_followers):\n    if number_of_followers < 100:\n        return 'Newbie'\n    elif number_of_followers <= 1000:\n        return 'Rising Star'\n    else:\n        return 'Influencer'\n\n# Example calls\nprint(user_status(50))    # Newbie\nprint(user_status(500))   # Rising Star\nprint(user_status(1500))  # Influencer",
    "unit_tests": "import unittest\n\nfrom main import user_status\n\nclass TestUserStatus(unittest.TestCase):\n    def test_newbie(self):\n        self.assertEqual(user_status(50), 'Newbie')\n\n    def test_rising_star(self):\n        self.assertEqual(user_status(500), 'Rising Star')\n\n    def test_influencer(self):\n        self.assertEqual(user_status(1500), 'Influencer')\n\n    def test_boundary_newbie_rising_star(self):\n        self.assertEqual(user_status(100), 'Rising Star')\n\n    def test_boundary_rising_star_influencer(self):\n        self.assertEqual(user_status(1000), 'Rising Star')\n\n    def test_zero_followers(self):\n        self.assertEqual(user_status(0), 'Newbie')\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 41,
    "programming_concept": "Recursion",
    "context": "Olympics",
    "task_description": "### Exercise: Recursive Medal Counting\n\nWrite a recursive function called `count_medals(medals)`, that calculates the total number of medals a country has won at the Olympic Games. The medals are passed in a list, with each medal represented as a string (\"Gold\", \"Silver\", or \"Bronze\").\n\nExample call:\n```python\nmedals = [\"Gold\", \"Silver\", \"Bronze\", \"Gold\", \"Silver\"]\nprint(count_medals(medals))  # Output: 5\n```\n\nImplement the function so that it works recursively.",
    "code_skeleton": "def count_medals(medals):\n    ## Insert code here",
    "model_solution": "def count_medals(medals):\n    if not medals:\n        return 0\n    return 1 + count_medals(medals[1:])\n\nmedals = [\"Gold\", \"Silver\", \"Bronze\", \"Gold\", \"Silver\"]\nprint(count_medals(medals))  # Output: 5",
    "unit_tests": "import unittest\nfrom main import count_medals\n\nclass TestCountMedals(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(count_medals([]), 0)\n\n    def test_single_medal(self):\n        self.assertEqual(count_medals([\"Gold\"]), 1)\n\n    def test_multiple_medals(self):\n        self.assertEqual(count_medals([\"Gold\", \"Silver\", \"Bronze\", \"Gold\", \"Silver\"]), 5)\n\n    def test_only_gold(self):\n        self.assertEqual(count_medals([\"Gold\", \"Gold\", \"Gold\"]), 3)\n\n    def test_only_silver(self):\n        self.assertEqual(count_medals([\"Silver\", \"Silver\"]), 2)\n\n    def test_only_bronze(self):\n        self.assertEqual(count_medals([\"Bronze\"]), 1)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 42,
    "programming_concept": "Lists",
    "context": "Modern Gaming",
    "task_description": "### Exercise Task: Modern Gaming - Highscore List\n\nWrite a function named `update_highscore(list, new_score)` that takes a list of high scores and a new score as arguments. The function should insert the new score into the list and then sort the list in descending order. If the list contains more than 10 entries, the lowest score should be removed, so the list always contains only the top 10 scores. The function should return the updated highscore list.\n\nExample call:\n```python\nhighscores = [1000, 950, 900, 850, 800, 750, 700, 650, 600, 550]\nnew_score = 920\nprint(update_highscore(highscores, new_score))\n```\n\nExpected output:\n```\n[1000, 950, 920, 900, 850, 800, 750, 700, 650, 600]\n```",
    "code_skeleton": "def update_highscore(list, new_score):\n    ## Insert code here",
    "model_solution": "def update_highscore(list, new_score):\n    list.append(new_score)\n    list.sort(reverse=True)\n    return list[:10]\n\nhighscores = [1000, 950, 900, 850, 800, 750, 700, 650, 600, 550]\nnew_score = 920\nprint(update_highscore(highscores, new_score))",
    "unit_tests": "import unittest\nfrom main import update_highscore\n\nclass TestUpdateHighscore(unittest.TestCase):\n    def test_new_score_middle(self):\n        self.assertEqual(update_highscore([1000, 950, 900, 850, 800, 750, 700, 650, 600, 550], 920), [1000, 950, 920, 900, 850, 800, 750, 700, 650, 600])\n\n    def test_new_score_highest(self):\n        self.assertEqual(update_highscore([1000, 950, 900, 850, 800, 750, 700, 650, 600, 550], 1050), [1050, 1000, 950, 900, 850, 800, 750, 700, 650, 600])\n\n    def test_new_score_lowest(self):\n        self.assertEqual(update_highscore([1000, 950, 900, 850, 800, 750, 700, 650, 600, 550], 500), [1000, 950, 900, 850, 800, 750, 700, 650, 600, 550])\n\n    def test_new_score_tenth(self):\n        self.assertEqual(update_highscore([1000, 950, 900, 850, 800, 750, 700, 650, 600, 550], 550), [1000, 950, 900, 850, 800, 750, 700, 650, 600, 550])\n\n    def test_empty_list(self):\n        self.assertEqual(update_highscore([], 500), [500])\n\n    def test_less_than_ten_scores(self):\n        self.assertEqual(update_highscore([1000, 950, 900], 850), [1000, 950, 900, 850])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 43,
    "programming_concept": "Float",
    "context": "Virtual Reality",
    "task_description": "### Exercise: Calculating VR Render Time\n\nIn virtual reality (VR), it is important that the render time per frame is as low as possible to ensure smooth and realistic representation. The render time is often measured in milliseconds (ms).\n\nWrite a function named `calculate_render_time(frames, total_time)`, which calculates the average render time per frame. The function should take two parameters:\n- `frames`: The number of rendered frames (integer value).\n- `total_time`: The total render time in milliseconds (float value).\n\nThe function should return the average render time per frame as a float value.\n\nExample call:\n```python\naverage = calculate_render_time(240, 5000.0)\nprint(average)  # Expected output: 20.833333333333332\n```",
    "code_skeleton": "def calculate_render_time(frames, total_time):\n    ## Insert code here",
    "model_solution": "def calculate_render_time(frames, total_time):\n    return total_time / frames\n\naverage = calculate_render_time(240, 5000.0)\nprint(average)",
    "unit_tests": "import unittest\n\nfrom main import calculate_render_time\n\nclass TestCalculateRenderTime(unittest.TestCase):\n    def test_simple_case(self):\n        self.assertAlmostEqual(calculate_render_time(240, 5000.0), 20.833333333333332)\n\n    def test_zero_frames(self):\n        with self.assertRaises(ZeroDivisionError):\n            calculate_render_time(0, 5000.0)\n\n    def test_zero_total_time(self):\n        self.assertEqual(calculate_render_time(240, 0.0), 0.0)\n\n    def test_one_frame(self):\n        self.assertEqual(calculate_render_time(1, 5000.0), 5000.0)\n\n    def test_large_values(self):\n        self.assertAlmostEqual(calculate_render_time(1000000, 5000000.0), 5.0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 44,
    "programming_concept": "String",
    "context": "Relationships",
    "task_description": "### Exercise Task: Relationships and Strings\n\nWrite a function named `relationship_status(status)` that takes the relationship status of a person as a string and returns an appropriate message. The possible relationship statuses are:\n\n- \"Single\"\n- \"In a relationship\"\n- \"Married\"\n- \"It's complicated\"\n\nThe function should return a matching message depending on the relationship status:\n\n- For \"Single\": return \"Enjoy your freedom!\"\n- For \"In a relationship\": return \"Good luck to you both!\"\n- For \"Married\": return \"Congratulations on your marriage!\"\n- For \"It's complicated\": return \"All the best for the future!\"\n\nExample call: `relationship_status(\"Married\")` returns \"Congratulations on your marriage!\"",
    "code_skeleton": "def relationship_status(status):\n    ## Insert code here",
    "model_solution": "def relationship_status(status):\n    return {\n        \"Single\": \"Enjoy your freedom!\",\n        \"In a relationship\": \"Good luck to you both!\",\n        \"Married\": \"Congratulations on your marriage!\",\n        \"It's complicated\": \"All the best for the future!\"\n    }.get(status, \"Unknown status\")\n\n# Example call\nprint(relationship_status(\"Married\"))",
    "unit_tests": "import unittest\nfrom main import relationship_status\n\nclass TestRelationshipStatus(unittest.TestCase):\n    def test_single(self):\n        self.assertEqual(relationship_status(\"Single\"), \"Enjoy your freedom!\")\n\n    def test_in_a_relationship(self):\n        self.assertEqual(relationship_status(\"In a relationship\"), \"Good luck to you both!\")\n\n    def test_married(self):\n        self.assertEqual(relationship_status(\"Married\"), \"Congratulations on your marriage!\")\n\n    def test_its_complicated(self):\n        self.assertEqual(relationship_status(\"It's complicated\"), \"All the best for the future!\")\n\n    def test_unknown_status(self):\n        self.assertEqual(relationship_status(\"Unknown\"), \"Unknown status\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 45,
    "programming_concept": "Higher-order functions",
    "context": "Cooking",
    "task_description": "### Exercise: Higher-order functions in the context of \"Cooking\"\n\nWrite a function `cooking_assistant(recipe, preparation)` that accepts two arguments: a list of ingredients (`recipe`) and a function (`preparation`) that describes the preparation steps. The function `cooking_assistant` should apply the preparation steps to each ingredient and return a list of results.\n\nExample call:\n```python\ndef chop(ingredient):\n    return f\"Chop {ingredient}\"\n\ningredients = [\"Tomatoes\", \"Onions\", \"Peppers\"]\nresult = cooking_assistant(ingredients, chop)\nprint(result)  # Output: [\"Chop Tomatoes\", \"Chop Onions\", \"Chop Peppers\"]\n```\n\nImplement the function `cooking_assistant` so that it applies the preparation steps to each ingredient in the list and returns the results in a new list.",
    "code_skeleton": "def cooking_assistant(recipe, preparation):\n    ## Insert code here",
    "model_solution": "def cooking_assistant(recipe, preparation):\n    return [preparation(ingredient) for ingredient in recipe]\n\ndef chop(ingredient):\n    return f\"Chop {ingredient}\"\n\ningredients = [\"Tomatoes\", \"Onions\", \"Peppers\"]\nresult = cooking_assistant(ingredients, chop)\nprint(result)",
    "unit_tests": "import unittest\nfrom main import cooking_assistant\n\ndef chop(ingredient):\n    return f\"Chop {ingredient}\"\n\ndef cook(ingredient):\n    return f\"Cook {ingredient}\"\n\nclass TestCookingAssistant(unittest.TestCase):\n    def test_chop(self):\n        ingredients = [\"Tomatoes\", \"Onions\", \"Peppers\"]\n        expected = [\"Chop Tomatoes\", \"Chop Onions\", \"Chop Peppers\"]\n        self.assertEqual(cooking_assistant(ingredients, chop), expected)\n\n    def test_cook(self):\n        ingredients = [\"Potatoes\", \"Carrots\"]\n        expected = [\"Cook Potatoes\", \"Cook Carrots\"]\n        self.assertEqual(cooking_assistant(ingredients, cook), expected)\n\n    def test_empty_list(self):\n        ingredients = []\n        expected = []\n        self.assertEqual(cooking_assistant(ingredients, chop), expected)\n\n    def test_single_ingredient(self):\n        ingredients = [\"Cucumber\"]\n        expected = [\"Chop Cucumber\"]\n        self.assertEqual(cooking_assistant(ingredients, chop), expected)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 46,
    "programming_concept": "Integer",
    "context": "Film",
    "task_description": "### Exercise: Movie Rating\n\nWrite a function named `rate_movie(rating)` that takes a rating for a movie and returns a corresponding message. The rating is an integer value between 1 and 10.\n\n- If the rating is between 1 and 3, it should return the message \"The movie was bad.\"\n- If the rating is between 4 and 6, it should return the message \"The movie was average.\"\n- If the rating is between 7 and 10, it should return the message \"The movie was great!\"\n\nExample calls:\n- `rate_movie(2)` returns \"The movie was bad.\"\n- `rate_movie(5)` returns \"The movie was average.\"\n- `rate_movie(9)` returns \"The movie was great!\"",
    "code_skeleton": "def rate_movie(rating):\n    ## Insert code here\n",
    "model_solution": "def rate_movie(rating):\n    if 1 <= rating <= 3:\n        return \"The movie was bad.\"\n    elif 4 <= rating <= 6:\n        return \"The movie was average.\"\n    elif 7 <= rating <= 10:\n        return \"The movie was great!\"\n\n# Example calls\nprint(rate_movie(2))\nprint(rate_movie(5))\nprint(rate_movie(9))",
    "unit_tests": "import unittest\nfrom main import rate_movie\n\nclass TestRateMovie(unittest.TestCase):\n    def test_bad(self):\n        self.assertEqual(rate_movie(2), \"The movie was bad.\")\n\n    def test_average(self):\n        self.assertEqual(rate_movie(5), \"The movie was average.\")\n\n    def test_great(self):\n        self.assertEqual(rate_movie(9), \"The movie was great!\")\n\n    def test_lower_boundary(self):\n        self.assertEqual(rate_movie(1), \"The movie was bad.\")\n\n    def test_upper_boundary(self):\n        self.assertEqual(rate_movie(10), \"The movie was great!\")\n\n    def test_boundary_bad_average(self):\n        self.assertEqual(rate_movie(3), \"The movie was bad.\")\n        self.assertEqual(rate_movie(4), \"The movie was average.\")\n\n    def test_boundary_average_great(self):\n        self.assertEqual(rate_movie(6), \"The movie was average.\")\n        self.assertEqual(rate_movie(7), \"The movie was great.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 47,
    "programming_concept": "String",
    "context": "Fishing",
    "task_description": "### Exercise: Fishing and Fish\n\nWrite a function named `count_fish(text)` that takes a string input and returns the number of times the word \"fish\" appears in that text. The function should not distinguish between uppercase and lowercase letters.\n\nExample call:\n```python\ncount_fish(\"I caught three fish today. Fish is my favorite food.\")\n```\n\nExpected output:\n```\n2\n```",
    "code_skeleton": "def count_fish(text):\n    ## Insert code here",
    "model_solution": "def count_fish(text):\n    print(text.lower().count(\"fish\"))\n\ncount_fish(\"I caught three fish today. Fish is my favorite food.\")",
    "unit_tests": "import unittest\n\nfrom main import count_fish\n\nclass TestCountFish(unittest.TestCase):\n    def test_simple_text(self):\n        self.assertEqual(count_fish(\"I caught three fish today. Fish is my favorite food.\"), 2)\n\n    def test_no_fish(self):\n        self.assertEqual(count_fish(\"I caught no fish today.\"), 1)\n\n    def test_multiple_fish(self):\n        self.assertEqual(count_fish(\"fish fish fish\"), 3)\n\n    def test_mixed_case(self):\n        self.assertEqual(count_fish(\"fish Fish FISH\"), 3)\n\n    def test_empty_text(self):\n        self.assertEqual(count_fish(\"\"), 0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 48,
    "programming_concept": "String",
    "context": "Cooking",
    "task_description": "### Practice Exercise: Recipe Description\n\nWrite a function named `recipe_description(recipe)` that formats a description of a recipe. The function should take a string `recipe` as input, which contains the ingredients and preparation steps. The function should format the string so that each ingredient and each preparation step appears on a new line. \n\nExample call:\n```python\nrecipe = 'Ingredients: Flour, Sugar, Eggs, Milk. Preparation: Mix, Bake, Cool.'\nprint(recipe_description(recipe))\n```\n\nExpected output:\n```\nIngredients:\nFlour\nSugar\nEggs\nMilk\nPreparation:\nMix\nBake\nCool\n```",
    "code_skeleton": "def recipe_description(recipe):\n    ## Insert code here",
    "model_solution": "def recipe_description(recipe):\n    ingredients, preparation = recipe.split('Preparation:')\n    ingredients = ingredients.replace('Ingredients:', 'Ingredients:\\n').replace(', ', '\\n')\n    preparation = 'Preparation:\\n' + preparation.replace(', ', '\\n')\n    return ingredients + preparation\n\nrecipe = 'Ingredients: Flour, Sugar, Eggs, Milk. Preparation: Mix, Bake, Cool.'\nprint(recipe_description(recipe))",
    "unit_tests": "import unittest\n\nclass TestRecipeDescription(unittest.TestCase):\n    def test_simple_recipe(self):\n        recipe = 'Ingredients: Flour, Sugar, Eggs, Milk. Preparation: Mix, Bake, Cool.'\n        expected = 'Ingredients:\\nFlour\\nSugar\\nEggs\\nMilk\\nPreparation:\\nMix\\nBake\\nCool'\n        self.assertEqual(recipe_description(recipe), expected)\n\n    def test_empty_recipe(self):\n        recipe = 'Ingredients: . Preparation: .'\n        expected = 'Ingredients:\\n\\nPreparation:\\n'\n        self.assertEqual(recipe_description(recipe), expected)\n\n    def test_only_ingredients(self):\n        recipe = 'Ingredients: Flour, Sugar. Preparation: .'\n        expected = 'Ingredients:\\nFlour\\nSugar\\nPreparation:\\n'\n        self.assertEqual(recipe_description(recipe), expected)\n\n    def test_only_preparation(self):\n        recipe = 'Ingredients: . Preparation: Mix, Bake.'\n        expected = 'Ingredients:\\n\\nPreparation:\\nMix\\nBake'\n        self.assertEqual(recipe_description(recipe), expected)\n\n    def test_complex_recipe(self):\n        recipe = 'Ingredients: Flour, Sugar, Eggs, Milk, Butter, Salt. Preparation: Mix, Knead, Bake, Cool, Serve.'\n        expected = 'Ingredients:\\nFlour\\nSugar\\nEggs\\nMilk\\nButter\\nSalt\\nPreparation:\\nMix\\nKnead\\nBake\\nCool\\nServe'\n        self.assertEqual(recipe_description(recipe), expected)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 49,
    "programming_concept": "Operations with numbers",
    "context": "Restaurant",
    "task_description": "### Exercise: Operations with Numbers in the Restaurant\n\nWrite a function named `calculate_bill(prices, tip_percent)` that calculates the total bill for a restaurant. The function should take a list of prices (`prices`) and a percentage for the tip (`tip_percent`) as arguments. The function should calculate the total sum of the prices, add the tip based on the percentage, and return the total amount.\n\nExample call:\n```python\nprices = [10.50, 20.75, 8.99]\ntip_percent = 15\nprint(calculate_bill(prices, tip_percent))  # Expected output: 45.29\n```\n\nIn this example, the prices of the ordered dishes are 10.50, 20.75, and 8.99. The tip is 15% of the total sum of the prices. The function should calculate and return the total amount including tip.",
    "code_skeleton": "def calculate_bill(prices, tip_percent):\n    ## Insert code here\n",
    "model_solution": "def calculate_bill(prices, tip_percent):\n    total = sum(prices)\n    tip = total * (tip_percent / 100)\n    return round(total + tip, 2)\n\nprices = [10.50, 20.75, 8.99]\ntip_percent = 15\nprint(calculate_bill(prices, tip_percent))",
    "unit_tests": "import unittest\nfrom main import calculate_bill\n\nclass TestCalculateBill(unittest.TestCase):\n    def test_simple_bill(self):\n        prices = [10.50, 20.75, 8.99]\n        tip_percent = 15\n        self.assertEqual(calculate_bill(prices, tip_percent), 45.29)\n\n    def test_no_prices(self):\n        prices = []\n        tip_percent = 15\n        self.assertEqual(calculate_bill(prices, tip_percent), 0.00)\n\n    def test_no_tip(self):\n        prices = [10.50, 20.75, 8.99]\n        tip_percent = 0\n        self.assertEqual(calculate_bill(prices, tip_percent), 40.24)\n\n    def test_high_tip(self):\n        prices = [10.50, 20.75, 8.99]\n        tip_percent = 100\n        self.assertEqual(calculate_bill(prices, tip_percent), 80.48)\n\n    def test_rounding(self):\n        prices = [10.333, 20.666, 8.999]\n        tip_percent = 10\n        self.assertEqual(calculate_bill(prices, tip_percent), 43.22)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 50,
    "programming_concept": "Float",
    "context": "Animals",
    "task_description": "### Practice Task: Animal Weight in Kilograms\n\nWrite a function called `weight_in_kg(weight_pounds)`, which takes the weight of an animal in pounds (float) as an argument and returns the weight in kilograms (float). Note that 1 pound is approximately 0.453592 kilograms.\n\nExample call:\n```python\nweight_in_kg(10.0)\n```\nshould return approximately `4.53592`.",
    "code_skeleton": "def weight_in_kg(weight_pounds):\n    ## Insert code here",
    "model_solution": "def weight_in_kg(weight_pounds):\n    return weight_pounds * 0.453592\n\nprint(weight_in_kg(10.0))",
    "unit_tests": "import unittest\n\nfrom main import weight_in_kg\n\nclass TestWeightInKg(unittest.TestCase):\n    def test_ten_pounds(self):\n        self.assertAlmostEqual(weight_in_kg(10.0), 4.53592, places=5)\n\n    def test_zero_pounds(self):\n        self.assertEqual(weight_in_kg(0.0), 0.0)\n\n    def test_one_pound(self):\n        self.assertAlmostEqual(weight_in_kg(1.0), 0.453592, places=5)\n\n    def test_negative_weight(self):\n        self.assertAlmostEqual(weight_in_kg(-5.0), -2.26796, places=5)\n\n    def test_large_weight(self):\n        self.assertAlmostEqual(weight_in_kg(1000.0), 453.592, places=3)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 51,
    "programming_concept": "String",
    "context": "Modern Gaming",
    "task_description": "### Exercise: Modern Gaming - Validate Player Tag\n\nWrite a function named `is_valid_player_tag(player_tag)` that checks if a given player tag (String) meets the following criteria:\n\n1. The player tag must be between 3 and 16 characters long.\n2. The player tag can only contain alphanumeric characters (letters and numbers).\n3. The player tag cannot contain spaces.\n\nThe function should return `True` if the player tag is valid, and `False` if it is invalid.\n\nExample calls:\n- `is_valid_player_tag(\"Gamer123\")` returns `True`.\n- `is_valid_player_tag(\"G@mer\")` returns `False`.\n- `is_valid_player_tag(\"Gamer 123\")` returns `False`.\n- `is_valid_player_tag(\"G\")` returns `False`.",
    "code_skeleton": "def is_valid_player_tag(player_tag):\n    ## Insert code here",
    "model_solution": "def is_valid_player_tag(player_tag):\n    return 3 <= len(player_tag) <= 16 and player_tag.isalnum()\n\n# Example calls\nprint(is_valid_player_tag(\"Gamer123\"))  # True\nprint(is_valid_player_tag(\"G@mer\"))     # False\nprint(is_valid_player_tag(\"Gamer 123\")) # False\nprint(is_valid_player_tag(\"G\"))         # False",
    "unit_tests": "import unittest\nfrom main import is_valid_player_tag\n\nclass TestIsValidPlayerTag(unittest.TestCase):\n    def test_valid_player_tag(self):\n        self.assertTrue(is_valid_player_tag(\"Gamer123\"))\n\n    def test_invalid_player_tag_special_characters(self):\n        self.assertFalse(is_valid_player_tag(\"G@mer\"))\n\n    def test_invalid_player_tag_spaces(self):\n        self.assertFalse(is_valid_player_tag(\"Gamer 123\"))\n\n    def test_invalid_player_tag_too_short(self):\n        self.assertFalse(is_valid_player_tag(\"G\"))\n\n    def test_invalid_player_tag_too_long(self):\n        self.assertFalse(is_valid_player_tag(\"Gamer1234567890123\"))\n\n    def test_valid_player_tag_minimum_length(self):\n        self.assertTrue(is_valid_player_tag(\"abc\"))\n\n    def test_valid_player_tag_maximum_length(self):\n        self.assertTrue(is_valid_player_tag(\"Gamer1234567890\"))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 52,
    "programming_concept": "Operations with numbers",
    "context": "Basketball",
    "task_description": "### Exercise: Calculate Basketball Score\n\nWrite a function named `calculate_score(twos, threes)` that calculates the score of a basketball game based on the number of two-point and three-point shots made. The function should take two arguments:\n\n- `twos`: The number of two-point shots made.\n- `threes`: The number of three-point shots made.\n\nThe function should calculate and return the total score.\n\nExample call:\n```python\nscore = calculate_score(10, 5)\nprint(score)  # Output: 35\n```\n\nIn this example, 10 two-point shots (10 * 2 = 20 points) and 5 three-point shots (5 * 3 = 15 points) were made, resulting in a total of 35 points.",
    "code_skeleton": "def calculate_score(twos, threes):\n    ## Insert code here",
    "model_solution": "def calculate_score(twos, threes):\n    return twos * 2 + threes * 3\n\nprint(calculate_score(10, 5))  # Output: 35",
    "unit_tests": "import unittest\nfrom main import calculate_score\n\nclass TestCalculateScore(unittest.TestCase):\n    def test_no_points(self):\n        self.assertEqual(calculate_score(0, 0), 0)\n\n    def test_only_twos(self):\n        self.assertEqual(calculate_score(10, 0), 20)\n\n    def test_only_threes(self):\n        self.assertEqual(calculate_score(0, 5), 15)\n\n    def test_mixed(self):\n        self.assertEqual(calculate_score(10, 5), 35)\n\n    def test_large_numbers(self):\n        self.assertEqual(calculate_score(1000, 500), 3500)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 53,
    "programming_concept": "While loops",
    "context": "Basketball",
    "task_description": "### Exercise: Basketball Training\n\nWrite a function named `basketball_training(target_points)`, which uses a while loop to calculate the number of throws needed for a player to reach a certain number of points. Each successful throw counts as 2 points. The function should return the number of throws.\n\nExample call: `basketball_training(10)` returns `5` because 5 successful throws are needed to reach 10 points.",
    "code_skeleton": "def basketball_training(target_points):\n    ## Insert code here",
    "model_solution": "def basketball_training(target_points):\n    points, throws = 0, 0\n    while points < target_points:\n        points += 2\n        throws += 1\n    return throws\n\nbasketball_training(10)",
    "unit_tests": "import unittest\nfrom main import basketball_training\n\nclass TestBasketballTraining(unittest.TestCase):\n    def test_ten_points(self):\n        self.assertEqual(basketball_training(10), 5)\n\n    def test_zero_points(self):\n        self.assertEqual(basketball_training(0), 0)\n\n    def test_odd_points(self):\n        self.assertEqual(basketball_training(7), 4)\n\n    def test_large_points(self):\n        self.assertEqual(basketball_training(100), 50)\n\n    def test_negative_points(self):\n        self.assertEqual(basketball_training(-5), 0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 54,
    "programming_concept": "For loops",
    "context": "Modern Gaming",
    "task_description": "### Practice Task: Introduction to For Loops in the context of Modern Gaming\n\nWrite a function named `level_up(score_list)` that takes a list of scores (integers) as an argument. The function should iterate through the list and check for each score if it is greater than or equal to 1000. If so, the function should output the message \"Level Up!\", otherwise \"Keep Going!\".\n\nExample call:\n```python\nlevel_up([500, 1500, 800, 1200])\n```\n\nExpected output:\n```\nKeep Going!\nLevel Up!\nKeep Going!\nLevel Up!\n```",
    "code_skeleton": "def level_up(score_list):\n    ## Insert code here",
    "model_solution": "def level_up(score_list):\n    for score in score_list:\n        if score >= 1000:\n            print(\"Level Up!\")\n        else:\n            print(\"Keep Going!\")\n\nlevel_up([500, 1500, 800, 1200])",
    "unit_tests": "import unittest\nfrom main import level_up\nfrom io import StringIO\nimport sys\n\nclass TestLevelUp(unittest.TestCase):\n    def test_mixed_scores(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        level_up([500, 1500, 800, 1200])\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Keep Going!\\nLevel Up!\\nKeep Going!\\nLevel Up!\")\n\n    def test_all_below_threshold(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        level_up([100, 200, 300])\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Keep Going!\\nKeep Going!\\nKeep Going!\")\n\n    def test_all_above_threshold(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        level_up([1000, 2000, 3000])\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Level Up!\\nLevel Up!\\nLevel Up!\")\n\n    def test_empty_list(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        level_up([])\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 55,
    "programming_concept": "Functions as variables",
    "context": "Sports",
    "task_description": "### Exercise: Functions as Variables in the Context of Sports\n\nWrite a function `sport_selection(sport)` that returns another function as a variable. The returned function should output a message specific to the chosen sport.\n\nDefine at least three different sports and the corresponding functions that output a message for each sport.\n\nExample call:\n```python\nsoccer_function = sport_selection(\"Soccer\")\nsoccer_function()  # Outputs a message for Soccer\n\nbasketball_function = sport_selection(\"Basketball\")\nbasketball_function()  # Outputs a message for Basketball\n```\n\nExpected messages might be:\n- For \"Soccer\": \"You have chosen Soccer! An exciting game on the field.\"\n- For \"Basketball\": \"You have chosen Basketball! A dynamic game on the court.\"\n- For \"Tennis\": \"You have chosen Tennis! An intense match on the court.\"\n\nImplement the function `sport_selection(sport)` and the corresponding functions for the sports.",
    "code_skeleton": "def sport_selection(sport):\n    ## Insert code here\n\ndef soccer():\n    ## Insert code here\n\ndef basketball():\n    ## Insert code here\n\ndef tennis():\n    ## Insert code here\n",
    "model_solution": "def sport_selection(sport):\n    if sport == \"Soccer\":\n        return soccer\n    elif sport == \"Basketball\":\n        return basketball\n    elif sport == \"Tennis\":\n        return tennis\n\ndef soccer():\n    print(\"You have chosen Soccer! An exciting game on the field.\")\n\ndef basketball():\n    print(\"You have chosen Basketball! A dynamic game on the court.\")\n\ndef tennis():\n    print(\"You have chosen Tennis! An intense match on the court.\")\n\n# Example calls\nsoccer_function = sport_selection(\"Soccer\")\nsoccer_function()\n\nbasketball_function = sport_selection(\"Basketball\")\nbasketball_function()\n\ntennis_function = sport_selection(\"Tennis\")\ntennis_function()\n",
    "unit_tests": "import unittest\nfrom io import StringIO\nimport sys\nfrom main import sport_selection\n\nclass TestSportSelection(unittest.TestCase):\n    def test_soccer(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        func = sport_selection(\"Soccer\")\n        func()\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"You have chosen Soccer! An exciting game on the field.\")\n\n    def test_basketball(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        func = sport_selection(\"Basketball\")\n        func()\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"You have chosen Basketball! A dynamic game on the court.\")\n\n    def test_tennis(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        func = sport_selection(\"Tennis\")\n        func()\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"You have chosen Tennis! An intense match on the court.\")\n\n    def test_unknown_sport(self):\n        self.assertIsNone(sport_selection(\"Handball\"))\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 56,
    "programming_concept": "Higher-order functions",
    "context": "Mental Health",
    "task_description": "### Exercise Task: Higher-order functions in the context of mental health\n\nWrite a function `filter_positive_thoughts(thoughts, filter_function)` that takes a list of thoughts (`thoughts`) and a filter function (`filter_function`) as arguments. The function should apply the `filter_function` to each thought and return only the positive thoughts.\n\nA thought is considered positive if the `filter_function` returns `True` for that thought.\n\nExample call:\n```python\ndef is_positive(thought):\n    positive_keywords = [\"happy\", \"content\", \"successful\", \"loved\"]\n    return any(keyword in thought for keyword in positive_keywords)\n\nthoughts = [\"I feel happy\", \"Today was a tough day\", \"I am content with my work\", \"I feel loved\"]\npositive_thoughts = filter_positive_thoughts(thoughts, is_positive)\nprint(positive_thoughts)\n```\n\nExpected output:\n```\n[\"I feel happy\", \"I am content with my work\", \"I feel loved\"]\n```\n\nImplement the function `filter_positive_thoughts(thoughts, filter_function)`.",
    "code_skeleton": "def filter_positive_thoughts(thoughts, filter_function):\n    ## Insert code here\n",
    "model_solution": "def filter_positive_thoughts(thoughts, filter_function):\n    return [thought for thought in thoughts if filter_function(thought)]\n\ndef is_positive(thought):\n    positive_keywords = [\"happy\", \"content\", \"successful\", \"loved\"]\n    return any(keyword in thought for keyword in positive_keywords)\n\nthoughts = [\"I feel happy\", \"Today was a tough day\", \"I am content with my work\", \"I feel loved\"]\npositive_thoughts = filter_positive_thoughts(thoughts, is_positive)\nprint(positive_thoughts)\n",
    "unit_tests": "import unittest\n\nfrom main import filter_positive_thoughts\n\ndef is_positive(thought):\n    positive_keywords = [\"happy\", \"content\", \"successful\", \"loved\"]\n    return any(keyword in thought for keyword in positive_keywords)\n\nclass TestFilterPositiveThoughts(unittest.TestCase):\n    def test_all_positive(self):\n        thoughts = [\"I feel happy\", \"I am content\", \"I feel loved\"]\n        self.assertEqual(filter_positive_thoughts(thoughts, is_positive), thoughts)\n\n    def test_no_positive(self):\n        thoughts = [\"Today was a tough day\", \"I am tired\", \"It was a bad day\"]\n        self.assertEqual(filter_positive_thoughts(thoughts, is_positive), [])\n\n    def test_mixed_thoughts(self):\n        thoughts = [\"I feel happy\", \"Today was a tough day\", \"I am content with my work\", \"I feel loved\"]\n        expected = [\"I feel happy\", \"I am content with my work\", \"I feel loved\"]\n        self.assertEqual(filter_positive_thoughts(thoughts, is_positive), expected)\n\n    def test_empty_list(self):\n        self.assertEqual(filter_positive_thoughts([], is_positive), [])\n\n    def test_no_keywords(self):\n        thoughts = [\"I feel okay\", \"It was a day\", \"Nothing special\"]\n        self.assertEqual(filter_positive_thoughts(thoughts, is_positive), [])\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 57,
    "programming_concept": "Tuple",
    "context": "Mental Health",
    "task_description": "### Exercise: Mental Health and Well-Being\n\nWrite a function named `mental_health(data)`, which takes a tuple containing information about a person's mental health and returns an appropriate message. The tuple contains the following information in this order:\n\n1. Name of the person (String)\n2. Number of hours of sleep per night (Integer)\n3. Number of hours of physical activity per week (Integer)\n4. Number of hours spent on relaxation activities per week (Integer)\n\nThe function should return a message that includes the person's name and an assessment of their mental health based on the given data. Example call:\n\n```python\nmental_health((\"Max\", 7, 5, 3))\n```\n\nThe function might return a message like:\n\n```python\n\"Max, your mental health seems to be in good condition!\"\n```\n\nor\n\n```python\n\"Max, it might be helpful to plan more time for relaxation.\"\n```",
    "code_skeleton": "def mental_health(data):\n    ## Insert code here",
    "model_solution": "def mental_health(data):\n    name, sleep, activity, relaxation = data\n    if sleep >= 7 and activity >= 5 and relaxation >= 3:\n        return f\"{name}, your mental health seems to be in good condition!\"\n    else:\n        return f\"{name}, it might be helpful to plan more time for relaxation.\"\n\nprint(mental_health((\"Max\", 7, 5, 3)))\nprint(mental_health((\"Anna\", 6, 4, 2)))",
    "unit_tests": "import unittest\n\nclass TestMentalHealth(unittest.TestCase):\n    def test_good_condition(self):\n        self.assertEqual(mental_health((\"Max\", 7, 5, 3)), \"Max, your mental health seems to be in good condition!\")\n\n    def test_more_relaxation_needed(self):\n        self.assertEqual(mental_health((\"Anna\", 6, 4, 2)), \"Anna, it might be helpful to plan more time for relaxation.\")\n\n    def test_more_sleep_needed(self):\n        self.assertEqual(mental_health((\"Tom\", 6, 5, 3)), \"Tom, it might be helpful to plan more time for relaxation.\")\n\n    def test_more_activity_needed(self):\n        self.assertEqual(mental_health((\"Lisa\", 7, 4, 3)), \"Lisa, it might be helpful to plan more time for relaxation.\")\n\n    def test_more_relaxation_and_activity_needed(self):\n        self.assertEqual(mental_health((\"John\", 7, 4, 2)), \"John, it might be helpful to plan more time for relaxation.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 58,
    "programming_concept": "Integer",
    "context": "Social Media",
    "task_description": "### Exercise: Social Media - Follower Counter\n\nWrite a function named `follower_counter(follower_list)`, which receives a list of integers as an argument. Each integer in the list represents the number of followers of a user in a social network. The function should calculate and return the total number of followers.\n\nExample call:\n```python\nfollower_counter([150, 200, 350, 400])\n```\nshould return `1100`.",
    "code_skeleton": "def follower_counter(follower_list):\n    ## Insert code here",
    "model_solution": "def follower_counter(follower_list):\n    return sum(follower_list)\n\nprint(follower_counter([150, 200, 350, 400]))",
    "unit_tests": "import unittest\n\nfrom main import follower_counter\n\nclass TestFollowerCounter(unittest.TestCase):\n    def test_simple_case(self):\n        self.assertEqual(follower_counter([150, 200, 350, 400]), 1100)\n\n    def test_empty_list(self):\n        self.assertEqual(follower_counter([]), 0)\n\n    def test_single_element(self):\n        self.assertEqual(follower_counter([500]), 500)\n\n    def test_negative_value(self):\n        self.assertEqual(follower_counter([100, -50, 200]), 250)\n\n    def test_mixed_values(self):\n        self.assertEqual(follower_counter([100, 200, 300, 400, 500]), 1500)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 59,
    "programming_concept": "Recursion",
    "context": "Cooking",
    "task_description": "### Practice Task: Recursive Preparation of Pancakes\n\nWrite a recursive function named `prepare_pancakes(count)`, which simulates the preparation of pancakes. The function should print a message for each pancake, indicating that a pancake is being prepared, and then call the function for the next pancake until there are no pancakes left.\n\nExample call: `prepare_pancakes(3)` should produce the following outputs:\n```\nPancake 1 is being prepared.\nPancake 2 is being prepared.\nPancake 3 is being prepared.\n```\n\nImplement the function so that it receives the number of pancakes as an argument and works recursively.",
    "code_skeleton": "def prepare_pancakes(count):\n    ## Insert code here",
    "model_solution": "def prepare_pancakes(count, current=1):\n    if current > count:\n        return\n    print(f'Pancake {current} is being prepared.')\n    prepare_pancakes(count, current + 1)\n\nprepare_pancakes(3)",
    "unit_tests": "import unittest\nfrom io import StringIO\nimport sys\nfrom main import prepare_pancakes\n\nclass TestPreparePancakes(unittest.TestCase):\n    def test_three_pancakes(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        prepare_pancakes(3)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Pancake 1 is being prepared.\\nPancake 2 is being prepared.\\nPancake 3 is being prepared.\")\n\n    def test_no_pancakes(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        prepare_pancakes(0)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"\")\n\n    def test_one_pancake(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        prepare_pancakes(1)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Pancake 1 is being prepared.\")\n\n    def test_five_pancakes(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        prepare_pancakes(5)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Pancake 1 is being prepared.\\nPancake 2 is being prepared.\\nPancake 3 is being prepared.\\nPancake 4 is being prepared.\\nPancake 5 is being prepared.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 60,
    "programming_concept": "Integer",
    "context": "Cooking",
    "task_description": "### Practice Task: Calculate Ingredients for a Recipe\n\nWrite a function named `calculate_ingredients(number_of_people)` that calculates the required amount of ingredients for a recipe. The recipe is designed for 4 people and requires the following ingredients:\n\n- 200 grams of flour\n- 100 grams of sugar\n- 2 eggs\n\nThe function should adjust the amounts of the ingredients according to the number of people and return a message with the calculated amounts. Example call: `calculate_ingredients(2)` returns \"For 2 people, you need: 100 grams of flour, 50 grams of sugar, 1 egg.\"\n",
    "code_skeleton": "def calculate_ingredients(number_of_people):\n    ## Insert code here\n",
    "model_solution": "def calculate_ingredients(number_of_people):\n    flour = 200 * number_of_people / 4\n    sugar = 100 * number_of_people / 4\n    eggs = 2 * number_of_people / 4\n    return f\"For {number_of_people} people, you need: {flour} grams of flour, {sugar} grams of sugar, {eggs} eggs.\"\n\ncalculate_ingredients(2)\n",
    "unit_tests": "import unittest\nfrom main import calculate_ingredients\n\nclass TestCalculateIngredients(unittest.TestCase):\n    def test_two_people(self):\n        self.assertEqual(calculate_ingredients(2), \"For 2 people, you need: 100.0 grams of flour, 50.0 grams of sugar, 1.0 egg.\")\n\n    def test_four_people(self):\n        self.assertEqual(calculate_ingredients(4), \"For 4 people, you need: 200.0 grams of flour, 100.0 grams of sugar, 2.0 eggs.\")\n\n    def test_zero_people(self):\n        self.assertEqual(calculate_ingredients(0), \"For 0 people, you need: 0.0 grams of flour, 0.0 grams of sugar, 0.0 eggs.\")\n\n    def test_eight_people(self):\n        self.assertEqual(calculate_ingredients(8), \"For 8 people, you need: 400.0 grams of flour, 200.0 grams of sugar, 4.0 eggs.\")\n\n    def test_negative_people(self):\n        self.assertEqual(calculate_ingredients(-2), \"For -2 people, you need: -100.0 grams of flour, -50.0 grams of sugar, -1.0 egg.\")\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 61,
    "programming_concept": "Tuples",
    "context": "Gardening",
    "task_description": "### Exercise Task: Gardening with Tuples\n\nWrite a function named `plant_info(plant)` that returns information about different plants in a garden. The information about the plants should be stored in a tuple. Each tuple should contain the name of the plant, the required amount of water (in liters per week), and the preferred amount of sunlight (in hours per day).\n\nThe function should return a tuple with the information of the given plant. If the plant is not present in the garden, the function should return `None`.\n\nExample calls:\n- `plant_info(\"Tomato\")` could return `(\"Tomato\", 5, 8)`.\n- `plant_info(\"Rose\")` could return `(\"Rose\", 3, 6)`.\n- `plant_info(\"Cactus\")` could return `None` if \"Cactus\" is not present in the garden.",
    "code_skeleton": "def plant_info(plant):\n    ## Insert code here",
    "model_solution": "def plant_info(plant):\n    garden = {\n        \"Tomato\": (\"Tomato\", 5, 8),\n        \"Rose\": (\"Rose\", 3, 6),\n        \"Basil\": (\"Basil\", 2, 6)\n    }\n    return garden.get(plant)\n\n# Example calls\nprint(plant_info(\"Tomato\"))\nprint(plant_info(\"Rose\"))\nprint(plant_info(\"Cactus\"))",
    "unit_tests": "import unittest\nfrom main import plant_info\n\nclass TestPlantInfo(unittest.TestCase):\n    def test_tomato(self):\n        self.assertEqual(plant_info(\"Tomato\"), (\"Tomato\", 5, 8))\n\n    def test_rose(self):\n        self.assertEqual(plant_info(\"Rose\"), (\"Rose\", 3, 6))\n\n    def test_basil(self):\n        self.assertEqual(plant_info(\"Basil\"), (\"Basil\", 2, 6))\n\n    def test_cactus(self):\n        self.assertIsNone(plant_info(\"Cactus\"))\n\n    def test_empty_string(self):\n        self.assertIsNone(plant_info(\"\"))\n\n    def test_none(self):\n        self.assertIsNone(plant_info(None))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 62,
    "programming_concept": "Lists",
    "context": "Fishing",
    "task_description": "### Exercise: Fishing and Lists in Python\n\nWrite a function named `catch_fish(fish_list)` that receives a list of fish as an argument. The function should count the number of caught fish and return a message indicating the number of fish.\n\nExample call:\n```python\ncatch_fish([\"Pike\", \"Perch\", \"Trout\", \"Pike\"])\n```\n\nExpected return:\n```\n\"You caught 4 fish.\"\n```",
    "code_skeleton": "def catch_fish(fish_list):\n    ## Insert code here",
    "model_solution": "def catch_fish(fish_list):\n    print(f\"You caught {len(fish_list)} fish.\")\n\ncatch_fish([\"Pike\", \"Perch\", \"Trout\", \"Pike\"])",
    "unit_tests": "import unittest\nfrom main import catch_fish\n\nclass TestCatchFish(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(catch_fish([]), \"You caught 0 fish.\")\n\n    def test_one_fish(self):\n        self.assertEqual(catch_fish([\"Pike\"]), \"You caught 1 fish.\")\n\n    def test_multiple_fish(self):\n        self.assertEqual(catch_fish([\"Pike\", \"Perch\", \"Trout\", \"Pike\"]), \"You caught 4 fish.\")\n\n    def test_many_fish(self):\n        self.assertEqual(catch_fish([\"Pike\"] * 100), \"You caught 100 fish.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 63,
    "programming_concept": "String",
    "context": "Social Media",
    "task_description": "### Exercise Task: Social Media - Hashtag Extraction\n\nWrite a function named `extract_hashtags(text)` that extracts all hashtags from a given text and returns them as a list. A hashtag starts with the character `#` and ends with a space or the end of the text. \n\nSample call:\n```python\nextract_hashtags(\"Loving the new features of our app! #excited #newrelease #tech\")\n```\n\nshould return the list `[\"#excited\", \"#newrelease\", \"#tech\"]`.",
    "code_skeleton": "def extract_hashtags(text):\n    ## Insert code here",
    "model_solution": "def extract_hashtags(text):\n    return [word for word in text.split() if word.startswith('#')]\n\nprint(extract_hashtags(\"Loving the new features of our app! #excited #newrelease #tech\"))",
    "unit_tests": "import unittest\n\nfrom main import extract_hashtags\n\nclass TestExtractHashtags(unittest.TestCase):\n    def test_simple_text(self):\n        self.assertEqual(extract_hashtags(\"Loving the new features of our app! #excited #newrelease #tech\"), [\"#excited\", \"#newrelease\", \"#tech\"])\n\n    def test_text_without_hashtags(self):\n        self.assertEqual(extract_hashtags(\"This is a simple text without hashtags.\"), [])\n\n    def test_text_with_one_hashtag(self):\n        self.assertEqual(extract_hashtags(\"Check out our new product! #innovation\"), [\"#innovation\"])\n\n    def test_text_with_hashtags_at_start(self):\n        self.assertEqual(extract_hashtags(\"#start your day with a smile! #happy #positive\"), [\"#start\", \"#happy\", \"#positive\"])\n\n    def test_text_with_hashtags_at_end(self):\n        self.assertEqual(extract_hashtags(\"End your day with a good book. #reading #relaxing\"), [\"#reading\", \"#relaxing\"])\n\n    def test_text_with_mixed_characters(self):\n        self.assertEqual(extract_hashtags(\"Coding is fun! #100DaysOfCode #Python3 #AI&ML\"), [\"#100DaysOfCode\", \"#Python3\", \"#AI&ML\"])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 64,
    "programming_concept": "Tuples",
    "context": "Basketball",
    "task_description": "### Exercise: Basketball Statistics with Tuples\n\nWrite a function called `player_statistics(player)` that takes a tuple with the statistics of a basketball player and returns a formatted string. The tuple contains the following information in this order:\n\n1. Player's name (String)\n2. Number of games played (Integer)\n3. Average points per game (Float)\n4. Average rebounds per game (Float)\n5. Average assists per game (Float)\n\nThe function should return a string in the following format:\n\n```\n\"Player: [Name], Games: [Number of Games], Points/Game: [Points], Rebounds/Game: [Rebounds], Assists/Game: [Assists]\"\n```\n\nExample call:\n```python\nplayer = (\"LeBron James\", 82, 27.5, 7.4, 7.2)\nprint(player_statistics(player))\n```\n\nExample output:\n```\n\"Player: LeBron James, Games: 82, Points/Game: 27.5, Rebounds/Game: 7.4, Assists/Game: 7.2\"\n```",
    "code_skeleton": "def player_statistics(player):\n    ## Insert code here",
    "model_solution": "def player_statistics(player):\n    return f\"Player: {player[0]}, Games: {player[1]}, Points/Game: {player[2]}, Rebounds/Game: {player[3]}, Assists/Game: {player[4]}\"\n\nplayer = (\"LeBron James\", 82, 27.5, 7.4, 7.2)\nprint(player_statistics(player))",
    "unit_tests": "import unittest\n\nclass TestPlayerStatistics(unittest.TestCase):\n    def test_standard_case(self):\n        player = (\"LeBron James\", 82, 27.5, 7.4, 7.2)\n        expected = \"Player: LeBron James, Games: 82, Points/Game: 27.5, Rebounds/Game: 7.4, Assists/Game: 7.2\"\n        self.assertEqual(player_statistics(player), expected)\n\n    def test_other_player(self):\n        player = (\"Michael Jordan\", 82, 30.1, 6.2, 5.3)\n        expected = \"Player: Michael Jordan, Games: 82, Points/Game: 30.1, Rebounds/Game: 6.2, Assists/Game: 5.3\"\n        self.assertEqual(player_statistics(player), expected)\n\n    def test_few_games(self):\n        player = (\"Kobe Bryant\", 10, 25.0, 5.2, 4.5)\n        expected = \"Player: Kobe Bryant, Games: 10, Points/Game: 25.0, Rebounds/Game: 5.2, Assists/Game: 4.5\"\n        self.assertEqual(player_statistics(player), expected)\n\n    def test_rounding_values(self):\n        player = (\"Stephen Curry\", 82, 27.456, 5.678, 6.789)\n        expected = \"Player: Stephen Curry, Games: 82, Points/Game: 27.456, Rebounds/Game: 5.678, Assists/Game: 6.789\"\n        self.assertEqual(player_statistics(player), expected)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 65,
    "programming_concept": "Recursion",
    "context": "Rugby",
    "task_description": "### Exercise: Recursive Calculation of Rugby Score\n\nIn a rugby game, a team scores points through different actions:\n\n- A Try scores 5 points.\n- A Conversion scores 2 points.\n- A Penalty or a Dropgoal scores 3 points each.\n\nWrite a recursive function `calculate_points(actions)` that receives a list of actions as input and calculates the total score of the team. Each action in the list is a string that can be either \"Try\", \"Conversion\", \"Penalty\", or \"Dropgoal\".\n\nSample call:\n```python\nactions = [\"Try\", \"Conversion\", \"Penalty\", \"Try\", \"Dropgoal\"]\nprint(calculate_points(actions))  # Output: 18\n```\n\nImplement the function `calculate_points(actions)` that calculates and returns the total score of the team.",
    "code_skeleton": "def calculate_points(actions):\n    ## Insert code here",
    "model_solution": "def calculate_points(actions):\n    if not actions:\n        return 0\n    points = {\"Try\": 5, \"Conversion\": 2, \"Penalty\": 3, \"Dropgoal\": 3}\n    return points[actions[0]] + calculate_points(actions[1:])\n\nactions = [\"Try\", \"Conversion\", \"Penalty\", \"Try\", \"Dropgoal\"]\nprint(calculate_points(actions))",
    "unit_tests": "import unittest\nfrom main import calculate_points\n\nclass TestCalculatePoints(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(calculate_points([]), 0)\n\n    def test_only_try(self):\n        self.assertEqual(calculate_points([\"Try\"]), 5)\n\n    def test_only_conversion(self):\n        self.assertEqual(calculate_points([\"Conversion\"]), 2)\n\n    def test_only_penalty(self):\n        self.assertEqual(calculate_points([\"Penalty\"]), 3)\n\n    def test_only_dropgoal(self):\n        self.assertEqual(calculate_points([\"Dropgoal\"]), 3)\n\n    def test_mixed_actions(self):\n        self.assertEqual(calculate_points([\"Try\", \"Conversion\", \"Penalty\", \"Try\", \"Dropgoal\"]), 18)\n\n    def test_multiple_tries(self):\n        self.assertEqual(calculate_points([\"Try\", \"Try\", \"Try\"]), 15)\n\n    def test_multiple_conversions(self):\n        self.assertEqual(calculate_points([\"Conversion\", \"Conversion\", \"Conversion\"]), 6)\n\n    def test_multiple_penalties(self):\n        self.assertEqual(calculate_points([\"Penalty\", \"Penalty\", \"Penalty\"]), 9)\n\n    def test_multiple_dropgoals(self):\n        self.assertEqual(calculate_points([\"Dropgoal\", \"Dropgoal\", \"Dropgoal\"]), 9)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 66,
    "programming_concept": "Functions as variables",
    "context": "Mental Health",
    "task_description": "### Exercise: Functions as Variables in the Context of Mental Health\n\nWrite a function `mental_health(days)` that takes a list of days of the week as input. Each day is a string representing the name of the day (e.g. \"Monday\", \"Tuesday\", etc.). The function should select and return a random activity to promote mental health for each day.\n\nDefine three separate functions:\n1. `meditation()`: Returns the string \"Meditation\".\n2. `walk()`: Returns the string \"Walk in the park\".\n3. `read()`: Returns the string \"Read a good book\".\n\nThe function `mental_health(days)` should return a list of activities, where a random activity from the three is selected for each day.\n\nExample call:\n```python\nprint(mental_health([\"Monday\", \"Tuesday\", \"Wednesday\"]))\n```\n\nPossible output:\n```python\n[\"Meditation\", \"Walk in the park\", \"Read a good book\"]",
    "code_skeleton": "def meditation():\n    ## Insert code here\n\ndef walk():\n    ## Insert code here\n\ndef read():\n    ## Insert code here\n\ndef mental_health(days):\n    ## Insert code here",
    "model_solution": "import random\n\ndef meditation():\n    return \"Meditation\"\n\ndef walk():\n    return \"Walk in the park\"\n\ndef read():\n    return \"Read a good book\"\n\ndef mental_health(days):\n    activities = [meditation, walk, read]\n    return [random.choice(activities)() for day in days]\n\nprint(mental_health([\"Monday\", \"Tuesday\", \"Wednesday\"]))",
    "unit_tests": "import unittest\nfrom main import meditation, walk, read, mental_health\n\nclass TestMentalHealth(unittest.TestCase):\n    def test_meditation(self):\n        self.assertEqual(meditation(), \"Meditation\")\n\n    def test_walk(self):\n        self.assertEqual(walk(), \"Walk in the park\")\n\n    def test_read(self):\n        self.assertEqual(read(), \"Read a good book\")\n\n    def test_mental_health(self):\n        days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n        result = mental_health(days)\n        self.assertEqual(len(result), len(days))\n        for activity in result:\n            self.assertIn(activity, [\"Meditation\", \"Walk in the park\", \"Read a good book\"])\n\n    def test_empty_list(self):\n        self.assertEqual(mental_health([]), [])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 67,
    "programming_concept": "Boolean and None",
    "context": "Sports",
    "task_description": "### Exercise: Sporting Activity\n\nWrite a function named `is_sporty(activity)`, which checks if a given activity is considered sporty. The function should return a Boolean value: `True` if the activity is sporty, and `False` if it is not. If the activity is not included in the list of known activities, the function should return `None`.\n\nKnown sporty activities are:\n- \"Running\"\n- \"Swimming\"\n- \"Cycling\"\n- \"Football\"\n- \"Basketball\"\n\nSample calls:\n- `is_sporty(\"Running\")` returns `True`.\n- `is_sporty(\"Chess\")` returns `False`.\n- `is_sporty(\"Dancing\")` returns `None`.",
    "code_skeleton": "def is_sporty(activity):\n    ## Insert code here",
    "model_solution": "def is_sporty(activity):\n    sporty_activities = [\"Running\", \"Swimming\", \"Cycling\", \"Football\", \"Basketball\"]\n    if activity in sporty_activities:\n        return True\n    elif activity in [\"Chess\", \"Dancing\"]:\n        return False\n    return None\n\n# Sample calls\nprint(is_sporty(\"Running\"))  # True\nprint(is_sporty(\"Chess\"))  # False\nprint(is_sporty(\"Dancing\"))  # None",
    "unit_tests": "import unittest\nfrom main import is_sporty\n\nclass TestIsSporty(unittest.TestCase):\n    def test_sporty_activity(self):\n        self.assertTrue(is_sporty(\"Running\"))\n        self.assertTrue(is_sporty(\"Swimming\"))\n        self.assertTrue(is_sporty(\"Cycling\"))\n        self.assertTrue(is_sporty(\"Football\"))\n        self.assertTrue(is_sporty(\"Basketball\"))\n\n    def test_non_sporty_activity(self):\n        self.assertFalse(is_sporty(\"Chess\"))\n\n    def test_unknown_activity(self):\n        self.assertIsNone(is_sporty(\"Dancing\"))\n        self.assertIsNone(is_sporty(\"Reading\"))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 68,
    "programming_concept": "Recursion",
    "context": "Music",
    "task_description": "### Exercise Task: Recursive Music Notes\n\nWrite a function named `play_note_sequence(notes)` that recursively iterates over a list of musical notes (as strings) and prints each note to the console. The function should print the notes in the order they appear in the list.\n\nExample call:\n```python\nplay_note_sequence([\"C\", \"D\", \"E\", \"F\", \"G\"])\n```\n\nOutput:\n```\nC\nD\nE\nF\nG\n```\n\nImplement the function so that it works recursively.",
    "code_skeleton": "def play_note_sequence(notes):\n    ## Insert code here",
    "model_solution": "def play_note_sequence(notes):\n    if not notes:\n        return\n    print(notes[0])\n    play_note_sequence(notes[1:])\n\nplay_note_sequence([\"C\", \"D\", \"E\", \"F\", \"G\"])",
    "unit_tests": "import unittest\nfrom unittest.mock import patch\nfrom main import play_note_sequence\n\nclass TestPlayNoteSequence(unittest.TestCase):\n    @patch('builtins.print')\n    def test_simple_note_sequence(self, mock_print):\n        play_note_sequence([\"C\", \"D\", \"E\", \"F\", \"G\"])\n        mock_print.assert_has_calls([unittest.mock.call(\"C\"), unittest.mock.call(\"D\"), unittest.mock.call(\"E\"), unittest.mock.call(\"F\"), unittest.mock.call(\"G\")])\n\n    @patch('builtins.print')\n    def test_empty_note_sequence(self, mock_print):\n        play_note_sequence([])\n        mock_print.assert_not_called()\n\n    @patch('builtins.print')\n    def test_single_note(self, mock_print):\n        play_note_sequence([\"A\"])\n        mock_print.assert_called_once_with(\"A\")\n\n    @patch('builtins.print')\n    def test_nested_note_sequence(self, mock_print):\n        play_note_sequence([\"A\", \"B\", \"C\", \"D\", \"E\"])\n        mock_print.assert_has_calls([unittest.mock.call(\"A\"), unittest.mock.call(\"B\"), unittest.mock.call(\"C\"), unittest.mock.call(\"D\"), unittest.mock.call(\"E\")])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 69,
    "programming_concept": "Float",
    "context": "Music",
    "task_description": "### Practice Task: Music Streaming Duration\n\nWrite a function named `calculate_play_duration(songs)` that receives a list of songs. Each song is represented by its play duration in minutes as a float value. The function should calculate and return the total play duration of the songs in hours.\n\nExample call:\n```python\nsongs = [3.5, 4.2, 5.0, 2.8]\nprint(calculate_play_duration(songs))  # Output: 0.25\n```\n\nNote: The output should be returned in hours as a float value.",
    "code_skeleton": "def calculate_play_duration(songs):\n    ## Insert code here\n",
    "model_solution": "def calculate_play_duration(songs):\n    return sum(songs) / 60\n\nsongs = [3.5, 4.2, 5.0, 2.8]\nprint(calculate_play_duration(songs))",
    "unit_tests": "import unittest\nfrom main import calculate_play_duration\n\nclass TestCalculatePlayDuration(unittest.TestCase):\n    def test_simple_list(self):\n        self.assertAlmostEqual(calculate_play_duration([3.5, 4.2, 5.0, 2.8]), 0.25)\n\n    def test_empty_list(self):\n        self.assertAlmostEqual(calculate_play_duration([]), 0.0)\n\n    def test_single_song(self):\n        self.assertAlmostEqual(calculate_play_duration([60.0]), 1.0)\n\n    def test_mixed_values(self):\n        self.assertAlmostEqual(calculate_play_duration([30.0, 45.0, 15.0]), 1.5)\n\n    def test_large_values(self):\n        self.assertAlmostEqual(calculate_play_duration([120.0, 180.0, 240.0]), 9.0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 70,
    "programming_concept": "Logical operators (==, !=, <, >, <=, >=, or, and, not)",
    "context": "Fishing",
    "task_description": "### Exercise: Logical Operators in Fishing\n\nWrite a function named `catch_fish(weight, length)` that checks if a caught fish meets the minimum requirements to be kept. A fish can only be kept if it weighs at least 2 kg and is at least 30 cm long. The function should return `True` if the fish can be kept, and `False` otherwise.\n\nExample Calls:\n- `catch_fish(2.5, 35)` returns `True`.\n- `catch_fish(1.8, 32)` returns `False`.\n- `catch_fish(2.0, 29)` returns `False`.",
    "code_skeleton": "def catch_fish(weight, length):\n    ## Insert code here\n",
    "model_solution": "def catch_fish(weight, length):\n    return weight >= 2 and length >= 30\n\n# Example Calls\nprint(catch_fish(2.5, 35))  # True\nprint(catch_fish(1.8, 32))  # False\nprint(catch_fish(2.0, 29))  # False\n",
    "unit_tests": "import unittest\nfrom main import catch_fish\n\nclass TestCatchFish(unittest.TestCase):\n    def test_keep_fish(self):\n        self.assertTrue(catch_fish(2.5, 35))\n\n    def test_fish_too_light(self):\n        self.assertFalse(catch_fish(1.8, 32))\n\n    def test_fish_too_short(self):\n        self.assertFalse(catch_fish(2.0, 29))\n\n    def test_fish_exact_boundary(self):\n        self.assertTrue(catch_fish(2.0, 30))\n\n    def test_fish_below_boundary(self):\n        self.assertFalse(catch_fish(1.9, 29))\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 71,
    "programming_concept": "Integer",
    "context": "Streaming Services",
    "task_description": "### Exercise: Streaming Services and Integer\n\nWrite a function named `calculate_monthly_costs(subscriptions)`, which receives a list of integers as an argument. Each integer in the list represents the monthly cost of a subscription from different streaming services in Euros. The function should calculate and return the total cost of all subscriptions.\n\nExample call:\n```python\nsubscriptions = [10, 15, 8, 12]\nprint(calculate_monthly_costs(subscriptions))  # Output: 45\n```\n",
    "code_skeleton": "def calculate_monthly_costs(subscriptions):\n    ## Insert code here\n",
    "model_solution": "def calculate_monthly_costs(subscriptions):\n    return sum(subscriptions)\n\nsubscriptions = [10, 15, 8, 12]\nprint(calculate_monthly_costs(subscriptions))\n",
    "unit_tests": "import unittest\nfrom main import calculate_monthly_costs\n\nclass TestCalculateMonthlyCosts(unittest.TestCase):\n    def test_multiple_subscriptions(self):\n        self.assertEqual(calculate_monthly_costs([10, 15, 8, 12]), 45)\n\n    def test_no_subscriptions(self):\n        self.assertEqual(calculate_monthly_costs([]), 0)\n\n    def test_single_subscription(self):\n        self.assertEqual(calculate_monthly_costs([20]), 20)\n\n    def test_mixed_subscriptions(self):\n        self.assertEqual(calculate_monthly_costs([5, 10, 15, 20, 25]), 75)\n\n    def test_negative_value(self):\n        self.assertEqual(calculate_monthly_costs([10, -5, 15]), 20)\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 72,
    "programming_concept": "Integer",
    "context": "Modern Gaming",
    "task_description": "### Exercise: Modern Gaming - Player Level\n\nIn modern video games, the level of a player is often an important indicator of their progress and skills. Write a function called `player_level(xp)` that calculates and returns the level of a player based on their experience points (XP). \n\nThe levels should be calculated as follows:\n- Level 1: 0 - 999 XP\n- Level 2: 1000 - 1999 XP\n- Level 3: 2000 - 2999 XP\n- Level 4: 3000 - 3999 XP\n- Level 5: 4000 - 4999 XP\n- Level 6: 5000 - 5999 XP\n- Level 7: 6000 - 6999 XP\n- Level 8: 7000 - 7999 XP\n- Level 9: 8000 - 8999 XP\n- Level 10: 9000+ XP\n\nExample call: `player_level(4500)` returns `5`.",
    "code_skeleton": "def player_level(xp):\n    ## Insert code here",
    "model_solution": "def player_level(xp):\n    return min(xp // 1000 + 1, 10)\n\nprint(player_level(4500))",
    "unit_tests": "import unittest\n\nfrom main import player_level\n\nclass TestPlayerLevel(unittest.TestCase):\n    def test_level_1(self):\n        self.assertEqual(player_level(0), 1)\n        self.assertEqual(player_level(999), 1)\n\n    def test_level_2(self):\n        self.assertEqual(player_level(1000), 2)\n        self.assertEqual(player_level(1999), 2)\n\n    def test_level_3(self):\n        self.assertEqual(player_level(2000), 3)\n        self.assertEqual(player_level(2999), 3)\n\n    def test_level_4(self):\n        self.assertEqual(player_level(3000), 4)\n        self.assertEqual(player_level(3999), 4)\n\n    def test_level_5(self):\n        self.assertEqual(player_level(4000), 5)\n        self.assertEqual(player_level(4999), 5)\n\n    def test_level_6(self):\n        self.assertEqual(player_level(5000), 6)\n        self.assertEqual(player_level(5999), 6)\n\n    def test_level_7(self):\n        self.assertEqual(player_level(6000), 7)\n        self.assertEqual(player_level(6999), 7)\n\n    def test_level_8(self):\n        self.assertEqual(player_level(7000), 8)\n        self.assertEqual(player_level(7999), 8)\n\n    def test_level_9(self):\n        self.assertEqual(player_level(8000), 9)\n        self.assertEqual(player_level(8999), 9)\n\n    def test_level_10(self):\n        self.assertEqual(player_level(9000), 10)\n        self.assertEqual(player_level(10000), 10)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 73,
    "programming_concept": "Recursion",
    "context": "Virtual Reality",
    "task_description": "Exercise: Recursive Calculation of VR World Depth\n\nIn virtual reality (VR), there are various levels nested within each other. Each level can contain further sub-levels, which in turn can contain more sub-levels, and so on. Your task is to write a function that calculates the maximum depth of these nested levels.\n\nWrite a function `calculate_depth(vr_world)` that computes the depth of a VR world. The VR world is represented as a nested list, where each list can contain further lists representing sub-levels.\n\nExample:\n```python\nvr_world = [[], [[], []], [[[]]], [[], [[], [[], []]]]]\n```\n\nIn this example, the VR world has a maximum depth of 4.\n\nImplement the function `calculate_depth(vr_world)` that returns the maximum depth of the VR world as an integer.\n\nExample calls:\n```python\nprint(calculate_depth([[], [[], []], [[[]]], [[], [[], [[], []]]]]))  # Output: 4\nprint(calculate_depth([[], [[], []], [[[]]]]))  # Output: 3\nprint(calculate_depth([[]]))  # Output: 2\nprint(calculate_depth([]))  # Output: 1\n```",
    "code_skeleton": "def calculate_depth(vr_world):\n    ## Insert code here\n    pass",
    "model_solution": "def calculate_depth(vr_world):\n    if not isinstance(vr_world, list):\n        return 0\n    return 1 + max((calculate_depth(level) for level in vr_world), default=0)\n\nprint(calculate_depth([[], [[], []], [[[]]], [[], [[], [[], []]]]]))  # Output: 4\nprint(calculate_depth([[], [[], []], [[[]]]]))  # Output: 3\nprint(calculate_depth([[]]))  # Output: 2\nprint(calculate_depth([]))  # Output: 1",
    "unit_tests": "import unittest\nfrom main import calculate_depth\n\nclass TestCalculateDepth(unittest.TestCase):\n    def test_simple_vr_world(self):\n        self.assertEqual(calculate_depth([[], [[], []], [[[]]], [[], [[], [[], []]]]]), 4)\n\n    def test_medium_vr_world(self):\n        self.assertEqual(calculate_depth([[], [[], []], [[[]]]]), 3)\n\n    def test_simple_nesting(self):\n        self.assertEqual(calculate_depth([[]]), 2)\n\n    def test_empty_vr_world(self):\n        self.assertEqual(calculate_depth([]), 1)\n\n    def test_deeply_nested_vr_world(self):\n        self.assertEqual(calculate_depth([[[[[[]]]]]]), 6)\n\n    def test_no_nesting(self):\n        self.assertEqual(calculate_depth([1, 2, 3]), 1)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 74,
    "programming_concept": "Higher-order functions",
    "context": "Rugby",
    "task_description": "### Practice Task: Higher-order Functions in Rugby Context\n\nWrite a function `filter_players(player_list, criterion_function)` that accepts a list of rugby players and a function as parameters. The function should return a new list containing only the players that meet the criteria of the passed function.\n\nEach player is represented by a dictionary that contains at least the keys `name` and `position`.\n\nExample:\n\n```python\nplayer_list = [\n    {\"name\": \"Max\", \"position\": \"Forward\"},\n    {\"name\": \"Tom\", \"position\": \"Defender\"},\n    {\"name\": \"Leo\", \"position\": \"Forward\"},\n    {\"name\": \"Paul\", \"position\": \"Defender\"}\n]\n\ndef is_forward(player):\n    return player[\"position\"] == \"Forward\"\n\n# Function call\nresult = filter_players(player_list, is_forward)\n# Expected result: [{\"name\": \"Max\", \"position\": \"Forward\"}, {\"name\": \"Leo\", \"position\": \"Forward\"}]\n```\n\nImplement the `filter_players` function and test it with different criteria.",
    "code_skeleton": "def filter_players(player_list, criterion_function):\n    ## Insert code here",
    "model_solution": "def filter_players(player_list, criterion_function):\n    return [player for player in player_list if criterion_function(player)]\n\nplayer_list = [\n    {\"name\": \"Max\", \"position\": \"Forward\"},\n    {\"name\": \"Tom\", \"position\": \"Defender\"},\n    {\"name\": \"Leo\", \"position\": \"Forward\"},\n    {\"name\": \"Paul\", \"position\": \"Defender\"}\n]\n\ndef is_forward(player):\n    return player[\"position\"] == \"Forward\"\n\nresult = filter_players(player_list, is_forward)\nprint(result)",
    "unit_tests": "import unittest\nfrom main import filter_players\n\nclass TestFilterPlayers(unittest.TestCase):\n    def setUp(self):\n        self.player_list = [\n            {\"name\": \"Max\", \"position\": \"Forward\"},\n            {\"name\": \"Tom\", \"position\": \"Defender\"},\n            {\"name\": \"Leo\", \"position\": \"Forward\"},\n            {\"name\": \"Paul\", \"position\": \"Defender\"}\n        ]\n\n    def test_is_forward(self):\n        def is_forward(player):\n            return player[\"position\"] == \"Forward\"\n        expected = [\n            {\"name\": \"Max\", \"position\": \"Forward\"},\n            {\"name\": \"Leo\", \"position\": \"Forward\"}\n        ]\n        self.assertEqual(filter_players(self.player_list, is_forward), expected)\n\n    def test_is_defender(self):\n        def is_defender(player):\n            return player[\"position\"] == \"Defender\"\n        expected = [\n            {\"name\": \"Tom\", \"position\": \"Defender\"},\n            {\"name\": \"Paul\", \"position\": \"Defender\"}\n        ]\n        self.assertEqual(filter_players(self.player_list, is_defender), expected)\n\n    def test_empty_list(self):\n        def is_forward(player):\n            return player[\"position\"] == \"Forward\"\n        self.assertEqual(filter_players([], is_forward), [])\n\n    def test_no_matches(self):\n        def is_goalkeeper(player):\n            return player[\"position\"] == \"Goalkeeper\"\n        self.assertEqual(filter_players(self.player_list, is_goalkeeper), [])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 75,
    "programming_concept": "Integer",
    "context": "Pets",
    "task_description": "### Exercise: Counting Pets\n\nWrite a function named `count_pets(dogs, cats)`, which takes two integer parameters: the number of dogs and the number of cats in a household. The function should calculate and return the total number of pets.\n\nExample call:\n```python\ntotal = count_pets(3, 2)\nprint(total)  # Output: 5\n```\n\nIn this example, there are 3 dogs and 2 cats, resulting in a total of 5 pets.",
    "code_skeleton": "def count_pets(dogs, cats):\n    ## Insert code here",
    "model_solution": "def count_pets(dogs, cats):\n    return dogs + cats\n\nprint(count_pets(3, 2))  # Output: 5",
    "unit_tests": "import unittest\nfrom main import count_pets\n\nclass TestCountPets(unittest.TestCase):\n    def test_no_pets(self):\n        self.assertEqual(count_pets(0, 0), 0)\n\n    def test_only_dogs(self):\n        self.assertEqual(count_pets(5, 0), 5)\n\n    def test_only_cats(self):\n        self.assertEqual(count_pets(0, 3), 3)\n\n    def test_dogs_and_cats(self):\n        self.assertEqual(count_pets(2, 4), 6)\n\n    def test_large_numbers(self):\n        self.assertEqual(count_pets(1000, 2000), 3000)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 76,
    "programming_concept": "For loops",
    "context": "Basketball",
    "task_description": "### Practice Task: Basketball Score\n\nWrite a function named `calculate_score(point_list)` that receives a list of scored points in a basketball game as an argument. The function should calculate and return the total score. Use a for loop to sum the points.\n\nExample Call:\n```python\npoints = [2, 3, 2, 1, 3, 2]\ntotal_score = calculate_score(points)\nprint(total_score)  # Output: 13\n```\n\nImplement the function `calculate_score(point_list)` so that it correctly calculates and returns the total score.",
    "code_skeleton": "def calculate_score(point_list):\n    ## Insert code here",
    "model_solution": "def calculate_score(point_list):\n    return sum(point_list)\n\npoints = [2, 3, 2, 1, 3, 2]\ntotal_score = calculate_score(points)\nprint(total_score)  # Output: 13",
    "unit_tests": "import unittest\nfrom main import calculate_score\n\nclass TestCalculateScore(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(calculate_score([]), 0)\n\n    def test_single_point(self):\n        self.assertEqual(calculate_score([2]), 2)\n\n    def test_multiple_points(self):\n        self.assertEqual(calculate_score([2, 3, 2, 1, 3, 2]), 13)\n\n    def test_negative_point(self):\n        self.assertEqual(calculate_score([2, -1, 3]), 4)\n\n    def test_mixed_points(self):\n        self.assertEqual(calculate_score([2, 3, 0, 1, 3, 2]), 11)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 77,
    "programming_concept": "Boolean and None",
    "context": "Aquarium",
    "task_description": "### Practice Task: Aquarium Check\n\nWrite a function called `is_aquarium_full(water_level, capacity)` that checks if an aquarium is full. The function should take two parameters: `water_level` (in liters) and `capacity` (in liters). The function should return `True` if the aquarium is full, `False` if it is not full, and `None` if the water level is greater than the capacity.\n\nExample Calls:\n- `is_aquarium_full(50, 100)` returns `False`.\n- `is_aquarium_full(100, 100)` returns `True`.\n- `is_aquarium_full(150, 100)` returns `None`.",
    "code_skeleton": "def is_aquarium_full(water_level, capacity):\n    ## Insert code here",
    "model_solution": "def is_aquarium_full(water_level, capacity):\n    if water_level > capacity:\n        return None\n    return water_level == capacity\n\n# Example Calls\nprint(is_aquarium_full(50, 100))  # False\nprint(is_aquarium_full(100, 100)) # True\nprint(is_aquarium_full(150, 100)) # None",
    "unit_tests": "import unittest\n\nclass TestIsAquariumFull(unittest.TestCase):\n    def test_aquarium_not_full(self):\n        self.assertEqual(is_aquarium_full(50, 100), False)\n\n    def test_aquarium_full(self):\n        self.assertEqual(is_aquarium_full(100, 100), True)\n\n    def test_aquarium_overfilled(self):\n        self.assertEqual(is_aquarium_full(150, 100), None)\n\n    def test_aquarium_empty(self):\n        self.assertEqual(is_aquarium_full(0, 100), False)\n\n    def test_aquarium_exactly_full(self):\n        self.assertEqual(is_aquarium_full(100, 100), True)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 78,
    "programming_concept": "Functions as variables",
    "context": "Pets",
    "task_description": "### Exercise Task: Functions as Variables\n\nWrite a function `pet_action(pet, action)`, which performs an action for a specific pet. The function should accept two parameters: `pet` (a string that specifies the name of the pet) and `action` (a function that describes an action to be performed with the pet).\n\nExample call:\n```python\ndef petting(pet):\n    return f\"{pet} is being petted.\"\n\ndef feeding(pet):\n    return f\"{pet} is being fed.\"\n\npet_action(\"Bello\", petting)  # should return \"Bello is being petted.\"\npet_action(\"Mieze\", feeding)    # should return \"Mieze is being fed.\"\n```\n\nImplement the function `pet_action(pet, action)` so that it performs the corresponding action for the given pet and returns the result.",
    "code_skeleton": "def pet_action(pet, action):\n    ## Insert code here",
    "model_solution": "def pet_action(pet, action):\n    return action(pet)\n\ndef petting(pet):\n    return f\"{pet} is being petted.\"\n\ndef feeding(pet):\n    return f\"{pet} is being fed.\"\n\npet_action(\"Bello\", petting)\npet_action(\"Mieze\", feeding)",
    "unit_tests": "import unittest\n\n\ndef petting(pet):\n    return f\"{pet} is being petted.\"\n\ndef feeding(pet):\n    return f\"{pet} is being fed.\"\n\nclass TestPetAction(unittest.TestCase):\n    def test_petting(self):\n        self.assertEqual(pet_action(\"Bello\", petting), \"Bello is being petted.\")\n\n    def test_feeding(self):\n        self.assertEqual(pet_action(\"Mieze\", feeding), \"Mieze is being fed.\")\n\n    def test_empty_name(self):\n        self.assertEqual(pet_action(\"\", petting), \" is being petted.\")\n\n    def test_other_action(self):\n        def bathing(pet):\n            return f\"{pet} is being bathed.\"\n        self.assertEqual(pet_action(\"Rex\", bathing), \"Rex is being bathed.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 79,
    "programming_concept": "Higher-order functions",
    "context": "Mental Health",
    "task_description": "### Exercise: Higher-order functions in the context of mental health\n\nWrite a function `filter_positive_affirmations(affirmations, filter_function)` that takes a list of positive affirmations and a filter function as arguments. The function should filter the affirmations based on the provided filter function and return the filtered list.\n\nA positive affirmation is a short, positive sentence aimed at boosting self-esteem and mental health. Examples of affirmations are: \"I am strong\", \"I am valuable\", \"I can achieve anything\".\n\nExample call:\n```python\naffirmations = [\"I am strong\", \"I am valuable\", \"I can achieve anything\", \"I am enough\"]\ndef contains_word_i(affirmation):\n    return \"I\" in affirmation\n\nfiltered_affirmations = filter_positive_affirmations(affirmations, contains_word_i)\nprint(filtered_affirmations)  # Output: [\"I am strong\", \"I am valuable\", \"I can achieve anything\", \"I am enough\"]\n```\n\nImplement the function `filter_positive_affirmations` such that it correctly filters and returns the list of affirmations based on the provided filter function.",
    "code_skeleton": "def filter_positive_affirmations(affirmations, filter_function):\n    ## Insert code here",
    "model_solution": "def filter_positive_affirmations(affirmations, filter_function):\n    return list(filter(filter_function, affirmations))\n\naffirmations = [\"I am strong\", \"I am valuable\", \"I can achieve anything\", \"I am enough\"]\ndef contains_word_i(affirmation):\n    return \"I\" in affirmation\n\nfiltered_affirmations = filter_positive_affirmations(affirmations, contains_word_i)\nprint(filtered_affirmations)",
    "unit_tests": "import unittest\n\nclass TestFilterPositiveAffirmations(unittest.TestCase):\n    def test_contains_word_i(self):\n        affirmations = [\"I am strong\", \"I am valuable\", \"I can achieve anything\", \"I am enough\"]\n        def contains_word_i(affirmation):\n            return \"I\" in affirmation\n        self.assertEqual(filter_positive_affirmations(affirmations, contains_word_i), affirmations)\n\n    def test_empty_list(self):\n        affirmations = []\n        def contains_word_i(affirmation):\n            return \"I\" in affirmation\n        self.assertEqual(filter_positive_affirmations(affirmations, contains_word_i), [])\n\n    def test_no_match(self):\n        affirmations = [\"You are strong\", \"You are valuable\", \"You can achieve anything\", \"You are enough\"]\n        def contains_word_i(affirmation):\n            return \"I\" in affirmation\n        self.assertEqual(filter_positive_affirmations(affirmations, contains_word_i), [])\n\n    def test_partial_match(self):\n        affirmations = [\"I am strong\", \"You are valuable\", \"I can achieve anything\", \"You are enough\"]\n        def contains_word_i(affirmation):\n            return \"I\" in affirmation\n        self.assertEqual(filter_positive_affirmations(affirmations, contains_word_i), [\"I am strong\", \"I can achieve anything\"])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 80,
    "programming_concept": "Recursion",
    "context": "Pets",
    "task_description": "### Exercise: Recursive Counting of Pets\n\nWrite a recursive function named `count_pets(pets)` that counts the number of pets in a nested list. The list may contain both individual pets and further lists of pets.\n\nExample:\n```python\npets = [\"Dog\", [\"Cat\", \"Bird\"], [\"Fish\", [\"Hamster\", \"Rabbit\"]]]\n```\n\nA call to `count_pets(pets)` should return the total number of pets in the list.\n\n```python\ncount_pets(pets)  # should return 6\n```\n\nImplement the function `count_pets(pets)` that correctly counts the number of pets in the nested list.",
    "code_skeleton": "def count_pets(pets):\n    ## Insert code here",
    "model_solution": "def count_pets(pets):\n    if not pets:\n        return 0\n    if isinstance(pets[0], list):\n        return count_pets(pets[0]) + count_pets(pets[1:])\n    return 1 + count_pets(pets[1:])\n\npets = [\"Dog\", [\"Cat\", \"Bird\"], [\"Fish\", [\"Hamster\", \"Rabbit\"]]]\nprint(count_pets(pets))  # should return 6",
    "unit_tests": "import unittest\nfrom main import count_pets\n\nclass TestCountPets(unittest.TestCase):\n    def test_simple_list(self):\n        self.assertEqual(count_pets([\"Dog\", \"Cat\", \"Bird\"]), 3)\n\n    def test_nested_list(self):\n        self.assertEqual(count_pets([\"Dog\", [\"Cat\", \"Bird\"], [\"Fish\", [\"Hamster\", \"Rabbit\"]]]), 6)\n\n    def test_empty_list(self):\n        self.assertEqual(count_pets([]), 0)\n\n    def test_single_pet(self):\n        self.assertEqual(count_pets([\"Dog\"]), 1)\n\n    def test_deeply_nested_list(self):\n        self.assertEqual(count_pets([\"Dog\", [\"Cat\", [\"Bird\", [\"Fish\", [\"Hamster\", \"Rabbit\"]]]]]), 6)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 81,
    "programming_concept": "Tuples",
    "context": "Gardening",
    "task_description": "### Exercise: Gardening with Tuples\n\nWrite a function named `plant_info(plant)`, which returns information about different plants in a garden. The information about the plants should be stored in a tuple. Each tuple should contain the name of the plant, the required amount of water (in liters per week), and the preferred sunlight exposure (e.g. \"Full sun\", \"Partial shade\", \"Shade\").\n\nThe function should return a tuple with the information of the given plant. If the plant is not present in the garden, the function should return `None`.\n\nExample calls:\n```python\nplant_info(\"Tomato\")  # could return (\"Tomato\", 5, \"Full sun\")\nplant_info(\"Lavender\")  # could return (\"Lavender\", 2, \"Full sun\")\nplant_info(\"Unknown\")  # should return None\n```",
    "code_skeleton": "def plant_info(plant):\n    ## Insert code here",
    "model_solution": "def plant_info(plant):\n    garden = {\n        \"Tomato\": (\"Tomato\", 5, \"Full sun\"),\n        \"Lavender\": (\"Lavender\", 2, \"Full sun\"),\n        \"Basil\": (\"Basil\", 3, \"Partial shade\")\n    }\n    return garden.get(plant)\n\nprint(plant_info(\"Tomato\"))\nprint(plant_info(\"Lavender\"))\nprint(plant_info(\"Unknown\"))",
    "unit_tests": "import unittest\n\nclass TestPlantInfo(unittest.TestCase):\n    def test_tomato(self):\n        self.assertEqual(plant_info(\"Tomato\"), (\"Tomato\", 5, \"Full sun\"))\n\n    def test_lavender(self):\n        self.assertEqual(plant_info(\"Lavender\"), (\"Lavender\", 2, \"Full sun\"))\n\n    def test_basil(self):\n        self.assertEqual(plant_info(\"Basil\"), (\"Basil\", 3, \"Partial shade\"))\n\n    def test_unknown(self):\n        self.assertIsNone(plant_info(\"Unknown\"))\n\n    def test_empty_string(self):\n        self.assertIsNone(plant_info(\"\"))\n\n    def test_none(self):\n        self.assertIsNone(plant_info(None))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 82,
    "programming_concept": "Integer",
    "context": "Animals",
    "task_description": "### Exercise: Count Animals\n\nWrite a function named `count_animals(animals)`, which takes a list of animals as input and returns the number of animals in the list as an integer.\n\nExample usage:\n```python\ntiere = [\"Dog\", \"Cat\", \"Bird\", \"Dog\", \"Cat\"]\nprint(count_animals(animals))  # Output: 5\n```\n\nThe function should correctly count the number of animals in the list and return it as an integer.",
    "code_skeleton": "def count_animals(animals):\n    ## Insert code here\n",
    "model_solution": "def count_animals(animals):\n    return len(animals)\n\nanimals = [\"Dog\", \"Cat\", \"Bird\", \"Dog\", \"Cat\"]\nprint(count_animals(animals))  # Output: 5\n",
    "unit_tests": "import unittest\nfrom main import count_animals\n\nclass TestCountAnimals(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(count_animals([]), 0)\n\n    def test_single_animal(self):\n        self.assertEqual(count_animals([\"Dog\"]), 1)\n\n    def test_multiple_animals(self):\n        self.assertEqual(count_animals([\"Dog\", \"Cat\", \"Bird\", \"Dog\", \"Cat\"]), 5)\n\n    def test_same_animals(self):\n        self.assertEqual(count_animals([\"Dog\", \"Dog\", \"Dog\"]), 3)\n\n    def test_different_animals(self):\n        self.assertEqual(count_animals([\"Dog\", \"Cat\", \"Bird\"]), 3)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 83,
    "programming_concept": "Float",
    "context": "Mental Health",
    "task_description": "### Exercise: Calculating the Average Stress Level\n\nMental health is an important topic, and understanding stress levels can help improve well-being. In this task, you will write a function that calculates the average stress level of a person.\n\nWrite a function named `average_stress_level(stress_values)`, which takes a list of floating-point numbers (floats) as an argument. This list represents a person's daily stress levels over a certain period. The function should calculate and return the average stress level.\n\nExample call:\n```python\nstress_values = [3.5, 4.0, 2.8, 5.0, 3.9]\nprint(average_stress_level(stress_values))  # Output: 3.84\n```\n\nNote: The output does not have to be exactly 3.84, as this is just an example.",
    "code_skeleton": "def average_stress_level(stress_values):\n    ## Insert code here",
    "model_solution": "def average_stress_level(stress_values):\n    return sum(stress_values) / len(stress_values)\n\nstress_values = [3.5, 4.0, 2.8, 5.0, 3.9]\nprint(average_stress_level(stress_values))",
    "unit_tests": "import unittest\nfrom main import average_stress_level\n\nclass TestAverageStressLevel(unittest.TestCase):\n    def test_average_stress_level_simple(self):\n        self.assertAlmostEqual(average_stress_level([3.5, 4.0, 2.8, 5.0, 3.9]), 3.84, places=2)\n\n    def test_average_stress_level_empty(self):\n        with self.assertRaises(ZeroDivisionError):\n            average_stress_level([])\n\n    def test_average_stress_level_single_element(self):\n        self.assertEqual(average_stress_level([4.2]), 4.2)\n\n    def test_average_stress_level_negative_values(self):\n        self.assertAlmostEqual(average_stress_level([-1.0, -2.0, -3.0]), -2.0, places=2)\n\n    def test_average_stress_level_mixed_values(self):\n        self.assertAlmostEqual(average_stress_level([1.0, -1.0, 1.0, -1.0]), 0.0, places=2)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 84,
    "programming_concept": "Lists",
    "context": "Fishing",
    "task_description": "### Exercise: Fishing and Lists in Python\n\nWrite a function named `catch_fishes(fishes)` that takes a list of fishes as an argument. The function should count the number of fishes caught and return a message indicating the number of fishes.\n\nExample call:\n```python\ncatch_fishes([\"Pike\", \"Bass\", \"Trout\", \"Pike\"])\n```\n\nExpected return:\n```python\n\"You have caught 4 fishes.\"\n```",
    "code_skeleton": "def catch_fishes(fishes):\n    ## Insert code here\n",
    "model_solution": "def catch_fishes(fishes):\n    print(f\"You have caught {len(fishes)} fishes.\")\n\ncatch_fishes([\"Pike\", \"Bass\", \"Trout\", \"Pike\"])\n",
    "unit_tests": "import unittest\nfrom main import catch_fishes\n\nclass TestCatchFishes(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(catch_fishes([]), \"You have caught 0 fishes.\")\n\n    def test_one_fish(self):\n        self.assertEqual(catch_fishes([\"Pike\"]), \"You have caught 1 fish.\")\n\n    def test_multiple_fishes(self):\n        self.assertEqual(catch_fishes([\"Pike\", \"Bass\", \"Trout\", \"Pike\"]), \"You have caught 4 fishes.\")\n\n    def test_many_fishes(self):\n        self.assertEqual(catch_fishes([\"Pike\"] * 100), \"You have caught 100 fishes.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 85,
    "programming_concept": "Integer",
    "context": "Aquarium",
    "task_description": "### Exercise: Aquarium\n\nWrite a function named `count_fish(number_of_fish)` that checks the number of fish in an aquarium and returns an appropriate message.\n\n- If the number of fish is less than 5, the message \"The aquarium is quite empty.\" should be returned.\n- If the number of fish is between 5 and 10 (inclusive), the message \"The aquarium has a good number of fish.\" should be returned.\n- If the number of fish is more than 10, the message \"The aquarium is overcrowded!\" should be returned.\n\nExample calls:\n- `count_fish(3)` returns \"The aquarium is quite empty.\"\n- `count_fish(7)` returns \"The aquarium has a good number of fish.\"\n- `count_fish(12)` returns \"The aquarium is overcrowded!\"",
    "code_skeleton": "def count_fish(number_of_fish):\n    ## Insert code here",
    "model_solution": "def count_fish(number_of_fish):\n    if number_of_fish < 5:\n        return \"The aquarium is quite empty.\"\n    elif 5 <= number_of_fish <= 10:\n        return \"The aquarium has a good number of fish.\"\n    else:\n        return \"The aquarium is overcrowded!\"\n\n# Example calls\nprint(count_fish(3))\nprint(count_fish(7))\nprint(count_fish(12))",
    "unit_tests": "import unittest\nfrom main import count_fish\n\nclass TestCountFish(unittest.TestCase):\n    def test_few_fish(self):\n        self.assertEqual(count_fish(3), \"The aquarium is quite empty.\")\n\n    def test_good_number_of_fish(self):\n        self.assertEqual(count_fish(7), \"The aquarium has a good number of fish.\")\n\n    def test_many_fish(self):\n        self.assertEqual(count_fish(12), \"The aquarium is overcrowded!\")\n\n    def test_lower_boundary(self):\n        self.assertEqual(count_fish(5), \"The aquarium has a good number of fish.\")\n\n    def test_upper_boundary(self):\n        self.assertEqual(count_fish(10), \"The aquarium has a good number of fish.\")\n\n    def test_no_fish(self):\n        self.assertEqual(count_fish(0), \"The aquarium is quite empty.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 86,
    "programming_concept": "While loops",
    "context": "Fishing",
    "task_description": "### Exercise: Fishing with While Loops\n\nWrite a function called `fishing()` that simulates how many times a fisherman catches a fish until he has enough fish for a dinner. The fisherman needs at least 5 fish.\n\nThe function should use a while loop to simulate the catching process. With each iteration of the loop, the number of caught fish should increase by 1. Once the fisherman has caught 5 or more fish, the loop should terminate and the function should return the total number of caught fish.\n\nExample call: `fishing()` might return `5` if the fisherman catches exactly 5 fish.",
    "code_skeleton": "def fishing():\n    ## Insert code here",
    "model_solution": "def fishing():\n    fish_caught = 0\n    while fish_caught < 5:\n        fish_caught += 1\n    print(fish_caught)\n\nfishing()",
    "unit_tests": "import unittest\nfrom main import fishing\n\nclass TestFishing(unittest.TestCase):\n    def test_enough_fish(self):\n        self.assertEqual(fishing(), 5)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 87,
    "programming_concept": "Recursion",
    "context": "Fishing",
    "task_description": "### Exercise: Recursive Fish Counting\n\nWrite a recursive function named `count_fish(pond)`, that counts the number of fish in a pond. The pond is represented as a list of lists, where each inner list is either empty or contains more lists. An empty pond (empty list) contains no fish.\n\nExample calls:\n\n```python\n# A pond with no fish\npond1 = []\n\n# A pond with one fish\npond2 = [[], []]\n\n# A pond with three fish\npond3 = [[], [[], []], [[], [[], []]]]\n\nprint(count_fish(pond1))  # Output: 0\nprint(count_fish(pond2))  # Output: 2\nprint(count_fish(pond3))  # Output: 6\n```\n\nImplement the function `count_fish(pond)` that recursively counts and returns the number of fish in the pond.",
    "code_skeleton": "def count_fish(pond):\n    ## Insert code here",
    "model_solution": "def count_fish(pond):\n    return 1 + sum(count_fish(p) for p in pond) if pond else 0\n\n# Example calls\npond1 = []\npond2 = [[], []]\npond3 = [[], [[], []], [[], [[], []]]]\n\nprint(count_fish(pond1))  # Output: 0\nprint(count_fish(pond2))  # Output: 2\nprint(count_fish(pond3))  # Output: 6",
    "unit_tests": "import unittest\nfrom main import count_fish\n\nclass TestCountFish(unittest.TestCase):\n    def test_empty_pond(self):\n        self.assertEqual(count_fish([]), 0)\n\n    def test_one_fish(self):\n        self.assertEqual(count_fish([[], []]), 2)\n\n    def test_multiple_fish(self):\n        self.assertEqual(count_fish([[], [[], []], [[], [[], []]]]), 6)\n\n    def test_nested_pond(self):\n        self.assertEqual(count_fish([[], [[], [[], []]], [[], []]]), 5)\n\n    def test_deeply_nested_pond(self):\n        self.assertEqual(count_fish([[], [[], [[], [[], []]]], [[], []]]), 6)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 88,
    "programming_concept": "Integer",
    "context": "Sports",
    "task_description": "### Practice Task: Sporting Score Calculation\n\nWrite a function named `calculate_points(goals, assists)` that calculates the total score of a player in a football match. The player receives 3 points for each goal scored and 1 point for each assist. The function should return the total score as an integer.\n\nExample Call:\n```python\ncalculate_points(2, 3)\n```\nThis call should return 9 because the player scored 2 goals (2 * 3 = 6 points) and made 3 assists (3 * 1 = 3 points), totaling 9 points.",
    "code_skeleton": "def calculate_points(goals, assists):\n    ## Insert code here",
    "model_solution": "def calculate_points(goals, assists):\n    return goals * 3 + assists\n\n# Example call\nprint(calculate_points(2, 3))",
    "unit_tests": "import unittest\n\nfrom main import calculate_points\n\nclass TestCalculatePoints(unittest.TestCase):\n    def test_no_goals_and_assists(self):\n        self.assertEqual(calculate_points(0, 0), 0)\n\n    def test_only_goals(self):\n        self.assertEqual(calculate_points(3, 0), 9)\n\n    def test_only_assists(self):\n        self.assertEqual(calculate_points(0, 4), 4)\n\n    def test_goals_and_assists(self):\n        self.assertEqual(calculate_points(2, 3), 9)\n\n    def test_large_numbers(self):\n        self.assertEqual(calculate_points(100, 200), 500)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 89,
    "programming_concept": "For loops",
    "context": "Restaurant",
    "task_description": "### Practice Task: Restaurant Orders\n\nWrite a function named `record_orders(orders)` that receives a list of orders as an argument. Each order is a string containing the name of a dish. The function should count the number of orders for each dish and return the result as a dictionary.\n\nExample call:\n```python\norders = [\"Pizza\", \"Burger\", \"Salad\", \"Pizza\", \"Burger\", \"Pizza\"]\nprint(record_orders(orders))\n```\n\nExpected output:\n```python\n{'Pizza': 3, 'Burger': 2, 'Salad': 1}\n```",
    "code_skeleton": "def record_orders(orders):\n    ## Insert code here",
    "model_solution": "def record_orders(orders):\n    result = {}\n    for dish in orders:\n        if dish in result:\n            result[dish] += 1\n        else:\n            result[dish] = 1\n    return result\n\norders = [\"Pizza\", \"Burger\", \"Salad\", \"Pizza\", \"Burger\", \"Pizza\"]\nprint(record_orders(orders))",
    "unit_tests": "import unittest\nfrom main import record_orders\n\nclass TestRecordOrders(unittest.TestCase):\n    def test_simple_case(self):\n        self.assertEqual(record_orders([\"Pizza\", \"Burger\", \"Salad\", \"Pizza\", \"Burger\", \"Pizza\"]), {'Pizza': 3, 'Burger': 2, 'Salad': 1})\n\n    def test_empty_list(self):\n        self.assertEqual(record_orders([]), {})\n\n    def test_single_order(self):\n        self.assertEqual(record_orders([\"Pizza\"]), {'Pizza': 1})\n\n    def test_multiple_different_orders(self):\n        self.assertEqual(record_orders([\"Pizza\", \"Burger\", \"Salad\", \"Noodles\", \"Pizza\", \"Burger\", \"Pizza\", \"Noodles\"]), {'Pizza': 3, 'Burger': 2, 'Salad': 1, 'Noodles': 2})\n\n    def test_all_same_orders(self):\n        self.assertEqual(record_orders([\"Pizza\", \"Pizza\", \"Pizza\", \"Pizza\"]), {'Pizza': 4})\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 90,
    "programming_concept": "For loops",
    "context": "Fishing",
    "task_description": "### Exercise: Count Fish\n\nWrite a function named `count_fish(fish_list)` that takes a list of fish as input and counts the number of fish in the list. The function should return the number of fish using `return`.\n\nExample call:\n```python\nfish = [\"Pike\", \"Carp\", \"Trout\", \"Pike\", \"Perch\"]\nnumber = count_fish(fish)\nprint(number)  # Output: 5\n```\n\nUse a for loop to determine the number of fish in the list.",
    "code_skeleton": "def count_fish(fish_list):\n    ## Insert code here",
    "model_solution": "def count_fish(fish_list):\n    return len(fish_list)\n\nfish = [\"Pike\", \"Carp\", \"Trout\", \"Pike\", \"Perch\"]\nnumber = count_fish(fish)\nprint(number)  # Output: 5",
    "unit_tests": "import unittest\nfrom main import count_fish\n\nclass TestCountFish(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(count_fish([]), 0)\n\n    def test_one_fish(self):\n        self.assertEqual(count_fish([\"Pike\"]), 1)\n\n    def test_multiple_fish(self):\n        self.assertEqual(count_fish([\"Pike\", \"Carp\", \"Trout\", \"Pike\", \"Perch\"]), 5)\n\n    def test_all_same_fish(self):\n        self.assertEqual(count_fish([\"Pike\", \"Pike\", \"Pike\"]), 3)\n\n    def test_different_fish(self):\n        self.assertEqual(count_fish([\"Pike\", \"Carp\", \"Trout\", \"Perch\", \"Zander\"]), 5)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 91,
    "programming_concept": "While loops",
    "context": "Aquarium",
    "task_description": "### Exercise Task: Aquarium - Count Fish\n\nWrite a function named `count_fish(fish_list)` that takes a list of fish as an argument. The function should use a while loop to count the number of fish in the list and return this number.\n\nExample call:\n```python\nfish_list = [\"Goldfish\", \"Guppy\", \"Neon Tetra\", \"Platy\"]\nprint(count_fish(fish_list))  # Output: 4\n```\n\nImplement the function `count_fish(fish_list)` that counts and returns the number of fish in the list.",
    "code_skeleton": "def count_fish(fish_list):\n    ## Insert code here",
    "model_solution": "def count_fish(fish_list):\n    count = 0\n    i = 0\n    while i < len(fish_list):\n        count += 1\n        i += 1\n    return count\n\nfish_list = [\"Goldfish\", \"Guppy\", \"Neon Tetra\", \"Platy\"]\nprint(count_fish(fish_list))",
    "unit_tests": "import unittest\nfrom main import count_fish\n\nclass TestCountFish(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(count_fish([]), 0)\n\n    def test_single_fish(self):\n        self.assertEqual(count_fish([\"Goldfish\"]), 1)\n\n    def test_multiple_fish(self):\n        self.assertEqual(count_fish([\"Goldfish\", \"Guppy\", \"Neon Tetra\", \"Platy\"]), 4)\n\n    def test_same_fish(self):\n        self.assertEqual(count_fish([\"Guppy\", \"Guppy\", \"Guppy\"]), 3)\n\n    def test_mixed_fish(self):\n        self.assertEqual(count_fish([\"Goldfish\", \"Guppy\", \"Guppy\", \"Neon Tetra\", \"Platy\", \"Platy\"]), 6)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 92,
    "programming_concept": "Operations with numbers",
    "context": "Aquarium",
    "task_description": "### Exercise Task: Operations with numbers in the context 'Aquarium'\n\nWrite a function named `calculate_water_volume(length, width, height)` that calculates the volume of a rectangular aquarium in liters. The function should take the length, width, and height of the aquarium in centimeters as parameters and return the volume in liters.\n\nNote: 1 liter equals 1000 cubic centimeters.\n\nExample call:\n```python\nvolume = calculate_water_volume(100, 50, 40)\nprint(volume)  # Output: 200.0\n```\n\nIn this example, the aquarium has a length of 100 cm, a width of 50 cm, and a height of 40 cm. The calculated volume is 200 liters.",
    "code_skeleton": "def calculate_water_volume(length, width, height):\n    ## Insert code here",
    "model_solution": "def calculate_water_volume(length, width, height):\n    return (length * width * height) / 1000\n\nvolume = calculate_water_volume(100, 50, 40)\nprint(volume)",
    "unit_tests": "import unittest\nfrom main import calculate_water_volume\n\nclass TestCalculateWaterVolume(unittest.TestCase):\n    def test_standard_case(self):\n        self.assertEqual(calculate_water_volume(100, 50, 40), 200.0)\n\n    def test_zero_volume(self):\n        self.assertEqual(calculate_water_volume(0, 50, 40), 0.0)\n        self.assertEqual(calculate_water_volume(100, 0, 40), 0.0)\n        self.assertEqual(calculate_water_volume(100, 50, 0), 0.0)\n\n    def test_one_liter(self):\n        self.assertEqual(calculate_water_volume(10, 10, 10), 1.0)\n\n    def test_large_values(self):\n        self.assertEqual(calculate_water_volume(1000, 1000, 1000), 1000000.0)\n\n    def test_small_values(self):\n        self.assertAlmostEqual(calculate_water_volume(1, 1, 1), 0.001)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 93,
    "programming_concept": "Lists",
    "context": "Cooking",
    "task_description": "### Exercise Task: Ingredient List for a Recipe\n\nWrite a function called `add_ingredient(ingredient_list, new_ingredient)`, which receives a list of ingredients and a new ingredient as parameters. The function should add the new ingredient to the ingredient list and return the updated list.\n\nExample call:\n```python\ningredients = [\"Flour\", \"Sugar\", \"Eggs\"]\nupdated_list = add_ingredient(ingredients, \"Milk\")\nprint(updated_list)  # Output: [\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"]\n```\n\n### Additional Task: Remove Ingredients\n\nExtend the function to allow the removal of an ingredient from the list. Write a function called `remove_ingredient(ingredient_list, remove_ingredient)`, which receives a list of ingredients and an ingredient to remove as parameters. The function should remove the ingredient from the list and return the updated list.\n\nExample call:\n```python\ningredients = [\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"]\nupdated_list = remove_ingredient(ingredients, \"Sugar\")\nprint(updated_list)  # Output: [\"Flour\", \"Eggs\", \"Milk\"]\n```",
    "code_skeleton": "def add_ingredient(ingredient_list, new_ingredient):\n    ## Insert code here\n\n\ndef remove_ingredient(ingredient_list, remove_ingredient):\n    ## Insert code here",
    "model_solution": "def add_ingredient(ingredient_list, new_ingredient):\n    ingredient_list.append(new_ingredient)\n    return ingredient_list\n\n\ndef remove_ingredient(ingredient_list, remove_ingredient):\n    if remove_ingredient in ingredient_list:\n        ingredient_list.remove(remove_ingredient)\n    return ingredient_list\n\n# Example calls\ningredients = [\"Flour\", \"Sugar\", \"Eggs\"]\nupdated_list = add_ingredient(ingredients, \"Milk\")\nprint(updated_list)  # Output: [\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"]\n\nupdated_list = remove_ingredient(ingredients, \"Sugar\")\nprint(updated_list)  # Output: [\"Flour\", \"Eggs\", \"Milk\"]",
    "unit_tests": "import unittest\nfrom main import add_ingredient, remove_ingredient\n\nclass TestIngredients(unittest.TestCase):\n    def test_add_ingredient(self):\n        self.assertEqual(add_ingredient([\"Flour\", \"Sugar\", \"Eggs\"], \"Milk\"), [\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"])\n\n    def test_remove_ingredient(self):\n        self.assertEqual(remove_ingredient([\"Flour\", \"Sugar\", \"Eggs\", \"Milk\"], \"Sugar\"), [\"Flour\", \"Eggs\", \"Milk\"])\n\n    def test_add_ingredient_empty_list(self):\n        self.assertEqual(add_ingredient([], \"Milk\"), [\"Milk\"])\n\n    def test_remove_ingredient_not_present(self):\n        self.assertEqual(remove_ingredient([\"Flour\", \"Sugar\", \"Eggs\"], \"Milk\"), [\"Flour\", \"Sugar\", \"Eggs\"])\n\n    def test_remove_ingredient_empty_list(self):\n        self.assertEqual(remove_ingredient([], \"Milk\"), [])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 94,
    "programming_concept": "Float",
    "context": "Rugby",
    "task_description": "### Exercise: Rugby Score Calculation\n\nWrite a function named `calculate_score(tries, conversions, penalties)` that calculates the score of a rugby game.\n\n- A try scores 5 points.\n- A conversion scores 2 points.\n- A penalty scores 3 points.\n\nThe function should take three parameters:\n- `tries` (float): Number of tries scored.\n- `conversions` (float): Number of conversions scored.\n- `penalties` (float): Number of penalties scored.\n\nThe function should return the total score as a float.\n\nExample call:\n```python\ncalculate_score(3.0, 2.0, 1.0)\n```\nThis call should return the value `21.0`.",
    "code_skeleton": "def calculate_score(tries, conversions, penalties):\n    ## Insert code here",
    "model_solution": "def calculate_score(tries, conversions, penalties):\n    return tries * 5 + conversions * 2 + penalties * 3\n\nprint(calculate_score(3.0, 2.0, 1.0))",
    "unit_tests": "import unittest\n\nfrom main import calculate_score\n\nclass TestCalculateScore(unittest.TestCase):\n    def test_all_types_of_points(self):\n        self.assertEqual(calculate_score(3.0, 2.0, 1.0), 21.0)\n\n    def test_only_tries(self):\n        self.assertEqual(calculate_score(4.0, 0.0, 0.0), 20.0)\n\n    def test_only_conversions(self):\n        self.assertEqual(calculate_score(0.0, 3.0, 0.0), 6.0)\n\n    def test_only_penalties(self):\n        self.assertEqual(calculate_score(0.0, 0.0, 5.0), 15.0)\n\n    def test_no_points(self):\n        self.assertEqual(calculate_score(0.0, 0.0, 0.0), 0.0)\n\n    def test_mixed_points(self):\n        self.assertEqual(calculate_score(2.0, 3.0, 4.0), 25.0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 95,
    "programming_concept": "Higher-order functions",
    "context": "Gardening",
    "task_description": "### Exercise: Higher-order Functions in Gardening\n\nWrite a function called `manage_plants(plant_list, function)` that takes a list of plants and a function as arguments. The function `manage_plants` should apply the given function to each plant in the list and return the results in a new list.\n\nExample call:\n```python\ndef describe_plant(plant):\n    return f\"The plant {plant} grows well in the garden.\"\n\nplants = [\"Tomato\", \"Cucumber\", \"Zucchini\"]\nresults = manage_plants(plants, describe_plant)\nprint(results)\n```\n\nExpected output:\n```\n['The plant Tomato grows well in the garden.', 'The plant Cucumber grows well in the garden.', 'The plant Zucchini grows well in the garden.']\n```\n\nImplement the function `manage_plants` so it applies the passed function to each plant in the list and returns the results in a new list.",
    "code_skeleton": "def manage_plants(plant_list, function):\n    ## Insert code here",
    "model_solution": "def manage_plants(plant_list, function):\n    return [function(plant) for plant in plant_list]\n\ndef describe_plant(plant):\n    return f\"The plant {plant} grows well in the garden.\"\n\nplants = [\"Tomato\", \"Cucumber\", \"Zucchini\"]\nresults = manage_plants(plants, describe_plant)\nprint(results)",
    "unit_tests": "import unittest\nfrom main import manage_plants\n\ndef describe_plant(plant):\n    return f\"The plant {plant} grows well in the garden.\"\n\nclass TestManagePlants(unittest.TestCase):\n    def test_simple_list(self):\n        plants = [\"Tomato\", \"Cucumber\", \"Zucchini\"]\n        expected = [\n            \"The plant Tomato grows well in the garden.\",\n            \"The plant Cucumber grows well in the garden.\",\n            \"The plant Zucchini grows well in the garden.\"\n        ]\n        self.assertEqual(manage_plants(plants, describe_plant), expected)\n\n    def test_empty_list(self):\n        plants = []\n        expected = []\n        self.assertEqual(manage_plants(plants, describe_plant), expected)\n\n    def test_single_plant(self):\n        plants = [\"Tomato\"]\n        expected = [\"The plant Tomato grows well in the garden.\"]\n        self.assertEqual(manage_plants(plants, describe_plant), expected)\n\n    def test_various_plants(self):\n        plants = [\"Tomato\", \"Cucumber\", \"Zucchini\", \"Pepper\"]\n        expected = [\n            \"The plant Tomato grows well in the garden.\",\n            \"The plant Cucumber grows well in the garden.\",\n            \"The plant Zucchini grows well in the garden.\",\n            \"The plant Pepper grows well in the garden.\"\n        ]\n        self.assertEqual(manage_plants(plants, describe_plant), expected)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 96,
    "programming_concept": "Higher-order functions",
    "context": "Sports",
    "task_description": "### Exercise: Higher-order functions in Sports\n\nWrite a function named `filter_athletes(athlete_list, criterion_function)` that takes a list of athletes and a function as parameters. The function should return a new list that only contains the athletes who meet the criterion of the passed function.\n\nAn athlete is represented by a dictionary that contains at least the keys `name` and `sport`.\n\nExample:\n\n```python\nathlete_list = [\n    {\"name\": \"Anna\", \"sport\": \"Tennis\"},\n    {\"name\": \"Ben\", \"sport\": \"Football\"},\n    {\"name\": \"Clara\", \"sport\": \"Swimming\"},\n    {\"name\": \"David\", \"sport\": \"Tennis\"}\n]\n\ndef is_tennis_player(athlete):\n    return athlete[\"sport\"] == \"Tennis\"\n\n# Calling the function\nfiltered_athletes = filter_athletes(athlete_list, is_tennis_player)\n# Expected output: [{\"name\": \"Anna\", \"sport\": \"Tennis\"}, {\"name\": \"David\", \"sport\": \"Tennis\"}]\n```\n\nImplement the function `filter_athletes` so that it filters the list of athletes based on the passed criterion function and returns the filtered list.",
    "code_skeleton": "def filter_athletes(athlete_list, criterion_function):\n    ## Insert code here",
    "model_solution": "def filter_athletes(athlete_list, criterion_function):\n    return [athlete for athlete in athlete_list if criterion_function(athlete)]\n\nathlete_list = [\n    {\"name\": \"Anna\", \"sport\": \"Tennis\"},\n    {\"name\": \"Ben\", \"sport\": \"Football\"},\n    {\"name\": \"Clara\", \"sport\": \"Swimming\"},\n    {\"name\": \"David\", \"sport\": \"Tennis\"}\n]\n\ndef is_tennis_player(athlete):\n    return athlete[\"sport\"] == \"Tennis\"\n\nfiltered_athletes = filter_athletes(athlete_list, is_tennis_player)\nprint(filtered_athletes)",
    "unit_tests": "import unittest\nfrom main import filter_athletes\n\nclass TestFilterAthletes(unittest.TestCase):\n    def test_tennis_players(self):\n        athlete_list = [\n            {\"name\": \"Anna\", \"sport\": \"Tennis\"},\n            {\"name\": \"Ben\", \"sport\": \"Football\"},\n            {\"name\": \"Clara\", \"sport\": \"Swimming\"},\n            {\"name\": \"David\", \"sport\": \"Tennis\"}\n        ]\n        def is_tennis_player(athlete):\n            return athlete[\"sport\"] == \"Tennis\"\n        self.assertEqual(filter_athletes(athlete_list, is_tennis_player), [\n            {\"name\": \"Anna\", \"sport\": \"Tennis\"},\n            {\"name\": \"David\", \"sport\": \"Tennis\"}\n        ])\n\n    def test_football_players(self):\n        athlete_list = [\n            {\"name\": \"Anna\", \"sport\": \"Tennis\"},\n            {\"name\": \"Ben\", \"sport\": \"Football\"},\n            {\"name\": \"Clara\", \"sport\": \"Swimming\"},\n            {\"name\": \"David\", \"sport\": \"Tennis\"}\n        ]\n        def is_football_player(athlete):\n            return athlete[\"sport\"] == \"Football\"\n        self.assertEqual(filter_athletes(athlete_list, is_football_player), [\n            {\"name\": \"Ben\", \"sport\": \"Football\"}\n        ])\n\n    def test_no_athletes(self):\n        athlete_list = []\n        def is_tennis_player(athlete):\n            return athlete[\"sport\"] == \"Tennis\"\n        self.assertEqual(filter_athletes(athlete_list, is_tennis_player), [])\n\n    def test_all_athletes(self):\n        athlete_list = [\n            {\"name\": \"Anna\", \"sport\": \"Tennis\"},\n            {\"name\": \"Ben\", \"sport\": \"Football\"},\n            {\"name\": \"Clara\", \"sport\": \"Swimming\"},\n            {\"name\": \"David\", \"sport\": \"Tennis\"}\n        ]\n        def all_athletes(athlete):\n            return True\n        self.assertEqual(filter_athletes(athlete_list, all_athletes), athlete_list)\n\n    def test_no_tennis_players(self):\n        athlete_list = [\n            {\"name\": \"Ben\", \"sport\": \"Football\"},\n            {\"name\": \"Clara\", \"sport\": \"Swimming\"}\n        ]\n        def is_tennis_player(athlete):\n            return athlete[\"sport\"] == \"Tennis\"\n        self.assertEqual(filter_athletes(athlete_list, is_tennis_player), [])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 97,
    "programming_concept": "Boolean and None",
    "context": "Pets",
    "task_description": "### Exercise: Pets and Boolean\n\nWrite a function named `is_pet(name)` that checks if the given name belongs to a known pet. The function should return `True` if the name is in the list of known pets, and `False` if not. If the name is `None`, the function should also return `False`.\n\nKnown pets are:\n- \"Dog\"\n- \"Cat\"\n- \"Hamster\"\n- \"Rabbit\"\n- \"Parrot\"\n\nExample calls:\n- `is_pet(\"Dog\")` returns `True`.\n- `is_pet(\"Elephant\")` returns `False`.\n- `is_pet(None)` returns `False`.",
    "code_skeleton": "def is_pet(name):\n    ## Insert code here",
    "model_solution": "def is_pet(name):\n    return name in [\"Dog\", \"Cat\", \"Hamster\", \"Rabbit\", \"Parrot\"]\n\n# Test cases\nprint(is_pet(\"Dog\"))      # True\nprint(is_pet(\"Elephant\"))   # False\nprint(is_pet(None))        # False",
    "unit_tests": "import unittest\nfrom main import is_pet\n\nclass TestIsPet(unittest.TestCase):\n    def test_dog(self):\n        self.assertTrue(is_pet(\"Dog\"))\n\n    def test_cat(self):\n        self.assertTrue(is_pet(\"Cat\"))\n\n    def test_hamster(self):\n        self.assertTrue(is_pet(\"Hamster\"))\n\n    def test_rabbit(self):\n        self.assertTrue(is_pet(\"Rabbit\"))\n\n    def test_parrot(self):\n        self.assertTrue(is_pet(\"Parrot\"))\n\n    def test_elephant(self):\n        self.assertFalse(is_pet(\"Elephant\"))\n\n    def test_none(self):\n        self.assertFalse(is_pet(None))\n\n    def test_empty_string(self):\n        self.assertFalse(is_pet(\"\"))\n\n    def test_unknown_animal(self):\n        self.assertFalse(is_pet(\"Tiger\"))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 98,
    "programming_concept": "Float",
    "context": "Cooking",
    "task_description": "### Exercise Task: Calculate Ingredient Quantities\n\nWrite a function named `calculate_ingredient_quantity(number_of_people)`, which calculates the required amount of an ingredient for a recipe. The recipe is designed for 4 people and needs 250.0 grams of flour. The function should calculate and return the required amount of flour for the given number of people.\n\nExample call: `calculate_ingredient_quantity(2)` returns `125.0`.",
    "code_skeleton": "def calculate_ingredient_quantity(number_of_people):\n    ## Insert code here",
    "model_solution": "def calculate_ingredient_quantity(number_of_people):\n    return 250.0 * number_of_people / 4\n\nprint(calculate_ingredient_quantity(2))",
    "unit_tests": "import unittest\nfrom main import calculate_ingredient_quantity\n\nclass TestCalculateIngredientQuantity(unittest.TestCase):\n    def test_two_people(self):\n        self.assertEqual(calculate_ingredient_quantity(2), 125.0)\n\n    def test_four_people(self):\n        self.assertEqual(calculate_ingredient_quantity(4), 250.0)\n\n    def test_eight_people(self):\n        self.assertEqual(calculate_ingredient_quantity(8), 500.0)\n\n    def test_zero_people(self):\n        self.assertEqual(calculate_ingredient_quantity(0), 0.0)\n\n    def test_half_person(self):\n        self.assertEqual(calculate_ingredient_quantity(0.5), 31.25)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 99,
    "programming_concept": "If-Else statements",
    "context": "Animals",
    "task_description": "### Exercise: Animal Classification \n\nWrite a function called `animal_classification(animal)`, which classifies the type of an animal based on the passed string. The function should return a corresponding message using `return`.\n\n- If the animal is a \"Dog\", the message \"This is a mammal.\" should be returned.\n- If the animal is an \"Eagle\", the message \"This is a bird.\" should be returned.\n- If the animal is a \"Shark\", the message \"This is a fish.\" should be returned.\n- For all other animals, the message \"Unknown animal class.\" should be returned.\n\nExample calls:\n- `animal_classification(\"Dog\")` returns \"This is a mammal.\"\n- `animal_classification(\"Eagle\")` returns \"This is a bird.\"\n- `animal_classification(\"Shark\")` returns \"This is a fish.\"\n- `animal_classification(\"Crocodile\")` returns \"Unknown animal class.\"",
    "code_skeleton": "def animal_classification(animal):\n    ## Insert code here",
    "model_solution": "def animal_classification(animal):\n    if animal == \"Dog\":\n        return \"This is a mammal.\"\n    elif animal == \"Eagle\":\n        return \"This is a bird.\"\n    elif animal == \"Shark\":\n        return \"This is a fish.\"\n    else:\n        return \"Unknown animal class.\"\n\n# Example calls\nprint(animal_classification(\"Dog\"))\nprint(animal_classification(\"Eagle\"))\nprint(animal_classification(\"Shark\"))\nprint(animal_classification(\"Crocodile\"))",
    "unit_tests": "import unittest\n\nfrom main import animal_classification\n\nclass TestAnimalClassification(unittest.TestCase):\n    def test_dog(self):\n        self.assertEqual(animal_classification(\"Dog\"), \"This is a mammal.\")\n\n    def test_eagle(self):\n        self.assertEqual(animal_classification(\"Eagle\"), \"This is a bird.\")\n\n    def test_shark(self):\n        self.assertEqual(animal_classification(\"Shark\"), \"This is a fish.\")\n\n    def test_unknown_animal(self):\n        self.assertEqual(animal_classification(\"Crocodile\"), \"Unknown animal class.\")\n\n    def test_empty_string(self):\n        self.assertEqual(animal_classification(\"\"), \"Unknown animal class.\")\n\n    def test_none(self):\n        self.assertEqual(animal_classification(None), \"Unknown animal class.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 100,
    "programming_concept": "Recursion",
    "context": "Animals",
    "task_description": "### Exercise: Recursive Animal Counting\n\nWrite a recursive function named `count_animals(animals)` that takes a list of animals as an argument and returns the number of animals in the list. The function should work recursively and not use loops.\n\nExample call:\n```python\nanimals = [\"Dog\", \"Cat\", \"Bird\", \"Fish\"]\nprint(count_animals(animals))  # Output: 4\n```\n\nNote: The list can also be empty.",
    "code_skeleton": "def count_animals(animals):\n    ## Insert code here",
    "model_solution": "def count_animals(animals):\n    if not animals:\n        return 0\n    return 1 + count_animals(animals[1:])\n\nanimals = [\"Dog\", \"Cat\", \"Bird\", \"Fish\"]\nprint(count_animals(animals))",
    "unit_tests": "import unittest\n\nfrom main import count_animals\n\nclass TestCountAnimals(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(count_animals([]), 0)\n\n    def test_single_animal(self):\n        self.assertEqual(count_animals([\"Dog\"]), 1)\n\n    def test_multiple_animals(self):\n        self.assertEqual(count_animals([\"Dog\", \"Cat\", \"Bird\", \"Fish\"]), 4)\n\n    def test_different_animals(self):\n        self.assertEqual(count_animals([\"Elephant\", \"Mouse\", \"Tiger\", \"Lion\", \"Giraffe\"]), 5)\n\n    def test_repeated_animals(self):\n        self.assertEqual(count_animals([\"Dog\", \"Dog\", \"Dog\"]), 3)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 101,
    "programming_concept": "Recursion;If-Else statements",
    "context": "Fishing",
    "task_description": "### Exercise: Recursive Fish Counting\n\nWrite a recursive function named `count_fish(fish_list)` that counts the number of fish in a lake. The function should take a list of fish as an argument, where each fish is represented by a string. If the list is empty, the function should return 0. Otherwise, the function should return the number of fish in the list.\n\nExample calls:\n- `count_fish([])` returns `0`.\n- `count_fish([\"Pike\", \"Carp\", \"Trout\"])` returns `3`.",
    "code_skeleton": "def count_fish(fish_list):\n    ## Insert code here",
    "model_solution": "def count_fish(fish_list):\n    if not fish_list:\n        return 0\n    return 1 + count_fish(fish_list[1:])\n\nprint(count_fish([]))\nprint(count_fish([\"Pike\", \"Carp\", \"Trout\"]))",
    "unit_tests": "import unittest\nfrom main import count_fish\n\nclass TestCountFish(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(count_fish([]), 0)\n\n    def test_one_fish(self):\n        self.assertEqual(count_fish([\"Pike\"]), 1)\n\n    def test_multiple_fish(self):\n        self.assertEqual(count_fish([\"Pike\", \"Carp\", \"Trout\"]), 3)\n\n    def test_many_fish(self):\n        self.assertEqual(count_fish([\"Pike\", \"Carp\", \"Trout\", \"Perch\", \"Catfish\", \"Zander\"]), 6)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 102,
    "programming_concept": "Operations with numbers; For loops",
    "context": "Sports",
    "task_description": "### Exercise: Calculate Average Running Time\n\nWrite a function called `average_running_time(times)` that receives a list of running times (in minutes) as an argument and computes and returns the average running time. The calculation should be performed using a for loop.\n\nExample call:\n```python\ntimes = [30, 45, 50, 40, 35]\nprint(average_running_time(times))  # Output: 40.0\n```\n\nIn this example, the running times from five runners are given in minutes. The function should calculate and return the average running time.",
    "code_skeleton": "def average_running_time(times):\n    ## Insert code here\n",
    "model_solution": "def average_running_time(times):\n    total = 0\n    for time in times:\n        total += time\n    return total / len(times)\n\ntimes = [30, 45, 50, 40, 35]\nprint(average_running_time(times))",
    "unit_tests": "import unittest\nfrom main import average_running_time\n\nclass TestAverageRunningTime(unittest.TestCase):\n    def test_simple_list(self):\n        self.assertEqual(average_running_time([30, 45, 50, 40, 35]), 40.0)\n\n    def test_empty_list(self):\n        with self.assertRaises(ZeroDivisionError):\n            average_running_time([])\n\n    def test_single_element(self):\n        self.assertEqual(average_running_time([25]), 25.0)\n\n    def test_mixed_values(self):\n        self.assertEqual(average_running_time([10, 20, 30, 40, 50]), 30.0)\n\n    def test_same_values(self):\n        self.assertEqual(average_running_time([20, 20, 20, 20, 20]), 20.0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 103,
    "programming_concept": "Boolean and None; Float",
    "context": "Animals",
    "task_description": "### Exercise: Animal Information\n\nWrite a function named `animal_info(name, weight)`, which returns information about an animal based on its name and weight. The function should fulfill the following requirements:\n\n1. If the name of the animal is \"Elephant\" and the weight is greater than 5000.0 (in kilograms), the function should return `True`.\n2. If the name of the animal is \"Mouse\" and the weight is less than 0.05 (in kilograms), the function should return `True`.\n3. In all other cases, the function should return `None`.\n\nExample calls:\n- `animal_info(\"Elephant\", 6000.0)` returns `True`.\n- `animal_info(\"Mouse\", 0.03)` returns `True`.\n- `animal_info(\"Dog\", 10.0)` returns `None`.",
    "code_skeleton": "def animal_info(name, weight):\n    ## Insert code here",
    "model_solution": "def animal_info(name, weight):\n    if name == \"Elephant\" and weight > 5000.0:\n        return True\n    if name == \"Mouse\" and weight < 0.05:\n        return True\n    return None\n\nprint(animal_info(\"Elephant\", 6000.0))  # True\nprint(animal_info(\"Mouse\", 0.03))       # True\nprint(animal_info(\"Dog\", 10.0))         # None",
    "unit_tests": "import unittest\n\nfrom main import animal_info\n\nclass TestAnimalInfo(unittest.TestCase):\n    def test_elephant_heavy(self):\n        self.assertEqual(animal_info(\"Elephant\", 6000.0), True)\n\n    def test_mouse_light(self):\n        self.assertEqual(animal_info(\"Mouse\", 0.03), True)\n\n    def test_dog(self):\n        self.assertEqual(animal_info(\"Dog\", 10.0), None)\n\n    def test_elephant_light(self):\n        self.assertEqual(animal_info(\"Elephant\", 4000.0), None)\n\n    def test_mouse_heavy(self):\n        self.assertEqual(animal_info(\"Mouse\", 0.1), None)\n\n    def test_edge_case_elephant(self):\n        self.assertEqual(animal_info(\"Elephant\", 5000.0), None)\n\n    def test_edge_case_mouse(self):\n        self.assertEqual(animal_info(\"Mouse\", 0.05), None)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 104,
    "programming_concept": "Functions as variables; Integer",
    "context": "Animals",
    "task_description": "### Practice Task: Animal Age in Human Years\n\nWrite a function called `animal_age_in_human_years(animal, age)`, which calculates the age of an animal in human years. The function should take two parameters: `animal` (a string indicating the type of animal, e.g., \"Dog\" or \"Cat\") and `age` (an integer representing the age of the animal in years).\n\nThe conversion should be as follows:\n- For Dogs: 1 animal year equals 7 human years.\n- For Cats: 1 animal year equals 5 human years.\n\nThe function should return the calculated age in human years.\n\nExample calls:\n- `animal_age_in_human_years(\"Dog\", 3)` should return 21.\n- `animal_age_in_human_years(\"Cat\", 4)` should return 20.",
    "code_skeleton": "def animal_age_in_human_years(animal, age):\n    ## Insert code here",
    "model_solution": "def animal_age_in_human_years(animal, age):\n    multiplier = 7 if animal == \"Dog\" else 5 if animal == \"Cat\" else 1\n    return age * multiplier\n\nprint(animal_age_in_human_years(\"Dog\", 3))  # 21\nprint(animal_age_in_human_years(\"Cat\", 4))  # 20",
    "unit_tests": "import unittest\n\nfrom main import animal_age_in_human_years\n\nclass TestAnimalAgeInHumanYears(unittest.TestCase):\n    def test_dog_age(self):\n        self.assertEqual(animal_age_in_human_years(\"Dog\", 3), 21)\n\n    def test_cat_age(self):\n        self.assertEqual(animal_age_in_human_years(\"Cat\", 4), 20)\n\n    def test_dog_age_boundary(self):\n        self.assertEqual(animal_age_in_human_years(\"Dog\", 0), 0)\n\n    def test_cat_age_boundary(self):\n        self.assertEqual(animal_age_in_human_years(\"Cat\", 0), 0)\n\n    def test_unknown_animal(self):\n        self.assertEqual(animal_age_in_human_years(\"Bird\", 3), 3)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 105,
    "programming_concept": "Logical operators (==, !=, <, >, <=, >=, or, and, not);While loops",
    "context": "Modern Gaming",
    "task_description": "### Exercise: Modern Gaming - Player Level\n\nWrite a function named `player_level(points)` that determines the level of a player based on their points. The function should return a message with the achieved level. Use logical operators and a while loop to check the points and determine the corresponding level.\n\nThe levels are defined as follows:\n- Level 1: 0 to 99 points\n- Level 2: 100 to 199 points\n- Level 3: 200 to 299 points\n- Level 4: 300 to 399 points\n- Level 5: 400 or more points\n\nExample call:\n```python\nprint(player_level(150))  # Output: \"You are on Level 2!\"\nprint(player_level(350))  # Output: \"You are on Level 4!\"\n```\n\nImplement the function `player_level(points)` that takes the player's points as an argument and returns the corresponding level as a message.",
    "code_skeleton": "def player_level(points):\n    ## Insert code here",
    "model_solution": "def player_level(points):\n    level = 1\n    while points >= 100:\n        points -= 100\n        level += 1\n    return f\"You are on Level {level}!\"\n\nprint(player_level(150))  # Output: \"You are on Level 2!\"\nprint(player_level(350))  # Output: \"You are on Level 4!\"",
    "unit_tests": "import unittest\n\nfrom main import player_level\n\nclass TestPlayerLevel(unittest.TestCase):\n    def test_level_1(self):\n        self.assertEqual(player_level(50), \"You are on Level 1!\")\n\n    def test_level_2(self):\n        self.assertEqual(player_level(150), \"You are on Level 2!\")\n\n    def test_level_3(self):\n        self.assertEqual(player_level(250), \"You are on Level 3!\")\n\n    def test_level_4(self):\n        self.assertEqual(player_level(350), \"You are on Level 4!\")\n\n    def test_level_5(self):\n        self.assertEqual(player_level(450), \"You are on Level 5!\")\n\n    def test_exact_boundary_level_1(self):\n        self.assertEqual(player_level(99), \"You are on Level 1!\")\n\n    def test_exact_boundary_level_2(self):\n        self.assertEqual(player_level(100), \"You are on Level 2!\")\n\n    def test_exact_boundary_level_3(self):\n        self.assertEqual(player_level(200), \"You are on Level 3!\")\n\n    def test_exact_boundary_level_4(self):\n        self.assertEqual(player_level(300), \"You are on Level 4!\")\n\n    def test_exact_boundary_level_5(self):\n        self.assertEqual(player_level(400), \"You are on Level 5!\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 106,
    "programming_concept": "Float;Tuple",
    "context": "Pets",
    "task_description": "### Exercise: Pet Weight\n\nWrite a function named `pet_weight(pets)` that takes a tuple of pets and their weights (in kilograms) as input. The function should calculate and return the average weight of the pets.\n\nExample call:\n```python\npets = ((\"Dog\", 20.5), (\"Cat\", 4.3), (\"Hamster\", 0.1))\naverage = pet_weight(pets)\nprint(average)  # Expected output: 8.3\n```\n\nImplement the function so that it correctly calculates and returns the average weight of the pets.",
    "code_skeleton": "def pet_weight(pets):\n    ## Insert code here",
    "model_solution": "def pet_weight(pets):\n    return sum(weight for _, weight in pets) / len(pets)\n\npets = ((\"Dog\", 20.5), (\"Cat\", 4.3), (\"Hamster\", 0.1))\naverage = pet_weight(pets)\nprint(average)  # Expected output: 8.3",
    "unit_tests": "import unittest\n\nclass TestPetWeight(unittest.TestCase):\n    def test_average_weight(self):\n        pets = ((\"Dog\", 20.5), (\"Cat\", 4.3), (\"Hamster\", 0.1))\n        self.assertAlmostEqual(pet_weight(pets), 8.3, places=1)\n\n    def test_empty_list(self):\n        pets = ()\n        with self.assertRaises(ZeroDivisionError):\n            pet_weight(pets)\n\n    def test_single_pet(self):\n        pets = ((\"Dog\", 20.5),)\n        self.assertEqual(pet_weight(pets), 20.5)\n\n    def test_mixed_weights(self):\n        pets = ((\"Dog\", 20.5), (\"Cat\", 4.3), (\"Hamster\", 0.1), (\"Parrot\", 1.2))\n        self.assertAlmostEqual(pet_weight(pets), 6.525, places=3)\n\n    def test_negative_weights(self):\n        pets = ((\"Dog\", -20.5), (\"Cat\", -4.3), (\"Hamster\", -0.1))\n        self.assertAlmostEqual(pet_weight(pets), -8.3, places=1)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 107,
    "programming_concept": "If-Else statements; Logical operators (==, !=, <, >, <=, >=, or, and, not)",
    "context": "Basketball",
    "task_description": "### Exercise: Basketball Player Evaluation\n\nWrite a function named `evaluate_player(points, assists, rebounds)`, which evaluates a basketball player's performance based on their statistics. The function should take three parameters:\n\n- `points`: Number of points scored\n- `assists`: Number of assists\n- `rebounds`: Number of rebounds\n\nThe evaluation is based on the following criteria:\n\n- If the player scored more than 20 points and provided more than 5 assists, the function should return \"Outstanding performance!\"\n- If the player scored more than 15 points or collected more than 10 rebounds, the function should return \"Good performance!\"\n- If the player scored less than 5 points and provided less than 3 assists, the function should return \"Poor performance!\"\n- In all other cases, the function should return \"Average performance\"\n\nExample calls:\n\n```python\nevaluate_player(25, 6, 8)  # returns \"Outstanding performance!\"\nevaluate_player(18, 4, 11)  # returns \"Good performance!\"\nevaluate_player(4, 2, 5)    # returns \"Poor performance!\"\nevaluate_player(10, 4, 7)   # returns \"Average performance\"\n```",
    "code_skeleton": "def evaluate_player(points, assists, rebounds):\n    ## Insert code here",
    "model_solution": "def evaluate_player(points, assists, rebounds):\n    if points > 20 and assists > 5:\n        return \"Outstanding performance!\"\n    elif points > 15 or rebounds > 10:\n        return \"Good performance!\"\n    elif points < 5 and assists < 3:\n        return \"Poor performance!\"\n    else:\n        return \"Average performance\"\n\n# Example calls\nprint(evaluate_player(25, 6, 8))  # Outstanding performance!\nprint(evaluate_player(18, 4, 11))  # Good performance!\nprint(evaluate_player(4, 2, 5))    # Poor performance!\nprint(evaluate_player(10, 4, 7))   # Average performance",
    "unit_tests": "import unittest\n\nfrom main import evaluate_player\n\nclass TestEvaluatePlayer(unittest.TestCase):\n    def test_outstanding_performance(self):\n        self.assertEqual(evaluate_player(25, 6, 8), \"Outstanding performance!\")\n\n    def test_good_performance_points(self):\n        self.assertEqual(evaluate_player(18, 4, 11), \"Good performance!\")\n\n    def test_good_performance_rebounds(self):\n        self.assertEqual(evaluate_player(10, 4, 11), \"Good performance!\")\n\n    def test_poor_performance(self):\n        self.assertEqual(evaluate_player(4, 2, 5), \"Poor performance!\")\n\n    def test_average_performance(self):\n        self.assertEqual(evaluate_player(10, 4, 7), \"Average performance\")\n\n    def test_edge_case_outstanding_performance(self):\n        self.assertEqual(evaluate_player(21, 6, 8), \"Average performance\")\n\n    def test_edge_case_good_performance(self):\n        self.assertEqual(evaluate_player(16, 4, 10), \"Good performance!\")\n\n    def test_edge_case_poor_performance(self):\n        self.assertEqual(evaluate_player(5, 2, 5), \"Average performance\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 108,
    "programming_concept": "Lists; Recursion",
    "context": "Amusement Park",
    "task_description": "### Exercise: Amusement Park - Counting Attractions\n\nWrite a recursive function named `count_attractions(attractions)` that counts the number of attractions in an amusement park. The list may contain individual attractions as well as further lists of attractions. The function should return the total number of attractions.\n\nExample:\n\n```python\nattractions = [\"Rollercoaster\", [\"Ferris Wheel\", \"Carousel\"], \"Haunted House\", [\"Waterslide\", [\"Log Flume\", \"Wave Pool\"]]]\n```\n\nA call to `count_attractions(attractions)` should return the total number of attractions in the list.\n\n```python\nprint(count_attractions(attractions))  # Output: 7\n```\n\nImplement the function `count_attractions(attractions)` that recursively counts the number of attractions in the list.",
    "code_skeleton": "def count_attractions(attractions):\n    ## Insert code here\n",
    "model_solution": "def count_attractions(attractions):\n    if not attractions:\n        return 0\n    if isinstance(attractions[0], list):\n        return count_attractions(attractions[0]) + count_attractions(attractions[1:])\n    return 1 + count_attractions(attractions[1:])\n\nattractions = [\"Rollercoaster\", [\"Ferris Wheel\", \"Carousel\"], \"Haunted House\", [\"Waterslide\", [\"Log Flume\", \"Wave Pool\"]]]\nprint(count_attractions(attractions))  # Output: 7\n",
    "unit_tests": "import unittest\n\nfrom main import count_attractions\n\nclass TestCountAttractions(unittest.TestCase):\n    def test_simple_list(self):\n        self.assertEqual(count_attractions([\"Rollercoaster\", \"Ferris Wheel\", \"Carousel\"]), 3)\n\n    def test_nested_list(self):\n        self.assertEqual(count_attractions([\"Rollercoaster\", [\"Ferris Wheel\", \"Carousel\"], \"Haunted House\"]), 4)\n\n    def test_deeply_nested_list(self):\n        self.assertEqual(count_attractions([\"Rollercoaster\", [\"Ferris Wheel\", [\"Carousel\", \"Haunted House\"]], \"Waterslide\"]), 5)\n\n    def test_empty_list(self):\n        self.assertEqual(count_attractions([]), 0)\n\n    def test_list_with_empty_sublists(self):\n        self.assertEqual(count_attractions([\"Rollercoaster\", [], \"Ferris Wheel\", []]), 2)\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 109,
    "programming_concept": "Functions as variables; Operations with numbers",
    "context": "Fishing",
    "task_description": "### Exercise: Functions as Variables and Operations with Numbers in the context of 'Fishing'\n\nWrite a function named `calculate_fish_weight(fish_weight_list)`, which takes a list of weights (in kilograms) of caught fish and calculates the total weight of the fish. The function should return the total weight of the fish.\n\nAdditionally, implement a second function `average_weight(fish_weight_list)` that calculates and returns the average weight of the fish.\n\nExample calls:\n```python\nfish_weight_list = [2.5, 3.0, 1.2, 4.8]\ntotal_weight = calculate_fish_weight(fish_weight_list)\nprint(total_weight)  # Output: 11.5\n\naverage = average_weight(fish_weight_list)\nprint(average)  # Output: 2.875\n```\n\nImplement both functions so that they operate correctly and deliver the expected results.",
    "code_skeleton": "def calculate_fish_weight(fish_weight_list):\n    ## Insert code here\n\ndef average_weight(fish_weight_list):\n    ## Insert code here\n",
    "model_solution": "def calculate_fish_weight(fish_weight_list):\n    return sum(fish_weight_list)\n\ndef average_weight(fish_weight_list):\n    return sum(fish_weight_list) / len(fish_weight_list)\n\nfish_weight_list = [2.5, 3.0, 1.2, 4.8]\ntotal_weight = calculate_fish_weight(fish_weight_list)\nprint(total_weight)  # Output: 11.5\n\naverage = average_weight(fish_weight_list)\nprint(average)  # Output: 2.875",
    "unit_tests": "import unittest\n\nfrom main import calculate_fish_weight, average_weight\n\nclass TestCalculateFishWeight(unittest.TestCase):\n    def test_simple_case(self):\n        self.assertEqual(calculate_fish_weight([2.5, 3.0, 1.2, 4.8]), 11.5)\n\n    def test_empty_list(self):\n        self.assertEqual(calculate_fish_weight([]), 0)\n\n    def test_single_element(self):\n        self.assertEqual(calculate_fish_weight([5.0]), 5.0)\n\n    def test_negative_weight(self):\n        self.assertEqual(calculate_fish_weight([2.5, -1.0, 3.0]), 4.5)\n\nclass TestAverageWeight(unittest.TestCase):\n    def test_simple_case(self):\n        self.assertEqual(average_weight([2.5, 3.0, 1.2, 4.8]), 2.875)\n\n    def test_empty_list(self):\n        with self.assertRaises(ZeroDivisionError):\n            average_weight([])\n\n    def test_single_element(self):\n        self.assertEqual(average_weight([5.0]), 5.0)\n\n    def test_negative_weight(self):\n        self.assertEqual(average_weight([2.5, -1.0, 3.0]), 1.5)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 110,
    "programming_concept": "Boolean and None; Logical operators (==, !=, <, >, <=, >=, or, and, not)",
    "context": "Social Media",
    "task_description": "### Exercise: Social Media - Check User Activity\n\nWrite a function named `is_active(username, posts, followers)`, which checks if a user is considered active on a social media platform. A user is considered active if they have posted at least 10 times **and** have more than 100 followers. The function should return a Boolean value (`True` or `False`).\n\nExample calls:\n- `is_active(\"MaxMustermann\", 15, 150)` returns `True`.\n- `is_active(\"ErikaMustermann\", 5, 200)` returns `False`.",
    "code_skeleton": "def is_active(username, posts, followers):\n    ## Insert code here\n",
    "model_solution": "def is_active(username, posts, followers):\n    return posts >= 10 and followers > 100\n\n# Example calls\nprint(is_active(\"MaxMustermann\", 15, 150))  # True\nprint(is_active(\"ErikaMustermann\", 5, 200))  # False",
    "unit_tests": "import unittest\nfrom main import is_active\n\nclass TestIsActive(unittest.TestCase):\n    def test_active(self):\n        self.assertTrue(is_active(\"MaxMustermann\", 15, 150))\n\n    def test_not_active_few_posts(self):\n        self.assertFalse(is_active(\"ErikaMustermann\", 5, 200))\n\n    def test_not_active_few_followers(self):\n        self.assertFalse(is_active(\"HansMustermann\", 20, 50))\n\n    def test_not_active_few_posts_and_followers(self):\n        self.assertFalse(is_active(\"AnnaMustermann\", 5, 50))\n\n    def test_boundary_posts(self):\n        self.assertFalse(is_active(\"BoundaryPosts\", 9, 150))\n        self.assertTrue(is_active(\"BoundaryPosts\", 10, 150))\n\n    def test_boundary_followers(self):\n        self.assertFalse(is_active(\"BoundaryFollowers\", 15, 100))\n        self.assertTrue(is_active(\"BoundaryFollowers\", 15, 101))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 111,
    "programming_concept": "Boolean and None; Float",
    "context": "Sports",
    "task_description": "### Exercise: Assessing Athletic Performance\n\nWrite a function named `evaluate_performance(points)`, which evaluates an athlete's performance based on the score. The function should return a `Boolean` value indicating whether the performance is considered \"good\" (True) or \"poor\" (False).\n\nAdditionally, the function should return `None` if the score is a `Float`, to indicate that the score is invalid.\n\n- If the score is 50 or more, the performance should be considered \"good\" (True).\n- If the score is less than 50, the performance should be considered \"poor\" (False).\n- If the score is a `Float`, the function should return `None`.\n\nExample calls:\n- `evaluate_performance(75)` returns `True`.\n- `evaluate_performance(30)` returns `False`.\n- `evaluate_performance(45.5)` returns `None`.",
    "code_skeleton": "def evaluate_performance(points):\n    ## Insert code here",
    "model_solution": "def evaluate_performance(points):\n    if isinstance(points, float):\n        return None\n    return points >= 50\n\n# Example calls\nprint(evaluate_performance(75))  # True\nprint(evaluate_performance(30))  # False\nprint(evaluate_performance(45.5))  # None",
    "unit_tests": "import unittest\n\nfrom main import evaluate_performance\n\nclass TestEvaluatePerformance(unittest.TestCase):\n    def test_good_performance(self):\n        self.assertTrue(evaluate_performance(75))\n\n    def test_poor_performance(self):\n        self.assertFalse(evaluate_performance(30))\n\n    def test_invalid_score(self):\n        self.assertIsNone(evaluate_performance(45.5))\n\n    def test_boundary_good(self):\n        self.assertTrue(evaluate_performance(50))\n\n    def test_boundary_poor(self):\n        self.assertFalse(evaluate_performance(49))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 112,
    "programming_concept": "Tuples; Functions as variables",
    "context": "Mental Health",
    "task_description": "### Exercise Task: Mental Health - Mood Analysis\n\nWrite a function named `mood_analysis(mood)` that takes a mood as a tuple and returns a corresponding message. The tuple consists of two elements: a string that describes the mood (e.g. 'happy', 'sad', 'stressed'), and an integer that indicates the intensity of the mood on a scale from 1 to 10.\n\nThe function should return a message that describes the mood and its intensity. Use a second function named `generate_message` that creates the message based on the given values.\n\nExample call:\n```python\nmood_analysis(('happy', 8))\n```\n\nExample output:\n```python\n'You feel very happy with an intensity of 8.'\n```",
    "code_skeleton": "def mood_analysis(mood):\n    ## Insert code here\n\n\ndef generate_message(mood, intensity):\n    ## Insert code here\n",
    "model_solution": "def mood_analysis(mood):\n    print(generate_message(mood[0], mood[1]))\n\n\ndef generate_message(mood, intensity):\n    return f'You feel very {mood} with an intensity of {intensity}.'\n\n\nmood_analysis(('happy', 8))\n",
    "unit_tests": "import unittest\nfrom main import mood_analysis, generate_message\n\n\nclass TestMoodAnalysis(unittest.TestCase):\n    def test_happy(self):\n        self.assertEqual(generate_message('happy', 8), 'You feel very happy with an intensity of 8.')\n\n    def test_sad(self):\n        self.assertEqual(generate_message('sad', 3), 'You feel very sad with an intensity of 3.')\n\n    def test_stressed(self):\n        self.assertEqual(generate_message('stressed', 10), 'You feel very stressed with an intensity of 10.')\n\n    def test_neutral(self):\n        self.assertEqual(generate_message('neutral', 5), 'You feel very neutral with an intensity of 5.')\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 113,
    "programming_concept": "Float;While loops",
    "context": "Amusement Park",
    "task_description": "Exercise Task: Amusement Park - Ride Check\n\nWrite a function named `ride_check(ride_duration)`, which checks the functionality of a ride in an amusement park. The function should receive a float number `ride_duration` as a parameter, which indicates the duration of a ride in minutes.\n\nThe function should use a while loop to verify the ride duration. If the ride duration is less than 2 minutes, the loop should increase the ride duration by 0.5 minutes and output a message that the ride duration is too short. Once the ride duration is 2 minutes or more, the loop should terminate, and a message should be output stating that the ride duration is acceptable.\n\nExample call:\n```python\nride_check(1.0)\n```\n\nExpected output:\n```\nRide duration too short: 1.0 minutes\nRide duration too short: 1.5 minutes\nRide duration acceptable: 2.0 minutes\n```",
    "code_skeleton": "def ride_check(ride_duration):\n    ## Insert code here",
    "model_solution": "def ride_check(ride_duration):\n    while ride_duration < 2:\n        print(f\"Ride duration too short: {ride_duration} minutes\")\n        ride_duration += 0.5\n    print(f\"Ride duration acceptable: {ride_duration} minutes\")\n\nride_check(1.0)",
    "unit_tests": "import unittest\nfrom io import StringIO\nimport sys\nfrom main import ride_check\n\nclass TestRideCheck(unittest.TestCase):\n    def test_ride_duration_too_short(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        ride_check(1.0)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Ride duration too short: 1.0 minutes\\nRide duration too short: 1.5 minutes\\nRide duration acceptable: 2.0 minutes\")\n\n    def test_ride_duration_acceptable(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        ride_check(2.0)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Ride duration acceptable: 2.0 minutes\")\n\n    def test_ride_duration_over_acceptable(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        ride_check(3.0)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Ride duration acceptable: 3.0 minutes\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 114,
    "programming_concept": "While loops; Higher-order functions",
    "context": "Cooking",
    "task_description": "### Practice Task: Cooking Recipe Counter\n\nWrite a function named `count_ingredients(recipe, criterion)` that receives a list of ingredients (`recipe`) and a function (`criterion`) as parameters. The function should count the number of ingredients in the recipe that meet the criterion. Use a `while` loop to iterate through the ingredients list.\n\nExample call:\n```python\ndef is_vegetable(ingredient):\n    vegetables = [\"Carrot\", \"Tomato\", \"Cucumber\", \"Pepper\"]\n    return ingredient in vegetables\n\nrecipe = [\"Carrot\", \"Chicken\", \"Tomato\", \"Rice\", \"Pepper\"]\nprint(count_ingredients(recipe, is_vegetable))  # Output: 3\n```\n\nIn this example, the function `is_vegetable` is used as the criterion to count the number of vegetable ingredients in the recipe.",
    "code_skeleton": "def count_ingredients(recipe, criterion):\n    ## Insert code here",
    "model_solution": "def count_ingredients(recipe, criterion):\n    count, i = 0, 0\n    while i < len(recipe):\n        if criterion(recipe[i]):\n            count += 1\n        i += 1\n    return count\n\ndef is_vegetable(ingredient):\n    vegetables = [\"Carrot\", \"Tomato\", \"Cucumber\", \"Pepper\"]\n    return ingredient in vegetables\n\nrecipe = [\"Carrot\", \"Chicken\", \"Tomato\", \"Rice\", \"Pepper\"]\nprint(count_ingredients(recipe, is_vegetable))  # Output: 3",
    "unit_tests": "import unittest\n\nfrom main import count_ingredients\n\ndef is_vegetable(ingredient):\n    vegetables = [\"Carrot\", \"Tomato\", \"Cucumber\", \"Pepper\"]\n    return ingredient in vegetables\n\ndef is_meat(ingredient):\n    meat = [\"Chicken\", \"Beef\", \"Pork\"]\n    return ingredient in meat\n\nclass TestCountIngredients(unittest.TestCase):\n    def test_vegetables(self):\n        recipe = [\"Carrot\", \"Chicken\", \"Tomato\", \"Rice\", \"Pepper\"]\n        self.assertEqual(count_ingredients(recipe, is_vegetable), 3)\n\n    def test_meat(self):\n        recipe = [\"Carrot\", \"Chicken\", \"Tomato\", \"Rice\", \"Pepper\"]\n        self.assertEqual(count_ingredients(recipe, is_meat), 1)\n\n    def test_empty_recipe(self):\n        recipe = []\n        self.assertEqual(count_ingredients(recipe, is_vegetable), 0)\n\n    def test_no_criterion_met(self):\n        recipe = [\"Rice\", \"Noodles\", \"Potatoes\"]\n        self.assertEqual(count_ingredients(recipe, is_vegetable), 0)\n\n    def test_all_criteria_met(self):\n        recipe = [\"Carrot\", \"Tomato\", \"Cucumber\", \"Pepper\"]\n        self.assertEqual(count_ingredients(recipe, is_vegetable), 4)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 115,
    "programming_concept": "Operations with numbers;Integer",
    "context": "Modern Gaming",
    "task_description": "### Exercise: Modern Gaming - Player Level Calculation\n\nIn modern video games, it is common for players to level up by collecting experience points (XP). Write a function named `calculate_level(xp)` that calculates and returns the current level of a player based on the collected experience points.\n\nThe level calculation follows this scheme:\n- Level 1: 0 - 999 XP\n- Level 2: 1000 - 1999 XP\n- Level 3: 2000 - 2999 XP\n- Level 4: 3000 - 3999 XP\n- Level 5: 4000 - 4999 XP\n- etc.\n\nEach additional level requires 1000 more XP.\n\nExample calls:\n- `calculate_level(1500)` returns `2`.\n- `calculate_level(4500)` returns `5`.\n\nImplement the function `calculate_level(xp)` that performs the calculation as described above.",
    "code_skeleton": "def calculate_level(xp):\n    ## Insert code here",
    "model_solution": "def calculate_level(xp):\n    return xp // 1000 + 1\n\n# Example calls\nprint(calculate_level(1500))  # Output: 2\nprint(calculate_level(4500))  # Output: 5",
    "unit_tests": "import unittest\nfrom main import calculate_level\n\nclass TestCalculateLevel(unittest.TestCase):\n    def test_level_1(self):\n        self.assertEqual(calculate_level(0), 1)\n        self.assertEqual(calculate_level(999), 1)\n\n    def test_level_2(self):\n        self.assertEqual(calculate_level(1000), 2)\n        self.assertEqual(calculate_level(1999), 2)\n\n    def test_level_3(self):\n        self.assertEqual(calculate_level(2000), 3)\n        self.assertEqual(calculate_level(2999), 3)\n\n    def test_level_4(self):\n        self.assertEqual(calculate_level(3000), 4)\n        self.assertEqual(calculate_level(3999), 4)\n\n    def test_level_5(self):\n        self.assertEqual(calculate_level(4000), 5)\n        self.assertEqual(calculate_level(4999), 5)\n\n    def test_high_levels(self):\n        self.assertEqual(calculate_level(10000), 11)\n        self.assertEqual(calculate_level(12345), 13)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 116,
    "programming_concept": "If-Else statements;Operations with numbers",
    "context": "Modern Gaming",
    "task_description": "### Exercise: Modern Gaming - Player Level\n\nWrite a function called `player_level(points)` that determines the level of a player based on their score. The function should return a message that indicates the player's level.\n\nThe levels are defined as follows:\n- Less than 1000 points: \"Beginner\"\n- 1000 to 4999 points: \"Intermediate\"\n- 5000 to 9999 points: \"Pro\"\n- 10000 or more points: \"Legend\"\n\nExample calls:\n- `player_level(750)` returns \"Beginner\".\n- `player_level(3200)` returns \"Intermediate\".\n- `player_level(7500)` returns \"Pro\".\n- `player_level(12000)` returns \"Legend\".\n",
    "code_skeleton": "def player_level(points):\n    ## Insert code here\n",
    "model_solution": "def player_level(points):\n    if points < 1000:\n        return \"Beginner\"\n    elif points < 5000:\n        return \"Intermediate\"\n    elif points < 10000:\n        return \"Pro\"\n    else:\n        return \"Legend\"\n\n# Example calls\nprint(player_level(750))    # Beginner\nprint(player_level(3200))   # Intermediate\nprint(player_level(7500))   # Pro\nprint(player_level(12000))  # Legend\n",
    "unit_tests": "import unittest\nfrom main import player_level\n\nclass TestPlayerLevel(unittest.TestCase):\n    def test_beginner(self):\n        self.assertEqual(player_level(750), \"Beginner\")\n\n    def test_intermediate(self):\n        self.assertEqual(player_level(3200), \"Intermediate\")\n\n    def test_pro(self):\n        self.assertEqual(player_level(7500), \"Pro\")\n\n    def test_legend(self):\n        self.assertEqual(player_level(12000), \"Legend\")\n\n    def test_boundary_beginner_intermediate(self):\n        self.assertEqual(player_level(1000), \"Intermediate\")\n\n    def test_boundary_intermediate_pro(self):\n        self.assertEqual(player_level(5000), \"Pro\")\n\n    def test_boundary_pro_legend(self):\n        self.assertEqual(player_level(10000), \"Legend\")\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 117,
    "programming_concept": "Boolean and None; Higher-order functions",
    "context": "Social Media",
    "task_description": "### Exercise: Social Media - Check User Activity\n\nWrite a function `is_active(user)` that checks if a user is active on a social network. A user is considered active if they have posted at least one post in the last 30 days. The function should return a Boolean value (`True` or `False`).\n\nAdditionally, implement a function `filter_active_users(user_list, filter_function)` that takes a list of users and a filter function as arguments. This function should return a new list containing only the active users.\n\nA user is represented by a dictionary containing at least the following keys:\n- `name`: The name of the user (String)\n- `last_post`: The date of the last post in days from the current date (Integer)\n\nExample:\n```python\nuser1 = {\"name\": \"Alice\", \"last_post\": 10}\nuser2 = {\"name\": \"Bob\", \"last_post\": 40}\nuser3 = {\"name\": \"Charlie\", \"last_post\": 5}\n\nuser_list = [user1, user2, user3]\n\n# Call of the function\nactive_users = filter_active_users(user_list, is_active)\n\n# Expected output: [{\"name\": \"Alice\", \"last_post\": 10}, {\"name\": \"Charlie\", \"last_post\": 5}]\nprint(active_users)\n```\n\nImplement the functions `is_active(user)` and `filter_active_users(user_list, filter_function)`.",
    "code_skeleton": "def is_active(user):\n    ## Insert code here\n\ndef filter_active_users(user_list, filter_function):\n    ## Insert code here\n",
    "model_solution": "def is_active(user):\n    return user['last_post'] <= 30\n\ndef filter_active_users(user_list, filter_function):\n    return [user for user in user_list if filter_function(user)]\n\nuser1 = {\"name\": \"Alice\", \"last_post\": 10}\nuser2 = {\"name\": \"Bob\", \"last_post\": 40}\nuser3 = {\"name\": \"Charlie\", \"last_post\": 5}\n\nuser_list = [user1, user2, user3]\n\nactive_users = filter_active_users(user_list, is_active)\n\nprint(active_users)",
    "unit_tests": "import unittest\nfrom main import is_active, filter_active_users\n\nclass TestSocialMedia(unittest.TestCase):\n    def test_is_active_true(self):\n        user = {\"name\": \"Alice\", \"last_post\": 10}\n        self.assertTrue(is_active(user))\n\n    def test_is_active_false(self):\n        user = {\"name\": \"Bob\", \"last_post\": 40}\n        self.assertFalse(is_active(user))\n\n    def test_filter_active_users(self):\n        user1 = {\"name\": \"Alice\", \"last_post\": 10}\n        user2 = {\"name\": \"Bob\", \"last_post\": 40}\n        user3 = {\"name\": \"Charlie\", \"last_post\": 5}\n        user_list = [user1, user2, user3]\n        expected_output = [user1, user3]\n        self.assertEqual(filter_active_users(user_list, is_active), expected_output)\n\n    def test_empty_list(self):\n        user_list = []\n        expected_output = []\n        self.assertEqual(filter_active_users(user_list, is_active), expected_output)\n\n    def test_all_inactive(self):\n        user1 = {\"name\": \"Alice\", \"last_post\": 40}\n        user2 = {\"name\": \"Bob\", \"last_post\": 50}\n        user_list = [user1, user2]\n        expected_output = []\n        self.assertEqual(filter_active_users(user_list, is_active), expected_output)\n\n    def test_all_active(self):\n        user1 = {\"name\": \"Alice\", \"last_post\": 10}\n        user2 = {\"name\": \"Bob\", \"last_post\": 20}\n        user_list = [user1, user2]\n        expected_output = [user1, user2]\n        self.assertEqual(filter_active_users(user_list, is_active), expected_output)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 118,
    "programming_concept": "Lists;Float",
    "context": "Olympics",
    "task_description": "### Exercise: Olympics - Calculate Average Score\n\nWrite a function named `average_score(scores)` that receives a list of scores (as float values) and calculates and returns the average score of athletes.\n\nExample call:\n```python\nscores = [9.5, 8.7, 9.8, 7.6, 8.9]\nprint(average_score(scores))  # Output: 8.9\n```\n\nThe function should calculate the average score of the athletes and return it as a float value.",
    "code_skeleton": "def average_score(scores):\n    ## Insert code here\n",
    "model_solution": "def average_score(scores):\n    return sum(scores) / len(scores)\n\nscores = [9.5, 8.7, 9.8, 7.6, 8.9]\nprint(average_score(scores))",
    "unit_tests": "import unittest\nfrom main import average_score\n\nclass TestAverageScore(unittest.TestCase):\n    def test_simple_list(self):\n        self.assertEqual(average_score([9.5, 8.7, 9.8, 7.6, 8.9]), 8.9)\n\n    def test_empty_list(self):\n        with self.assertRaises(ZeroDivisionError):\n            average_score([])\n\n    def test_single_element(self):\n        self.assertEqual(average_score([10.0]), 10.0)\n\n    def test_mixed_values(self):\n        self.assertEqual(average_score([1.0, 2.0, 3.0, 4.0, 5.0]), 3.0)\n\n    def test_negative_values(self):\n        self.assertEqual(average_score([-1.0, -2.0, -3.0, -4.0, -5.0]), -3.0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 119,
    "programming_concept": "While loops;Boolean and None",
    "context": "Streaming Services",
    "task_description": "### Practice Task: Streaming Services and Subscription Status\n\nWrite a function named `check_subscription_status(user_status)`, which checks the subscription status of a user in a streaming service. The function should use a while loop to check the status until the user either has an active subscription or the status is `None`.\n\n- If the status is `True`, the function should output \"Subscription active\".\n- If the status is `False`, the function should output \"Subscription inactive\".\n- If the status is `None`, the function should output \"Status unknown\" and end the loop.\n\nExample call:\n```python\ncheck_subscription_status([False, False, True, None])\n```\n\nExpected output:\n```\nSubscription inactive\nSubscription inactive\nSubscription active\n```",
    "code_skeleton": "def check_subscription_status(user_status):\n    ## Insert code here",
    "model_solution": "def check_subscription_status(user_status):\n    i = 0\n    while i < len(user_status):\n        status = user_status[i]\n        if status is True:\n            print(\"Subscription active\")\n            break\n        elif status is False:\n            print(\"Subscription inactive\")\n        elif status is None:\n            print(\"Status unknown\")\n            break\n        i += 1\n\ncheck_subscription_status([False, False, True, None])",
    "unit_tests": "import unittest\nfrom main import check_subscription_status\nfrom io import StringIO\nimport sys\n\nclass TestCheckSubscriptionStatus(unittest.TestCase):\n    def test_subscription_active(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        check_subscription_status([False, False, True, None])\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Subscription inactive\\nSubscription inactive\\nSubscription active\")\n\n    def test_subscription_inactive(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        check_subscription_status([False, None])\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Subscription inactive\\nStatus unknown\")\n\n    def test_status_unknown(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        check_subscription_status([None])\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"Status unknown\")\n\n    def test_empty_list(self):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        check_subscription_status([])\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue().strip(), \"\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 120,
    "programming_concept": "String; Lists",
    "context": "Film",
    "task_description": "### Exercise Task: Film Genres\n\nWrite a function named `film_genres(movies)` that takes a list of movie titles as input. Each movie title is a string that contains the title of the movie and the genre in parentheses, e.g., \"Inception (Sci-Fi)\". The function should return a list of the genres that appear in the input list. The genres should appear only once in the output list, even if they occur multiple times in the input list.\n\nExample call:\n```python\nmovies = [\"Inception (Sci-Fi)\", \"Titanic (Romance)\", \"The Matrix (Sci-Fi)\", \"The Notebook (Romance)\"]\nprint(film_genres(movies))\n```\n\nExpected Output:\n```\n['Sci-Fi', 'Romance']\n```",
    "code_skeleton": "def film_genres(movies):\n    ## Insert code here",
    "model_solution": "def film_genres(movies):\n    return list({movie.split('(')[-1].strip(')') for movie in movies})\n\nmovies = [\"Inception (Sci-Fi)\", \"Titanic (Romance)\", \"The Matrix (Sci-Fi)\", \"The Notebook (Romance)\"]\nprint(film_genres(movies))",
    "unit_tests": "import unittest\n\nclass TestFilmGenres(unittest.TestCase):\n    def test_simple_case(self):\n        movies = [\"Inception (Sci-Fi)\", \"Titanic (Romance)\", \"The Matrix (Sci-Fi)\", \"The Notebook (Romance)\"]\n        self.assertEqual(set(film_genres(movies)), {\"Sci-Fi\", \"Romance\"})\n\n    def test_empty_list(self):\n        movies = []\n        self.assertEqual(film_genres(movies), [])\n\n    def test_single_genre(self):\n        movies = [\"Inception (Sci-Fi)\"]\n        self.assertEqual(film_genres(movies), [\"Sci-Fi\"])\n\n    def test_multiple_genres(self):\n        movies = [\"Inception (Sci-Fi)\", \"Titanic (Romance)\", \"Avatar (Action)\", \"The Notebook (Romance)\"]\n        self.assertEqual(set(film_genres(movies)), {\"Sci-Fi\", \"Romance\", \"Action\"})\n\n    def test_various_cases(self):\n        movies = [\"Inception (Sci-Fi)\", \"Titanic (romance)\", \"Avatar (Action)\", \"The Notebook (Romance)\"]\n        self.assertEqual(set(film_genres(movies)), {\"Sci-Fi\", \"romance\", \"Action\", \"Romance\"})\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 121,
    "programming_concept": "Lists;If-Else statements",
    "context": "Rugby",
    "task_description": "### Exercise: Filter Rugby Players\n\nWrite a function named `filter_players(player_list)` that takes a list of rugby player names and their positions as input. The function should return a new list containing only the names of players who play in the position \"Forward\".\n\nThe input list is formatted as:\n```python\n[(\"Name1\", \"Position1\"), (\"Name2\", \"Position2\"), ...]\n```\n\nExample:\n```python\nplayer_list = [(\"Max\", \"Forward\"), (\"Tom\", \"Defender\"), (\"Lukas\", \"Forward\"), (\"Paul\", \"Winger\")]\n```\n\nCall:\n```python\nfilter_players(player_list)\n```\n\nExpected Output:\n```python\n[\"Max\", \"Lukas\"]\n```\n\nImplement the function `filter_players(player_list)` to fulfill the above task.",
    "code_skeleton": "def filter_players(player_list):\n    ## Insert code here",
    "model_solution": "def filter_players(player_list):\n    return [name for name, position in player_list if position == \"Forward\"]\n\nplayer_list = [(\"Max\", \"Forward\"), (\"Tom\", \"Defender\"), (\"Lukas\", \"Forward\"), (\"Paul\", \"Winger\")]\nprint(filter_players(player_list))",
    "unit_tests": "import unittest\nfrom main import filter_players\n\nclass TestFilterPlayers(unittest.TestCase):\n    def test_multiple_forwards(self):\n        self.assertEqual(filter_players([(\"Max\", \"Forward\"), (\"Tom\", \"Defender\"), (\"Lukas\", \"Forward\"), (\"Paul\", \"Winger\")]), [\"Max\", \"Lukas\"])\n\n    def test_no_forwards(self):\n        self.assertEqual(filter_players([(\"Tom\", \"Defender\"), (\"Paul\", \"Winger\")]), [])\n\n    def test_all_forwards(self):\n        self.assertEqual(filter_players([(\"Max\", \"Forward\"), (\"Lukas\", \"Forward\")]), [\"Max\", \"Lukas\"])\n\n    def test_empty_list(self):\n        self.assertEqual(filter_players([]), [])\n\n    def test_single_forward(self):\n        self.assertEqual(filter_players([(\"Max\", \"Forward\")]), [\"Max\"])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 122,
    "programming_concept": "For loops; While loops",
    "context": "Amusement Park",
    "task_description": "### Exercise: Amusement Park - Count Rides\n\nWrite a function named `count_rides(rides)`, which receives a list of rides at an amusement park as an argument. The function should count and return the number of rides that perform a certain minimum number of rides per day. Use a for loop or while loop to iterate through the rides and perform the counting.\n\nThe list `rides` contains tuples, where each tuple includes the name of the ride and the number of rides per day. The minimum number of rides per day is 10.\n\nExample call:\n```python\nrides = [(\"Roller Coaster\", 15), (\"Ferris Wheel\", 8), (\"Carousel\", 12)]\nprint(count_rides(rides))  # Output: 2\n```\n\nIn this example, there are two rides that perform at least 10 rides per day: \"Roller Coaster\" and \"Carousel\".",
    "code_skeleton": "def count_rides(rides):\n    ## Insert code here",
    "model_solution": "def count_rides(rides):\n    return sum(1 for _, num_rides in rides if num_rides >= 10)\n\nrides = [(\"Roller Coaster\", 15), (\"Ferris Wheel\", 8), (\"Carousel\", 12)]\nprint(count_rides(rides))  # Output: 2",
    "unit_tests": "import unittest\nfrom main import count_rides\n\nclass TestCountRides(unittest.TestCase):\n    def test_count_all_rides(self):\n        self.assertEqual(count_rides([(\"Roller Coaster\", 15), (\"Ferris Wheel\", 8), (\"Carousel\", 12)]), 2)\n\n    def test_no_rides(self):\n        self.assertEqual(count_rides([]), 0)\n\n    def test_all_below_minimum(self):\n        self.assertEqual(count_rides([(\"Roller Coaster\", 5), (\"Ferris Wheel\", 3), (\"Carousel\", 2)]), 0)\n\n    def test_all_above_minimum(self):\n        self.assertEqual(count_rides([(\"Roller Coaster\", 15), (\"Ferris Wheel\", 18), (\"Carousel\", 12)]), 3)\n\n    def test_exactly_minimum(self):\n        self.assertEqual(count_rides([(\"Roller Coaster\", 10), (\"Ferris Wheel\", 10), (\"Carousel\", 10)]), 3)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 123,
    "programming_concept": "While loops;If-Else statements",
    "context": "Music",
    "task_description": "### Exercise Task: Music Playlist\n\nWrite a function named `play_playlist(songs)` that takes a list of songs as an argument. The function should play each song in the list until a specific song named \"Stop\" is found. If the song \"Stop\" is found, the playback should stop. If the song \"Stop\" is not in the list, the entire playlist should be played.\n\nExample call:\n```python\nplay_playlist([\"Song1\", \"Song2\", \"Stop\", \"Song3\"])\n```\n\nExpected behavior:\n- \"Song1\" is played.\n- \"Song2\" is played.\n- Playback is stopped because \"Stop\" was found.",
    "code_skeleton": "def play_playlist(songs):\n    ## Insert code here",
    "model_solution": "def play_playlist(songs):\n    for song in songs:\n        if song == \"Stop\":\n            break\n        print(f\"Playing {song}\")\n\nplay_playlist([\"Song1\", \"Song2\", \"Stop\", \"Song3\"])",
    "unit_tests": "import unittest\nfrom main import play_playlist\nfrom io import StringIO\nimport sys\n\nclass TestPlayPlaylist(unittest.TestCase):\n    def test_playlist_with_stop(self):\n        songs = [\"Song1\", \"Song2\", \"Stop\", \"Song3\"]\n        expected_output = \"Playing Song1\\nPlaying Song2\\n\"\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        play_playlist(songs)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue(), expected_output)\n\n    def test_playlist_without_stop(self):\n        songs = [\"Song1\", \"Song2\", \"Song3\"]\n        expected_output = \"Playing Song1\\nPlaying Song2\\nPlaying Song3\\n\"\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        play_playlist(songs)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue(), expected_output)\n\n    def test_empty_playlist(self):\n        songs = []\n        expected_output = \"\"\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        play_playlist(songs)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue(), expected_output)\n\n    def test_playlist_only_stop(self):\n        songs = [\"Stop\"]\n        expected_output = \"\"\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        play_playlist(songs)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue(), expected_output)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 124,
    "programming_concept": "Functions as variables; Logical operators (==, !=, <, >, <=, >=, or, and, not)",
    "context": "Aquarium",
    "task_description": "### Exercise Task: Aquarium Temperature Control\n\nWrite a function named `check_temperature(temperature)` that verifies if the temperature in an aquarium is within the optimal range. The optimal temperature range for the aquarium is between 22 and 28 degrees Celsius (inclusive). The function should return `True` if the temperature is within the optimal range, and `False` if it is outside this range.\n\nAdditionally, implement a function `is_too_hot_or_too_cold(temperature)` that checks if the temperature is either too hot (above 28 degrees) or too cold (below 22 degrees). This function should return `True` if the temperature is outside the optimal range, and `False` if it is within the range.\n\nExample calls:\n- `check_temperature(25)` returns `True`.\n- `check_temperature(30)` returns `False`.\n- `is_too_hot_or_too_cold(18)` returns `True`.\n- `is_too_hot_or_too_cold(24)` returns `False`.",
    "code_skeleton": "def check_temperature(temperature):\n    ## Insert code here\n\ndef is_too_hot_or_too_cold(temperature):\n    ## Insert code here\n",
    "model_solution": "def check_temperature(temperature):\n    return 22 <= temperature <= 28\n\n\ndef is_too_hot_or_too_cold(temperature):\n    return temperature < 22 or temperature > 28\n\n# Example calls\nprint(check_temperature(25))  # True\nprint(check_temperature(30))  # False\nprint(is_too_hot_or_too_cold(18))  # True\nprint(is_too_hot_or_too_cold(24))  # False\n",
    "unit_tests": "import unittest\n\nfrom main import check_temperature, is_too_hot_or_too_cold\n\nclass TestAquariumTemperature(unittest.TestCase):\n    def test_check_temperature_optimal(self):\n        self.assertTrue(check_temperature(25))\n\n    def test_check_temperature_too_hot(self):\n        self.assertFalse(check_temperature(30))\n\n    def test_check_temperature_too_cold(self):\n        self.assertFalse(check_temperature(18))\n\n    def test_is_too_hot_or_too_cold_too_hot(self):\n        self.assertTrue(is_too_hot_or_too_cold(30))\n\n    def test_is_too_hot_or_too_cold_too_cold(self):\n        self.assertTrue(is_too_hot_or_too_cold(18))\n\n    def test_is_too_hot_or_too_cold_optimal(self):\n        self.assertFalse(is_too_hot_or_too_cold(24))\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 125,
    "programming_concept": "If-Else statements; For loops",
    "context": "Cooking",
    "task_description": "### Exercise: Recipe Selection Based on Ingredients\n\nWrite a function named `recipe_selection(ingredients)` that receives a list of ingredients as an argument and selects a recipe based on the available ingredients. The function should consider the following recipes:\n\n1. **Pasta with Tomato Sauce**:\n   - Ingredients: Pasta, Tomatoes, Garlic\n2. **Vegetable Stir Fry**:\n   - Ingredients: Bell Pepper, Zucchini, Onions\n3. **Fruit Salad**:\n   - Ingredients: Apple, Banana, Orange\n\nThe function should check if all the necessary ingredients for a recipe are included in the given list. If multiple recipes are possible, the first fitting recipe should be selected. If no recipe is possible, the function should return \"No suitable recipe found\".\n\nExample call:\n```python\ningredients = [\"Pasta\", \"Tomatoes\", \"Garlic\", \"Apple\"]\nprint(recipe_selection(ingredients))\n```\n\nExpected output:\n```\nPasta with Tomato Sauce\n```",
    "code_skeleton": "def recipe_selection(ingredients):\n    ## Insert code here",
    "model_solution": "def recipe_selection(ingredients):\n    recipes = {\n        \"Pasta with Tomato Sauce\": {\"Pasta\", \"Tomatoes\", \"Garlic\"},\n        \"Vegetable Stir Fry\": {\"Bell Pepper\", \"Zucchini\", \"Onions\"},\n        \"Fruit Salad\": {\"Apple\", \"Banana\", \"Orange\"}\n    }\n    for recipe, required_ingredients in recipes.items():\n        if required_ingredients.issubset(ingredients):\n            return recipe\n    return \"No suitable recipe found\"\n\ningredients = [\"Pasta\", \"Tomatoes\", \"Garlic\", \"Apple\"]\nprint(recipe_selection(ingredients))",
    "unit_tests": "import unittest\nfrom main import recipe_selection\n\nclass TestRecipeSelection(unittest.TestCase):\n    def test_pasta_with_tomato_sauce(self):\n        self.assertEqual(recipe_selection([\"Pasta\", \"Tomatoes\", \"Garlic\"]), \"Pasta with Tomato Sauce\")\n\n    def test_vegetable_stir_fry(self):\n        self.assertEqual(recipe_selection([\"Bell Pepper\", \"Zucchini\", \"Onions\"]), \"Vegetable Stir Fry\")\n\n    def test_fruit_salad(self):\n        self.assertEqual(recipe_selection([\"Apple\", \"Banana\", \"Orange\"]), \"Fruit Salad\")\n\n    def test_multiple_recipes(self):\n        self.assertEqual(recipe_selection([\"Pasta\", \"Tomatoes\", \"Garlic\", \"Bell Pepper\", \"Zucchini\", \"Onions\"]), \"Pasta with Tomato Sauce\")\n\n    def test_no_suitable_recipes(self):\n        self.assertEqual(recipe_selection([\"Rice\", \"Chicken\", \"Soy sauce\"]), \"No suitable recipe found\")\n\n    def test_empty_ingredients_list(self):\n        self.assertEqual(recipe_selection([]), \"No suitable recipe found\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 126,
    "programming_concept": "Float; Lists",
    "context": "Animals",
    "task_description": "### Practice Task: Average Weight of Animals\n\nWrite a function named `average_weight(animals)`, which takes a list of floats as an argument. This list represents the weights of different animals in kilograms. The function should calculate and return the average weight of the animals.\n\nExample call:\n```python\nweights = [4.5, 7.2, 3.8, 5.0, 6.1]\nprint(average_weight(weights))  # Output: 5.32\n```\n\nNote: The output may vary slightly due to rounding differences.",
    "code_skeleton": "def average_weight(animals):\n    ## Insert code here",
    "model_solution": "def average_weight(animals):\n    return sum(animals) / len(animals)\n\nweights = [4.5, 7.2, 3.8, 5.0, 6.1]\nprint(average_weight(weights))",
    "unit_tests": "import unittest\nfrom main import average_weight\n\nclass TestAverageWeight(unittest.TestCase):\n    def test_average(self):\n        self.assertAlmostEqual(average_weight([4.5, 7.2, 3.8, 5.0, 6.1]), 5.32, places=2)\n\n    def test_empty_list(self):\n        with self.assertRaises(ZeroDivisionError):\n            average_weight([])\n\n    def test_single_element(self):\n        self.assertEqual(average_weight([5.0]), 5.0)\n\n    def test_integers(self):\n        self.assertEqual(average_weight([1, 2, 3, 4, 5]), 3.0)\n\n    def test_mixed_numbers(self):\n        self.assertAlmostEqual(average_weight([1.5, 2.5, 3.5, 4.5, 5.5]), 3.5, places=2)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 127,
    "programming_concept": "Tuples;Integer",
    "context": "Restaurant",
    "task_description": "### Practice Task: Restaurant Order\n\nWrite a function named `take_order(order)` that receives a tuple with two elements as an argument. The first element is the name of the dish (string) and the second element is the number of portions ordered (integer). The function should return a message that summarizes the order.\n\nExample call: `take_order((\"Spaghetti Carbonara\", 3))` returns `\"You have ordered 3 portions of Spaghetti Carbonara.\"`",
    "code_skeleton": "def take_order(order):\n    ## Insert code here",
    "model_solution": "def take_order(order):\n    return f\"You have ordered {order[1]} portions of {order[0]}.\"\n\nprint(take_order((\"Spaghetti Carbonara\", 3)))",
    "unit_tests": "import unittest\n\nfrom main import take_order\n\nclass TestTakeOrder(unittest.TestCase):\n    def test_simple_order(self):\n        self.assertEqual(take_order((\"Spaghetti Carbonara\", 3)), \"You have ordered 3 portions of Spaghetti Carbonara.\")\n\n    def test_one_portion(self):\n        self.assertEqual(take_order((\"Pizza Margherita\", 1)), \"You have ordered 1 portion of Pizza Margherita.\")\n\n    def test_zero_portions(self):\n        self.assertEqual(take_order((\"Salad\", 0)), \"You have ordered 0 portions of Salad.\")\n\n    def test_large_order(self):\n        self.assertEqual(take_order((\"Burger\", 100)), \"You have ordered 100 portions of Burger.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 128,
    "programming_concept": "Boolean and None; For loops",
    "context": "Fishing",
    "task_description": "### Exercise: Counting Fish\n\nWrite a function named `count_fish(fish_list)`, which takes a list of fish as input. Each entry in the list is either the name of a fish (as a string) or `None`, if no fish was caught. The function should count and return the number of fish caught. \n\nExample call:\n```python\nfish_list = [\"Pike\", None, \"Carp\", \"Trout\", None, \"Perch\"]\nprint(count_fish(fish_list))  # Output: 4\n```\n\n### Requirements:\n- The function should accept a list of fish as an argument.\n- The function should count and return the number of fish caught (non-`None` entries).\n- Use a `for` loop to iterate through the list.\n- Use Boolean values to check if an entry is `None` or not.",
    "code_skeleton": "def count_fish(fish_list):\n    ## Insert code here",
    "model_solution": "def count_fish(fish_list):\n    return sum(1 for fish in fish_list if fish)\n\nfish_list = [\"Pike\", None, \"Carp\", \"Trout\", None, \"Perch\"]\nprint(count_fish(fish_list))  # Output: 4",
    "unit_tests": "import unittest\n\nfrom main import count_fish\n\nclass TestCountFish(unittest.TestCase):\n    def test_simple_list(self):\n        self.assertEqual(count_fish([\"Pike\", None, \"Carp\", \"Trout\", None, \"Perch\"]), 4)\n\n    def test_empty_list(self):\n        self.assertEqual(count_fish([]), 0)\n\n    def test_all_none(self):\n        self.assertEqual(count_fish([None, None, None]), 0)\n\n    def test_all_fish(self):\n        self.assertEqual(count_fish([\"Pike\", \"Carp\", \"Trout\", \"Perch\"]), 4)\n\n    def test_mixed_list(self):\n        self.assertEqual(count_fish([None, \"Pike\", None, \"Carp\", \"Trout\", None, \"Perch\", None]), 4)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 129,
    "programming_concept": "Boolean and None;For loops",
    "context": "Animals",
    "task_description": "### Exercise: Counting Animals\n\nWrite a function named `count_animals(animal_list)` that receives a list of animals as an argument. The function should count the number of animals in the list and return it. If the list is empty, the function should return `None`.\n\nExample calls:\n\n- `count_animals([\"Dog\", \"Cat\", \"Bird\"])` returns `3`.\n- `count_animals([])` returns `None`.\n\nUse a `for` loop to count the animals in the list.",
    "code_skeleton": "def count_animals(animal_list):\n    ## Insert code here",
    "model_solution": "def count_animals(animal_list):\n    if not animal_list:\n        return None\n    return len(animal_list)\n\nprint(count_animals([\"Dog\", \"Cat\", \"Bird\"]))  # Output: 3\nprint(count_animals([]))  # Output: None",
    "unit_tests": "import unittest\n\nfrom main import count_animals\n\nclass TestCountAnimals(unittest.TestCase):\n    def test_multiple_animals(self):\n        self.assertEqual(count_animals([\"Dog\", \"Cat\", \"Bird\"]), 3)\n\n    def test_empty_list(self):\n        self.assertEqual(count_animals([]), None)\n\n    def test_one_animal(self):\n        self.assertEqual(count_animals([\"Dog\"]), 1)\n\n    def test_two_animals(self):\n        self.assertEqual(count_animals([\"Dog\", \"Cat\"]), 2)\n\n    def test_many_animals(self):\n        self.assertEqual(count_animals([\"Dog\", \"Cat\", \"Bird\", \"Fish\", \"Mouse\"]), 5)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 130,
    "programming_concept": "If-Else statements; String",
    "context": "Amusement Park",
    "task_description": "### Exercise: Admission Control in the Amusement Park\n\nWrite a function named `admission_allowed(age, height)` that checks if a person is allowed into a specific attraction in the amusement park. The function should take two parameters: `age` (an integer) and `height` (a float, representing the height in meters).\n\nThe conditions for admission are:\n- The person must be at least 12 years old.\n- The person must be at least 1.40 meters tall.\n\nThe function should return `True` if both conditions are met, and `False` if one or both conditions are not met.\n\nExample calls:\n- `admission_allowed(14, 1.50)` returns `True`.\n- `admission_allowed(10, 1.50)` returns `False`.\n- `admission_allowed(14, 1.35)` returns `False`.",
    "code_skeleton": "def admission_allowed(age, height):\n    ## Insert code here",
    "model_solution": "def admission_allowed(age, height):\n    return age >= 12 and height >= 1.4\n\nprint(admission_allowed(14, 1.50))  # True\nprint(admission_allowed(10, 1.50))  # False\nprint(admission_allowed(14, 1.35))  # False",
    "unit_tests": "import unittest\nfrom main import admission_allowed\n\nclass TestAdmissionAllowed(unittest.TestCase):\n    def test_allowed(self):\n        self.assertTrue(admission_allowed(14, 1.50))\n\n    def test_too_young(self):\n        self.assertFalse(admission_allowed(10, 1.50))\n\n    def test_too_short(self):\n        self.assertFalse(admission_allowed(14, 1.35))\n\n    def test_age_boundary(self):\n        self.assertTrue(admission_allowed(12, 1.50))\n\n    def test_height_boundary(self):\n        self.assertTrue(admission_allowed(14, 1.40))\n\n    def test_both_boundaries(self):\n        self.assertTrue(admission_allowed(12, 1.40))\n\n    def test_under_boundary_age(self):\n        self.assertFalse(admission_allowed(11, 1.40))\n\n    def test_under_boundary_height(self):\n        self.assertFalse(admission_allowed(12, 1.39))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 131,
    "programming_concept": "For loops; If-Else statements",
    "context": "Restaurant",
    "task_description": "### Exercise: Restaurant Orders\n\nWrite a function named `check_order(orders)`, which takes a list of orders as an argument. Each order is a dictionary with the keys \"dish\" and \"quantity\". The function should iterate over the orders and check if the quantity of the ordered dishes is greater than 0. If the quantity is greater than 0, the function should print a message stating that the order has been accepted. Otherwise, the function should print a message stating that the order has been declined.\n\nExample call:\n```python\norders = [\n    {\"dish\": \"Pizza\", \"quantity\": 2},\n    {\"dish\": \"Salad\", \"quantity\": 0},\n    {\"dish\": \"Pasta\", \"quantity\": 3}\n]\ncheck_order(orders)\n```\n\nExpected output:\n```\nOrder for Pizza accepted.\nOrder for Salad declined.\nOrder for Pasta accepted.\n```",
    "code_skeleton": "def check_order(orders):\n    ## Insert code here",
    "model_solution": "def check_order(orders):\n    for o in orders:\n        if o[\"quantity\"] > 0:\n            print(f\"Order for {o['dish']} accepted.\")\n        else:\n            print(f\"Order for {o['dish']} declined.\")\n\norders = [\n    {\"dish\": \"Pizza\", \"quantity\": 2},\n    {\"dish\": \"Salad\", \"quantity\": 0},\n    {\"dish\": \"Pasta\", \"quantity\": 3}\n]\ncheck_order(orders)",
    "unit_tests": "import unittest\nfrom io import StringIO\nimport sys\nfrom main import check_order\n\nclass TestCheckOrder(unittest.TestCase):\n    def test_all_orders_accepted(self):\n        orders = [\n            {\"dish\": \"Pizza\", \"quantity\": 2},\n            {\"dish\": \"Pasta\", \"quantity\": 3}\n        ]\n        expected_output = \"Order for Pizza accepted.\\nOrder for Pasta accepted.\\n\"\n        self._run_test(orders, expected_output)\n\n    def test_all_orders_declined(self):\n        orders = [\n            {\"dish\": \"Salad\", \"quantity\": 0},\n            {\"dish\": \"Soup\", \"quantity\": 0}\n        ]\n        expected_output = \"Order for Salad declined.\\nOrder for Soup declined.\\n\"\n        self._run_test(orders, expected_output)\n\n    def test_mixed_orders(self):\n        orders = [\n            {\"dish\": \"Pizza\", \"quantity\": 2},\n            {\"dish\": \"Salad\", \"quantity\": 0},\n            {\"dish\": \"Pasta\", \"quantity\": 3}\n        ]\n        expected_output = \"Order for Pizza accepted.\\nOrder for Salad declined.\\nOrder for Pasta accepted.\\n\"\n        self._run_test(orders, expected_output)\n\n    def test_empty_order_list(self):\n        orders = []\n        expected_output = \"\"\n        self._run_test(orders, expected_output)\n\n    def _run_test(self, orders, expected_output):\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        check_order(orders)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue(), expected_output)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 132,
    "programming_concept": "Recursion; Functions as variables",
    "context": "Basketball",
    "task_description": "### Practice Task: Recursive Calculation of Basketball Points\n\nWrite a recursive function named `calculate_points(player_points)` that calculates the total score of a basketball player. The function should take a list of points as an argument, where each entry in the list represents the points from a single game. The function should sum the points of all games and return the result.\n\nExample call:\n```python\npoints = [10, 15, 20, 5]\ntotal_points = calculate_points(points)\nprint(total_points)  # Output: 50\n```\n\n### Requirements:\n- The function `calculate_points` should be implemented recursively.\n- The function should sum the points of all games in the list and return the result.\n- The function should not expect any input from standard input.\n\n### Example:\n```python\npoints = [12, 8, 25, 10]\ntotal_points = calculate_points(points)\nprint(total_points)  # Output: 55\n```\n\nImplement the function `calculate_points(player_points)` in Python.",
    "code_skeleton": "def calculate_points(player_points):\n    ## Insert code here",
    "model_solution": "def calculate_points(player_points):\n    if not player_points:\n        return 0\n    return player_points[0] + calculate_points(player_points[1:])\n\npoints = [12, 8, 25, 10]\ntotal_points = calculate_points(points)\nprint(total_points)  # Output: 55",
    "unit_tests": "import unittest\nfrom main import calculate_points\n\nclass TestCalculatePoints(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(calculate_points([]), 0)\n\n    def test_single_game(self):\n        self.assertEqual(calculate_points([10]), 10)\n\n    def test_multiple_games(self):\n        self.assertEqual(calculate_points([10, 15, 20, 5]), 50)\n\n    def test_negative_points(self):\n        self.assertEqual(calculate_points([10, -5, 20, -10]), 15)\n\n    def test_large_numbers(self):\n        self.assertEqual(calculate_points([1000, 2000, 3000, 4000]), 10000)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 133,
    "programming_concept": "Recursion;For loops",
    "context": "Basketball",
    "task_description": "### Practice Task: Basketball Score\n\nWrite a function named `calculate_score(player_points)` that takes a list of points scored by different basketball players in a game as an argument. The function should recursively calculate and return the sum of all points. Additionally, use a for loop to output the points of each player.\n\nExample:\n```python\nplayer_points = [12, 15, 10, 8, 20]\n```\n\nFunction Call:\n```python\ncalculate_score(player_points)\n```\n\nExpected Output:\n```\nPlayer 1 scored 12 points.\nPlayer 2 scored 15 points.\nPlayer 3 scored 10 points.\nPlayer 4 scored 8 points.\nPlayer 5 scored 20 points.\n```\n\nReturn Value:\n```\n65\n```\n",
    "code_skeleton": "def calculate_score(player_points):\n    ## Insert code here",
    "model_solution": "def calculate_score(player_points):\n    def sum_points(points):\n        if not points:\n            return 0\n        return points[0] + sum_points(points[1:])\n    \n    for i, points in enumerate(player_points, 1):\n        print(f\"Player {i} scored {points} points.\")\n    \n    return sum_points(player_points)\n\nplayer_points = [12, 15, 10, 8, 20]\nprint(calculate_score(player_points))",
    "unit_tests": "import unittest\nfrom main import calculate_score\n\nclass TestCalculateScore(unittest.TestCase):\n    def test_simple_list(self):\n        self.assertEqual(calculate_score([12, 15, 10, 8, 20]), 65)\n\n    def test_empty_list(self):\n        self.assertEqual(calculate_score([]), 0)\n\n    def test_single_element(self):\n        self.assertEqual(calculate_score([25]), 25)\n\n    def test_negative_and_positive(self):\n        self.assertEqual(calculate_score([-5, 10, -3, 8]), 10)\n\n    def test_large_numbers(self):\n        self.assertEqual(calculate_score([1000, 2000, 3000, 4000]), 10000)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 134,
    "programming_concept": "Functions as variables; Boolean and None",
    "context": "Pets",
    "task_description": "### Exercise Task: Pets and Functions\n\nWrite a function named `is_pet(name)`, that checks if the passed name belongs to a list of known pets. The list of known pets is: `['Dog', 'Cat', 'Hamster', 'Parrot', 'Goldfish']`. The function should return `True` if the name is in the list, and `False` if not.\n\nAdditionally, implement a function `is_pet_or_none(name)` that calls `is_pet(name)` and returns `None` if the name is not in the list of known pets.\n\nExample Calls:\n- `is_pet('Dog')` returns `True`.\n- `is_pet('Elephant')` returns `False`.\n- `is_pet_or_none('Cat')` returns `True`.\n- `is_pet_or_none('Elephant')` returns `None`.",
    "code_skeleton": "def is_pet(name):\n    ## Insert code here\n\n\n\ndef is_pet_or_none(name):\n    ## Insert code here\n",
    "model_solution": "def is_pet(name):\n    return name in ['Dog', 'Cat', 'Hamster', 'Parrot', 'Goldfish']\n\n\ndef is_pet_or_none(name):\n    return is_pet(name) or None\n\n\n# Example calls\nprint(is_pet('Dog'))  # True\nprint(is_pet('Elephant'))  # False\nprint(is_pet_or_none('Cat'))  # True\nprint(is_pet_or_none('Elephant'))  # None\n",
    "unit_tests": "import unittest\nfrom main import is_pet, is_pet_or_none\n\n\nclass TestIsPet(unittest.TestCase):\n    def test_dog(self):\n        self.assertTrue(is_pet('Dog'))\n\n\n    def test_elephant(self):\n        self.assertFalse(is_pet('Elephant'))\n\n\n    def test_cat(self):\n        self.assertTrue(is_pet('Cat'))\n\n\n    def test_goldfish(self):\n        self.assertTrue(is_pet('Goldfish'))\n\n\n    def test_empty_string(self):\n        self.assertFalse(is_pet(''))\n\n\n\nclass TestIsPetOrNone(unittest.TestCase):\n    def test_dog(self):\n        self.assertTrue(is_pet_or_none('Dog'))\n\n\n    def test_elephant(self):\n        self.assertIsNone(is_pet_or_none('Elephant'))\n\n\n    def test_cat(self):\n        self.assertTrue(is_pet_or_none('Cat'))\n\n\n    def test_goldfish(self):\n        self.assertTrue(is_pet_or_none('Goldfish'))\n\n\n    def test_empty_string(self):\n        self.assertIsNone(is_pet_or_none(''))\n\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 135,
    "programming_concept": "Lists;String",
    "context": "Streaming Services",
    "task_description": "### Exercise: Popular Series on Streaming Services\n\nWrite a function called `popular_series(streaming_service)` that returns a list of series available on the specified streaming service. The function should take a list of strings as input, where each string represents the name of a streaming service. The function should return a list of series names available on the specified streaming service.\n\nUse the following data:\n\n- Netflix: [\"Stranger Things\", \"The Crown\", \"Black Mirror\"]\n- Amazon Prime: [\"The Boys\", \"The Marvelous Mrs. Maisel\", \"Fleabag\"]\n- Disney+: [\"The Mandalorian\", \"WandaVision\", \"Loki\"]\n\nExample call:\n```python\npopular_series(\"Netflix\")\n```\nshould return the list `[\"Stranger Things\", \"The Crown\", \"Black Mirror\"]`.",
    "code_skeleton": "def popular_series(streaming_service):\n    ## Insert code here",
    "model_solution": "def popular_series(streaming_service):\n    series = {\n        \"Netflix\": [\"Stranger Things\", \"The Crown\", \"Black Mirror\"],\n        \"Amazon Prime\": [\"The Boys\", \"The Marvelous Mrs. Maisel\", \"Fleabag\"],\n        \"Disney+\": [\"The Mandalorian\", \"WandaVision\", \"Loki\"]\n    }\n    return series.get(streaming_service, [])\n\n# Example call\nprint(popular_series(\"Netflix\"))",
    "unit_tests": "import unittest\nfrom main import popular_series\n\nclass TestPopularSeries(unittest.TestCase):\n    def test_netflix(self):\n        self.assertEqual(popular_series(\"Netflix\"), [\"Stranger Things\", \"The Crown\", \"Black Mirror\"])\n\n    def test_amazon_prime(self):\n        self.assertEqual(popular_series(\"Amazon Prime\"), [\"The Boys\", \"The Marvelous Mrs. Maisel\", \"Fleabag\"])\n\n    def test_disney_plus(self):\n        self.assertEqual(popular_series(\"Disney+\"), [\"The Mandalorian\", \"WandaVision\", \"Loki\"])\n\n    def test_unknown_service(self):\n        self.assertEqual(popular_series(\"Hulu\"), [])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 136,
    "programming_concept": "String; Integer",
    "context": "Relationships",
    "task_description": "### Exercise: Relationship Status\n\nWrite a function named `relationship_status(name, years)` that outputs a person's relationship status based on the number of years in the relationship. The function should accept two parameters: `name` (a String) and `years` (an Integer).\n\nThe function should return the following messages:\n- If `years` is less than 1: \"`[Name] is newly in love!`\"\n- If `years` is between 1 and 5: \"`[Name] is in a stable relationship.`\"\n- If `years` is more than 5: \"`[Name] is in a long-term relationship.`\"\n\nExample call:\n```python\nprint(relationship_status(\"Anna\", 3))  # Output: \"Anna is in a stable relationship.\"\n```",
    "code_skeleton": "def relationship_status(name, years):\n    ## Insert code here",
    "model_solution": "def relationship_status(name, years):\n    if years < 1:\n        return f\"{name} is newly in love!\"\n    elif 1 <= years <= 5:\n        return f\"{name} is in a stable relationship.\"\n    else:\n        return f\"{name} is in a long-term relationship.\"\n\nprint(relationship_status(\"Anna\", 3))  # Example call",
    "unit_tests": "import unittest\n\nfrom main import relationship_status\n\nclass TestRelationshipStatus(unittest.TestCase):\n    def test_newly_in_love(self):\n        self.assertEqual(relationship_status(\"Anna\", 0), \"Anna is newly in love!\")\n        self.assertEqual(relationship_status(\"Max\", -1), \"Max is newly in love!\")\n\n    def test_stable_relationship(self):\n        self.assertEqual(relationship_status(\"Anna\", 1), \"Anna is in a stable relationship.\")\n        self.assertEqual(relationship_status(\"Max\", 5), \"Max is in a stable relationship.\")\n        self.assertEqual(relationship_status(\"Chris\", 3), \"Chris is in a stable relationship.\")\n\n    def test_long_term_relationship(self):\n        self.assertEqual(relationship_status(\"Anna\", 6), \"Anna is in a long-term relationship.\")\n        self.assertEqual(relationship_status(\"Max\", 10), \"Max is in a long-term relationship.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 137,
    "programming_concept": "While loops; Boolean and None",
    "context": "Basketball",
    "task_description": "### Practice Task: Basketball Training\n\nWrite a function named `basketball_training()`, which uses a while loop to count the number of successful shots made by a player. The function should take a list of shots as an argument, where each shot is either `True` (successful) or `False` (not successful). The loop should iterate through the list and count the number of successful shots. If the list is empty, the function should return `None`. Otherwise, the function should return the number of successful shots.\n\nExample call:\n```python\nbasketball_training([True, False, True, True, False])\n```\nThis call should return `3`, as there are three successful shots.",
    "code_skeleton": "def basketball_training(throws):\n    ## Insert code here",
    "model_solution": "def basketball_training(throws):\n    if not throws:\n        return None\n    count = 0\n    i = 0\n    while i < len(throws):\n        if throws[i]:\n            count += 1\n        i += 1\n    return count\n\n# Example call\nprint(basketball_training([True, False, True, True, False]))",
    "unit_tests": "import unittest\nfrom main import basketball_training\n\nclass TestBasketballTraining(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertIsNone(basketball_training([]))\n\n    def test_all_successful(self):\n        self.assertEqual(basketball_training([True, True, True]), 3)\n\n    def test_all_unsuccessful(self):\n        self.assertEqual(basketball_training([False, False, False]), 0)\n\n    def test_mixed_results(self):\n        self.assertEqual(basketball_training([True, False, True, True, False]), 3)\n\n    def test_single_successful(self):\n        self.assertEqual(basketball_training([True]), 1)\n\n    def test_single_unsuccessful(self):\n        self.assertEqual(basketball_training([False]), 0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 138,
    "programming_concept": "Boolean and None; String",
    "context": "Relationships",
    "task_description": "### Exercise: Check Relationship Status\n\nWrite a function named `relationship_status(status)`, that checks the relationship status of a person and returns a corresponding message. The function should take a string `status` as an argument and return an appropriate message based on the input.\n\n- If the `status` is \"in a relationship\", the function should return \"Congratulations on your relationship!\".\n- If the `status` is \"single\", the function should return \"Enjoy your freedom!\".\n- If the `status` is \"complicated\", the function should return \"Relationships can sometimes be difficult.\".\n- For all other inputs, the function should return `None`.\n\nExample Calls:\n- `relationship_status(\"in a relationship\")` returns \"Congratulations on your relationship!\".\n- `relationship_status(\"single\")` returns \"Enjoy your freedom!\".\n- `relationship_status(\"complicated\")` returns \"Relationships can sometimes be difficult.\".\n- `relationship_status(\"unknown\")` returns `None`.",
    "code_skeleton": "def relationship_status(status):\n    ## Insert code here",
    "model_solution": "def relationship_status(status):\n    if status == \"in a relationship\":\n        return \"Congratulations on your relationship!\"\n    elif status == \"single\":\n        return \"Enjoy your freedom!\"\n    elif status == \"complicated\":\n        return \"Relationships can sometimes be difficult.\"\n    else:\n        return None\n\n# Example Calls\nprint(relationship_status(\"in a relationship\"))\nprint(relationship_status(\"single\"))\nprint(relationship_status(\"complicated\"))\nprint(relationship_status(\"unknown\"))",
    "unit_tests": "import unittest\n\nfrom main import relationship_status\n\nclass TestRelationshipStatus(unittest.TestCase):\n    def test_in_a_relationship(self):\n        self.assertEqual(relationship_status(\"in a relationship\"), \"Congratulations on your relationship!\")\n\n    def test_single(self):\n        self.assertEqual(relationship_status(\"single\"), \"Enjoy your freedom!\")\n\n    def test_complicated(self):\n        self.assertEqual(relationship_status(\"complicated\"), \"Relationships can sometimes be difficult.\")\n\n    def test_unknown(self):\n        self.assertIsNone(relationship_status(\"unknown\"))\n\n    def test_empty_string(self):\n        self.assertIsNone(relationship_status(\"\"))\n\n    def test_none(self):\n        self.assertIsNone(relationship_status(None))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 139,
    "programming_concept": "Logical operators (==, !=, <, >, <=, >=, or, and, not); While loops",
    "context": "Relationships",
    "task_description": "### Exercise: Check Relationship Status\n\nWrite a function named `relationship_status(examinations)` that takes a list of examinations (as tuples). Each tuple contains two elements: the name of a person and their relationship status (as a string). The function should count the number of people in each of the following categories: \"Single\", \"In a relationship\", \"Married\", and \"It's complicated\". The function should return a dictionary that contains the number of people in each category.\n\nExample call:\n```python\nexaminations = [(\"Anna\", \"Single\"), (\"Ben\", \"In a relationship\"), (\"Clara\", \"Married\"), (\"David\", \"It's complicated\"), (\"Eva\", \"Single\")]\nprint(relationship_status(examinations))\n```\n\nExpected output:\n```python\n{\n    \"Single\": 2,\n    \"In a relationship\": 1,\n    \"Married\": 1,\n    \"It's complicated\": 1\n}\n```",
    "code_skeleton": "def relationship_status(examinations):\n    ## Insert code here",
    "model_solution": "def relationship_status(examinations):\n    status_dict = {\"Single\": 0, \"In a relationship\": 0, \"Married\": 0, \"It's complicated\": 0}\n    for _, status in examinations:\n        if status in status_dict:\n            status_dict[status] += 1\n    return status_dict\n\nexaminations = [(\"Anna\", \"Single\"), (\"Ben\", \"In a relationship\"), (\"Clara\", \"Married\"), (\"David\", \"It's complicated\"), (\"Eva\", \"Single\")]\nprint(relationship_status(examinations))",
    "unit_tests": "import unittest\nfrom main import relationship_status\n\nclass TestRelationshipStatus(unittest.TestCase):\n    def test_all_categories(self):\n        examinations = [(\"Anna\", \"Single\"), (\"Ben\", \"In a relationship\"), (\"Clara\", \"Married\"), (\"David\", \"It's complicated\"), (\"Eva\", \"Single\")]\n        expected = {\"Single\": 2, \"In a relationship\": 1, \"Married\": 1, \"It's complicated\": 1}\n        self.assertEqual(relationship_status(examinations), expected)\n\n    def test_only_single(self):\n        examinations = [(\"Anna\", \"Single\"), (\"Ben\", \"Single\"), (\"Clara\", \"Single\")]\n        expected = {\"Single\": 3, \"In a relationship\": 0, \"Married\": 0, \"It's complicated\": 0}\n        self.assertEqual(relationship_status(examinations), expected)\n\n    def test_empty_list(self):\n        examinations = []\n        expected = {\"Single\": 0, \"In a relationship\": 0, \"Married\": 0, \"It's complicated\": 0}\n        self.assertEqual(relationship_status(examinations), expected)\n\n    def test_all_married(self):\n        examinations = [(\"Anna\", \"Married\"), (\"Ben\", \"Married\"), (\"Clara\", \"Married\")]\n        expected = {\"Single\": 0, \"In a relationship\": 0, \"Married\": 3, \"It's complicated\": 0}\n        self.assertEqual(relationship_status(examinations), expected)\n\n    def test_all_complicated(self):\n        examinations = [(\"Anna\", \"It's complicated\"), (\"Ben\", \"It's complicated\"), (\"Clara\", \"It's complicated\")]\n        expected = {\"Single\": 0, \"In a relationship\": 0, \"Married\": 0, \"It's complicated\": 3}\n        self.assertEqual(relationship_status(examinations), expected)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 140,
    "programming_concept": "Higher-order functions; String",
    "context": "Virtual Reality",
    "task_description": "### Exercise: Higher-order Functions and Strings in Virtual Reality\n\nIn virtual reality (VR), it's essential that objects and environments are correctly named and categorized. Write a function `filter_vr_objects(objects, criteria)` that receives a list of VR objects and a filter function as parameters. The function should return a new list containing only the objects that meet the criteria of the filter function.\n\nThe VR objects are stored as strings in the list `objects`. The `criteria` function is a higher-order function that takes a string as an argument and returns a boolean value.\n\nExample call:\n```python\ndef is_environment(obj):\n return \"Environment\" in obj\n\nvr_objects = [\"Environment_Forest\", \"Object_Tree\", \"Environment_Desert\", \"Object_Rock\"]\nfiltered_objects = filter_vr_objects(vr_objects, is_environment)\nprint(filtered_objects)  # Output: [\"Environment_Forest\", \"Environment_Desert\"]\n```\n\nImplement the function `filter_vr_objects(objects, criteria)`.",
    "code_skeleton": "def filter_vr_objects(objects, criteria):\n    ## Insert code here",
    "model_solution": "def filter_vr_objects(objects, criteria):\n    return [obj for obj in objects if criteria(obj)]\n\ndef is_environment(obj):\n    return \"Environment\" in obj\n\nvr_objects = [\"Environment_Forest\", \"Object_Tree\", \"Environment_Desert\", \"Object_Rock\"]\nfiltered_objects = filter_vr_objects(vr_objects, is_environment)\nprint(filtered_objects)  # Output: [\"Environment_Forest\", \"Environment_Desert\"]",
    "unit_tests": "import unittest\n\nfrom main import filter_vr_objects\n\nclass TestFilterVrObjects(unittest.TestCase):\n    def test_filter_environments(self):\n        def is_environment(obj):\n            return \"Environment\" in obj\n        vr_objects = [\"Environment_Forest\", \"Object_Tree\", \"Environment_Desert\", \"Object_Rock\"]\n        self.assertEqual(filter_vr_objects(vr_objects, is_environment), [\"Environment_Forest\", \"Environment_Desert\"])\n\n    def test_filter_objects(self):\n        def is_object(obj):\n            return \"Object\" in obj\n        vr_objects = [\"Environment_Forest\", \"Object_Tree\", \"Environment_Desert\", \"Object_Rock\"]\n        self.assertEqual(filter_vr_objects(vr_objects, is_object), [\"Object_Tree\", \"Object_Rock\"])\n\n    def test_empty_list(self):\n        def is_environment(obj):\n            return \"Environment\" in obj\n        vr_objects = []\n        self.assertEqual(filter_vr_objects(vr_objects, is_environment), [])\n\n    def test_no_match(self):\n        def is_water(obj):\n            return \"Water\" in obj\n        vr_objects = [\"Environment_Forest\", \"Object_Tree\", \"Environment_Desert\", \"Object_Rock\"]\n        self.assertEqual(filter_vr_objects(vr_objects, is_water), [])\n\n    def test_all_match(self):\n        def is_any(obj):\n            return True\n        vr_objects = [\"Environment_Forest\", \"Object_Tree\", \"Environment_Desert\", \"Object_Rock\"]\n        self.assertEqual(filter_vr_objects(vr_objects, is_any), vr_objects)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 141,
    "programming_concept": "String; Logical operators (==, !=, <, >, <=, >=, or, and, not)",
    "context": "Basketball",
    "task_description": "### Practice Task: Basketball Player Evaluation\n\nWrite a function named `evaluate_player(points, assists, rebounds)`, which evaluates the performance of a basketball player based on their game statistics. The function should accept three parameters:\n\n- `points`: Number of points scored (int)\n- `assists`: Number of assists (int)\n- `rebounds`: Number of rebounds (int)\n\nThe evaluation should be done according to the following criteria:\n\n- If the player scored more than 20 points and gave more than 5 assists, the function should return \"Outstanding Performance!\".\n- If the player scored more than 15 points and collected more than 10 rebounds, the function should return \"Strong Performance!\".\n- If the player scored more than 10 points or gave more than 5 assists, the function should return \"Good Performance!\".\n- In all other cases, the function should return \"Average Performance\".\n\nExample calls:\n\n```python\nevaluate_player(25, 6, 8)  # returns \"Outstanding Performance!\"\nevaluate_player(18, 3, 12)  # returns \"Strong Performance!\"\nevaluate_player(12, 6, 4)  # returns \"Good Performance!\"\nevaluate_player(8, 4, 3)  # returns \"Average Performance\"\n```\n",
    "code_skeleton": "def evaluate_player(points, assists, rebounds):\n    ## Insert code here\n",
    "model_solution": "def evaluate_player(points, assists, rebounds):\n    if points > 20 and assists > 5:\n        return \"Outstanding Performance!\"\n    elif points > 15 and rebounds > 10:\n        return \"Strong Performance!\"\n    elif points > 10 or assists > 5:\n        return \"Good Performance!\"\n    else:\n        return \"Average Performance\"\n\n# Example calls\nprint(evaluate_player(25, 6, 8))  # Outstanding Performance!\nprint(evaluate_player(18, 3, 12))  # Strong Performance!\nprint(evaluate_player(12, 6, 4))  # Good Performance!\nprint(evaluate_player(8, 4, 3))  # Average Performance\n",
    "unit_tests": "import unittest\nfrom main import evaluate_player\n\nclass TestEvaluatePlayer(unittest.TestCase):\n    def test_outstanding_performance(self):\n        self.assertEqual(evaluate_player(25, 6, 8), \"Outstanding Performance!\")\n\n    def test_strong_performance(self):\n        self.assertEqual(evaluate_player(18, 3, 12), \"Strong Performance!\")\n\n    def test_good_performance_points(self):\n        self.assertEqual(evaluate_player(12, 4, 4), \"Good Performance!\")\n\n    def test_good_performance_assists(self):\n        self.assertEqual(evaluate_player(8, 6, 3), \"Good Performance!\")\n\n    def test_average_performance(self):\n        self.assertEqual(evaluate_player(8, 4, 3), \"Average Performance\")\n\n    def test_edge_case_outstanding_performance(self):\n        self.assertEqual(evaluate_player(21, 6, 5), \"Outstanding Performance!\")\n\n    def test_edge_case_strong_performance(self):\n        self.assertEqual(evaluate_player(16, 4, 11), \"Strong Performance!\")\n\n    def test_edge_case_good_performance(self):\n        self.assertEqual(evaluate_player(11, 6, 4), \"Good Performance!\")\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 142,
    "programming_concept": "While loops; If-Else statements",
    "context": "Film",
    "task_description": "### Exercise: Film recommendation based on ratings\n\nWrite a function named `film_recommendation(ratings)` that takes a list of ratings (numbers from 1 to 5) as an argument. The function should calculate the average rating and provide a recommendation based on this rating.\n\n- If the average rating is 4 or higher, the function should return \"Highly recommended!\"\n- If the average rating is between 3 and 4, the function should return \"Recommended\"\n- If the average rating is between 2 and 3, the function should return \"Average\"\n- If the average rating is below 2, the function should return \"Not recommended\"\n\nExample call:\n```python\nprint(film_recommendation([5, 4, 3, 4, 5]))  # Output: \"Highly recommended!\"\n```",
    "code_skeleton": "def film_recommendation(ratings):\n    ## Insert code here",
    "model_solution": "def film_recommendation(ratings):\n    avg = sum(ratings) / len(ratings)\n    if avg >= 4:\n        return \"Highly recommended!\"\n    elif avg >= 3:\n        return \"Recommended\"\n    elif avg >= 2:\n        return \"Average\"\n    else:\n        return \"Not recommended\"\n\nprint(film_recommendation([5, 4, 3, 4, 5]))",
    "unit_tests": "import unittest\nfrom main import film_recommendation\n\nclass TestFilmRecommendation(unittest.TestCase):\n    def test_highly_recommended(self):\n        self.assertEqual(film_recommendation([5, 4, 4, 5, 5]), \"Highly recommended!\")\n\n    def test_recommended(self):\n        self.assertEqual(film_recommendation([3, 3, 4, 3, 3]), \"Recommended\")\n\n    def test_average(self):\n        self.assertEqual(film_recommendation([2, 2, 3, 2, 2]), \"Average\")\n\n    def test_not_recommended(self):\n        self.assertEqual(film_recommendation([1, 1, 2, 1, 1]), \"Not recommended\")\n\n    def test_empty_list(self):\n        with self.assertRaises(ZeroDivisionError):\n            film_recommendation([])\n\n    def test_single_element(self):\n        self.assertEqual(film_recommendation([5]), \"Highly recommended!\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 143,
    "programming_concept": "Lists; Recursion",
    "context": "Social Media",
    "task_description": "### Exercise: Follower Count in Social Media\n\nIn social media, it is often important to know the number of followers a user has. Write a recursive function `count_followers(follower_list)` that counts the number of followers in a nested list. The list can contain both individual followers and further lists of followers.\n\nExample:\n```python\nfollower_list = [\"Anna\", [\"Ben\", \"Clara\"], \"David\", [\"Eva\", [\"Frank\", \"Grace\"]]]\n```\n\nIn this example, the user has a total of 6 followers.\n\nImplement the function `count_followers(follower_list)` that returns the number of followers in the nested list.\n\nExample call:\n```python\nprint(count_followers(follower_list))  # Output: 6\n```",
    "code_skeleton": "def count_followers(follower_list):\n    ## Insert code here",
    "model_solution": "def count_followers(follower_list):\n    if not follower_list:\n        return 0\n    if isinstance(follower_list[0], list):\n        return count_followers(follower_list[0]) + count_followers(follower_list[1:])\n    return 1 + count_followers(follower_list[1:])\n\nfollower_list = [\"Anna\", [\"Ben\", \"Clara\"], \"David\", [\"Eva\", [\"Frank\", \"Grace\"]]]\nprint(count_followers(follower_list))  # Output: 6",
    "unit_tests": "import unittest\n\nfrom main import count_followers\n\nclass TestCountFollowers(unittest.TestCase):\n    def test_simple_list(self):\n        self.assertEqual(count_followers([\"Anna\", \"Ben\", \"Clara\"]), 3)\n\n    def test_nested_list(self):\n        self.assertEqual(count_followers([\"Anna\", [\"Ben\", \"Clara\"], \"David\", [\"Eva\", [\"Frank\", \"Grace\"]]]), 6)\n\n    def test_empty_list(self):\n        self.assertEqual(count_followers([]), 0)\n\n    def test_single_follower(self):\n        self.assertEqual(count_followers([\"Anna\"]), 1)\n\n    def test_deeply_nested_list(self):\n        self.assertEqual(count_followers([\"Anna\", [\"Ben\", [\"Clara\", [\"David\", [\"Eva\"]]]]]), 5)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 144,
    "programming_concept": "Float; While loops",
    "context": "Music",
    "task_description": "### Exercise: Music Playlist\n\nWrite a function called `playlist_duration(songs)` that receives a list of songs as input. Each song is represented by its duration in minutes as a float value. The function should calculate and return the total duration of the playlist. Use a `while` loop to calculate the total duration.\n\nExample call:\n```python\nsongs = [3.5, 4.0, 2.75, 5.25]\nprint(playlist_duration(songs))  # Output: 15.5\n```\n\n### Requirements:\n- The function should use a `while` loop.\n- The function should return the total playlist duration as a float value.",
    "code_skeleton": "def playlist_duration(songs):\n    ## Insert code here",
    "model_solution": "def playlist_duration(songs):\n    i, total = 0, 0.0\n    while i < len(songs):\n        total += songs[i]\n        i += 1\n    return total\n\nsongs = [3.5, 4.0, 2.75, 5.25]\nprint(playlist_duration(songs))",
    "unit_tests": "import unittest\nfrom main import playlist_duration\n\nclass TestPlaylistDuration(unittest.TestCase):\n    def test_simple_playlist(self):\n        self.assertEqual(playlist_duration([3.5, 4.0, 2.75, 5.25]), 15.5)\n\n    def test_empty_playlist(self):\n        self.assertEqual(playlist_duration([]), 0.0)\n\n    def test_single_song(self):\n        self.assertEqual(playlist_duration([4.5]), 4.5)\n\n    def test_mixed_lengths(self):\n        self.assertEqual(playlist_duration([1.0, 2.5, 3.75, 4.25]), 11.5)\n\n    def test_large_playlist(self):\n        self.assertEqual(playlist_duration([1.0] * 1000), 1000.0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 145,
    "programming_concept": "Functions as variables; If-Else statements",
    "context": "Relationships",
    "task_description": "### Exercise: Check Relationship Status\n\nWrite a function named `relationship_status(status)` that checks a person's current relationship status and returns an appropriate message. The function should return one of the following messages based on the passed status:\n\n- If the status is \"taken\", the message \"Congratulations on the relationship!\" should be returned.\n- If the status is \"single\", the message \"Enjoy your freedom!\" should be returned.\n- If the status is \"complicated\", the message \"Relationships can sometimes be difficult.\" should be returned.\n- For all other statuses, the message \"Unknown relationship status.\" should be returned.\n\nExample calls:\n- `relationship_status(\"taken\")` returns \"Congratulations on the relationship!\".\n- `relationship_status(\"single\")` returns \"Enjoy your freedom!\".\n- `relationship_status(\"complicated\")` returns \"Relationships can sometimes be difficult.\".\n- `relationship_status(\"widowed\")` returns \"Unknown relationship status.\".",
    "code_skeleton": "def relationship_status(status):\n    ## Insert code here",
    "model_solution": "def relationship_status(status):\n    if status == \"taken\":\n        return \"Congratulations on the relationship!\"\n    elif status == \"single\":\n        return \"Enjoy your freedom!\"\n    elif status == \"complicated\":\n        return \"Relationships can sometimes be difficult.\"\n    else:\n        return \"Unknown relationship status.\"\n\n# Example calls\nprint(relationship_status(\"taken\"))\nprint(relationship_status(\"single\"))\nprint(relationship_status(\"complicated\"))\nprint(relationship_status(\"widowed\"))",
    "unit_tests": "import unittest\n\nfrom main import relationship_status\n\nclass TestRelationshipStatus(unittest.TestCase):\n    def test_taken(self):\n        self.assertEqual(relationship_status(\"taken\"), \"Congratulations on the relationship!\")\n\n    def test_single(self):\n        self.assertEqual(relationship_status(\"single\"), \"Enjoy your freedom!\")\n\n    def test_complicated(self):\n        self.assertEqual(relationship_status(\"complicated\"), \"Relationships can sometimes be difficult.\")\n\n    def test_unknown(self):\n        self.assertEqual(relationship_status(\"widowed\"), \"Unknown relationship status.\")\n\n    def test_empty_string(self):\n        self.assertEqual(relationship_status(\"\"), \"Unknown relationship status.\")\n\n    def test_none(self):\n        self.assertEqual(relationship_status(None), \"Unknown relationship status.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 146,
    "programming_concept": "Lists;Tuples",
    "context": "Gardening",
    "task_description": "### Exercise: Gardening with Lists and Tuples\n\nWrite a function named `plant_info(plant_list)`, which takes a list of tuples as an argument. Each tuple contains the name of a plant and the number of plants in the garden. The function should return a new list containing only the names of the plants that are present more than 5 times in the garden.\n\nExample call:\n```python\nplant_list = [(\"Tomato\", 10), (\"Cucumber\", 3), (\"Carrot\", 7), (\"Lettuce\", 2)]\nprint(plant_info(plant_list))\n```\n\nExpected output:\n```\n['Tomato', 'Carrot']\n```",
    "code_skeleton": "def plant_info(plant_list):\n    ## Insert code here",
    "model_solution": "def plant_info(plant_list):\n    return [name for name, count in plant_list if count > 5]\n\nplant_list = [(\"Tomato\", 10), (\"Cucumber\", 3), (\"Carrot\", 7), (\"Lettuce\", 2)]\nprint(plant_info(plant_list))",
    "unit_tests": "import unittest\nfrom main import plant_info\n\nclass TestPlantInfo(unittest.TestCase):\n    def test_more_than_five(self):\n        self.assertEqual(plant_info([(\"Tomato\", 10), (\"Cucumber\", 3), (\"Carrot\", 7), (\"Lettuce\", 2)]), [\"Tomato\", \"Carrot\"])\n\n    def test_no_plants(self):\n        self.assertEqual(plant_info([]), [])\n\n    def test_all_less_than_five(self):\n        self.assertEqual(plant_info([(\"Tomato\", 1), (\"Cucumber\", 2), (\"Carrot\", 3), (\"Lettuce\", 4)]), [])\n\n    def test_all_more_than_five(self):\n        self.assertEqual(plant_info([(\"Tomato\", 6), (\"Cucumber\", 7), (\"Carrot\", 8), (\"Lettuce\", 9)]), [\"Tomato\", \"Cucumber\", \"Carrot\", \"Lettuce\"])\n\n    def test_exactly_five(self):\n        self.assertEqual(plant_info([(\"Tomato\", 5), (\"Cucumber\", 5), (\"Carrot\", 5), (\"Lettuce\", 5)]), [])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 147,
    "programming_concept": "Tuples;For loops",
    "context": "Animals",
    "task_description": "### Exercise Task: Animals and Their Habitats\n\nWrite a function called `animal_habitat(animals)`, which receives a list of tuples as an argument. Each tuple contains the name of an animal and its habitat. The function should return a list of animals that live in the forest.\n\nExample call:\n```python\ntiere = [(\"Lion\", \"Savannah\"), (\"Fox\", \"Forest\"), (\"Elephant\", \"Savannah\"), (\"Deer\", \"Forest\")]\nprint(animal_habitat(animals))\n```\n\nExpected output:\n```\n['Fox', 'Deer']\n```",
    "code_skeleton": "def animal_habitat(animals):\n    ## Insert code here",
    "model_solution": "def animal_habitat(animals):\n    return [animal for animal, habitat in animals if habitat == \"Forest\"]\n\nanimals = [(\"Lion\", \"Savannah\"), (\"Fox\", \"Forest\"), (\"Elephant\", \"Savannah\"), (\"Deer\", \"Forest\")]\nprint(animal_habitat(animals))",
    "unit_tests": "import unittest\n\nfrom main import animal_habitat\n\nclass TestAnimalHabitat(unittest.TestCase):\n    def test_habitat_forest(self):\n        animals = [(\"Lion\", \"Savannah\"), (\"Fox\", \"Forest\"), (\"Elephant\", \"Savannah\"), (\"Deer\", \"Forest\")]\n        self.assertEqual(animal_habitat(animals), [\"Fox\", \"Deer\"])\n\n    def test_no_animals_in_forest(self):\n        animals = [(\"Lion\", \"Savannah\"), (\"Elephant\", \"Savannah\")]\n        self.assertEqual(animal_habitat(animals), [])\n\n    def test_all_animals_in_forest(self):\n        animals = [(\"Fox\", \"Forest\"), (\"Deer\", \"Forest\")]\n        self.assertEqual(animal_habitat(animals), [\"Fox\", \"Deer\"])\n\n    def test_empty_list(self):\n        animals = []\n        self.assertEqual(animal_habitat(animals), [])\n\n    def test_various_habitats(self):\n        animals = [(\"Lion\", \"Savannah\"), (\"Fox\", \"Forest\"), (\"Penguin\", \"Antarctica\"), (\"Deer\", \"Forest\"), (\"Kangaroo\", \"Australia\")]\n        self.assertEqual(animal_habitat(animals), [\"Fox\", \"Deer\"])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 148,
    "programming_concept": "String;Integer",
    "context": "Mental Health",
    "task_description": "### Exercise: Mental Health\n\nWrite a function named `mood_analysis(mood)` that takes a mood as a string and returns an appropriate message. The mood can be either \"happy\", \"sad\", or \"stressed\".\n\n- For \"happy\", the function should return \"That's great! Keep it up!\".\n- For \"sad\", the function should return \"It's okay to be sad. Talk to someone about it.\".\n- For \"stressed\", the function should return \"Try to take a break and relax.\".\n\nExample calls:\n- `mood_analysis(\"happy\")` returns \"That's great! Keep it up!\".\n- `mood_analysis(\"sad\")` returns \"It's okay to be sad. Talk to someone about it.\".\n- `mood_analysis(\"stressed\")` returns \"Try to take a break and relax.\".",
    "code_skeleton": "def mood_analysis(mood):\n    ## Insert code here",
    "model_solution": "def mood_analysis(mood):\n    if mood == \"happy\":\n        return \"That's great! Keep it up!\"\n    elif mood == \"sad\":\n        return \"It's okay to be sad. Talk to someone about it.\"\n    elif mood == \"stressed\":\n        return \"Try to take a break and relax.\"\n\nprint(mood_analysis(\"happy\"))\nprint(mood_analysis(\"sad\"))\nprint(mood_analysis(\"stressed\"))",
    "unit_tests": "import unittest\nfrom main import mood_analysis\n\nclass TestMoodAnalysis(unittest.TestCase):\n    def test_happy(self):\n        self.assertEqual(mood_analysis(\"happy\"), \"That's great! Keep it up!\")\n\n    def test_sad(self):\n        self.assertEqual(mood_analysis(\"sad\"), \"It's okay to be sad. Talk to someone about it.\")\n\n    def test_stressed(self):\n        self.assertEqual(mood_analysis(\"stressed\"), \"Try to take a break and relax.\")\n\n    def test_unknown_mood(self):\n        self.assertIsNone(mood_analysis(\"unknown\"))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 149,
    "programming_concept": "String;Operations with numbers",
    "context": "Olympics",
    "task_description": "### Practice Task: Olympic Medal Count\n\nWrite a function named `medal_count(country, gold, silver, bronze)`, which calculates the number of medals won by a country at the Olympic Games and returns a corresponding message.\n\nThe function should have the following parameters:\n- `country` (String): The name of the country.\n- `gold` (int): The number of gold medals won.\n- `silver` (int): The number of silver medals won.\n- `bronze` (int): The number of bronze medals won.\n\nThe function should calculate the total number of medals and return a message in the following format:\n```\n[Country] has won a total of [Total Number] medals: [Gold] Gold, [Silver] Silver, [Bronze] Bronze.\n```\n\nExample call:\n```python\nprint(medal_count(\"Germany\", 10, 5, 7))\n```\n\nExample output:\n```\nGermany has won a total of 22 medals: 10 Gold, 5 Silver, 7 Bronze.\n```",
    "code_skeleton": "def medal_count(country, gold, silver, bronze):\n    ## Insert code here",
    "model_solution": "def medal_count(country, gold, silver, bronze):\n    total = gold + silver + bronze\n    return f\"{country} has won a total of {total} medals: {gold} Gold, {silver} Silver, {bronze} Bronze.\"\n\nprint(medal_count(\"Germany\", 10, 5, 7))",
    "unit_tests": "import unittest\nfrom main import medal_count\n\nclass TestMedalCount(unittest.TestCase):\n    def test_germany(self):\n        self.assertEqual(medal_count(\"Germany\", 10, 5, 7), \"Germany has won a total of 22 medals: 10 Gold, 5 Silver, 7 Bronze.\")\n\n    def test_usa(self):\n        self.assertEqual(medal_count(\"USA\", 15, 10, 5), \"USA has won a total of 30 medals: 15 Gold, 10 Silver, 5 Bronze.\")\n\n    def test_china(self):\n        self.assertEqual(medal_count(\"China\", 8, 12, 6), \"China has won a total of 26 medals: 8 Gold, 12 Silver, 6 Bronze.\")\n\n    def test_no_medals(self):\n        self.assertEqual(medal_count(\"Nowhereland\", 0, 0, 0), \"Nowhereland has won a total of 0 medals: 0 Gold, 0 Silver, 0 Bronze.\")\n\n    def test_edge_case(self):\n        self.assertEqual(medal_count(\"Testland\", 1, 0, 0), \"Testland has won a total of 1 medal: 1 Gold, 0 Silver, 0 Bronze.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 150,
    "programming_concept": "Boolean and None; Recursion",
    "context": "Film",
    "task_description": "### Exercise: Film recommendation based on ratings\n\nWrite a recursive function `recommend_film(films, rating)` that receives a list of films and a rating as parameters. Each film in the list is a dictionary with the keys `title` and `rating`. The function should return the first film whose rating is greater or equal to the given rating. If no such film is found, the function should return `None`.\n\nExample calls:\n```python\nfilms = [\n    {'title': 'Film A', 'rating': 7.5},\n    {'title': 'Film B', 'rating': 8.0},\n    {'title': 'Film C', 'rating': 6.0}\n]\nprint(recommend_film(films, 7.0))  # Returns {'title': 'Film A', 'rating': 7.5}\nprint(recommend_film(films, 8.5))  # Returns None\n```\n\nImplement the function `recommend_film(films, rating)`.",
    "code_skeleton": "def recommend_film(films, rating):\n    ## Insert code here",
    "model_solution": "def recommend_film(films, rating):\n    if not films:\n        return None\n    if films[0]['rating'] >= rating:\n        return films[0]\n    return recommend_film(films[1:], rating)\n\nfilms = [\n    {'title': 'Film A', 'rating': 7.5},\n    {'title': 'Film B', 'rating': 8.0},\n    {'title': 'Film C', 'rating': 6.0}\n]\nprint(recommend_film(films, 7.0))  # Returns {'title': 'Film A', 'rating': 7.5}\nprint(recommend_film(films, 8.5))  # Returns None",
    "unit_tests": "import unittest\n\nfrom main import recommend_film\n\nclass TestRecommendFilm(unittest.TestCase):\n    def test_film_found(self):\n        films = [\n            {'title': 'Film A', 'rating': 7.5},\n            {'title': 'Film B', 'rating': 8.0},\n            {'title': 'Film C', 'rating': 6.0}\n        ]\n        self.assertEqual(recommend_film(films, 7.0), {'title': 'Film A', 'rating': 7.5})\n\n    def test_no_film_found(self):\n        films = [\n            {'title': 'Film A', 'rating': 7.5},\n            {'title': 'Film B', 'rating': 8.0},\n            {'title': 'Film C', 'rating': 6.0}\n        ]\n        self.assertIsNone(recommend_film(films, 8.5))\n\n    def test_empty_list(self):\n        films = []\n        self.assertIsNone(recommend_film(films, 7.0))\n\n    def test_all_films_below_rating(self):\n        films = [\n            {'title': 'Film A', 'rating': 5.5},\n            {'title': 'Film B', 'rating': 6.0},\n            {'title': 'Film C', 'rating': 4.0}\n        ]\n        self.assertIsNone(recommend_film(films, 7.0))\n\n    def test_first_film_found(self):\n        films = [\n            {'title': 'Film A', 'rating': 7.0},\n            {'title': 'Film B', 'rating': 8.0},\n            {'title': 'Film C', 'rating': 6.0}\n        ]\n        self.assertEqual(recommend_film(films, 7.0), {'title': 'Film A', 'rating': 7.0})\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 151,
    "programming_concept": "String; Integer; Logical operators (==, !=, <, >, <=, >=, or, and, not)",
    "context": "Fishing",
    "task_description": "### Exercise: Catch Quota in Fishing\n\nWrite a function named `catch_quota(fish_type, weight)` that checks whether a caught fish meets the minimum requirements. The function should take two parameters: `fish_type` (String) and `weight` (Integer).\n\nThe minimum requirements are as follows:\n- For 'Pike', the weight must be at least 5 kg.\n- For 'Zander', the weight must be at least 3 kg.\n- For 'Perch', the weight must be at least 1 kg.\n\nThe function should return `True` if the fish meets the minimum requirements, and `False` if it does not.\n\nExample calls:\n- `catch_quota('Pike', 6)` returns `True`.\n- `catch_quota('Zander', 2)` returns `False`.",
    "code_skeleton": "def catch_quota(fish_type, weight):\n    ## Insert code here",
    "model_solution": "def catch_quota(fish_type, weight):\n    minimum_weight = {'Pike': 5, 'Zander': 3, 'Perch': 1}\n    return weight >= minimum_weight.get(fish_type, float('inf'))\n\n# Example calls\nprint(catch_quota('Pike', 6))  # True\nprint(catch_quota('Zander', 2))  # False",
    "unit_tests": "import unittest\nfrom main import catch_quota\n\nclass TestCatchQuota(unittest.TestCase):\n    def test_pike_above_minimum(self):\n        self.assertTrue(catch_quota('Pike', 6))\n\n    def test_pike_below_minimum(self):\n        self.assertFalse(catch_quota('Pike', 4))\n\n    def test_zander_above_minimum(self):\n        self.assertTrue(catch_quota('Zander', 4))\n\n    def test_zander_below_minimum(self):\n        self.assertFalse(catch_quota('Zander', 2))\n\n    def test_perch_above_minimum(self):\n        self.assertTrue(catch_quota('Perch', 2))\n\n    def test_perch_below_minimum(self):\n        self.assertFalse(catch_quota('Perch', 0.5))\n\n    def test_unknown_fish_type(self):\n        self.assertFalse(catch_quota('Carp', 10))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 152,
    "programming_concept": "Operations with numbers; String; Float",
    "context": "Olympics",
    "task_description": "### Practice Task: Olympic Medal Calculator\n\nWrite a function named `medal_calculator(gold, silver, bronze)` that calculates the total score of a country in the Olympic Games. The points distribution is as follows:\n\n- Gold medal: 3 points\n- Silver medal: 2 points\n- Bronze medal: 1 point\n\nThe function should calculate the total score and return it as a floating-point number (float).\n\nExample call:\n```python\nmedal_calculator(5, 3, 2)\n```\nThis call should calculate and return the total score for 5 gold, 3 silver, and 2 bronze medals.",
    "code_skeleton": "def medal_calculator(gold, silver, bronze):\n    ## Insert code here",
    "model_solution": "def medal_calculator(gold, silver, bronze):\n    return float(3 * gold + 2 * silver + 1 * bronze)\n\nprint(medal_calculator(5, 3, 2))",
    "unit_tests": "import unittest\nfrom main import medal_calculator\n\nclass TestMedalCalculator(unittest.TestCase):\n    def test_all_medals(self):\n        self.assertEqual(medal_calculator(5, 3, 2), 5*3 + 3*2 + 2*1)\n\n    def test_no_medals(self):\n        self.assertEqual(medal_calculator(0, 0, 0), 0.0)\n\n    def test_only_gold(self):\n        self.assertEqual(medal_calculator(10, 0, 0), 10*3)\n\n    def test_only_silver(self):\n        self.assertEqual(medal_calculator(0, 10, 0), 10*2)\n\n    def test_only_bronze(self):\n        self.assertEqual(medal_calculator(0, 0, 10), 10*1)\n\n    def test_mixed_medals(self):\n        self.assertEqual(medal_calculator(1, 1, 1), 3 + 2 + 1)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 153,
    "programming_concept": "For loops;If-Else statements;Operations with numbers",
    "context": "Pets",
    "task_description": "### Exercise Task: Pet Food Calculation\n\nWrite a function named `calculate_food_requirement(pets)`, which takes a list of pets and their weights (in kilograms) as an argument. The function should calculate the daily food requirement for each pet and return a list with the results.\n\nThe daily food requirement is calculated as follows:\n- For dogs: 5% of body weight\n- For cats: 3% of body weight\n- For other pets: 2% of body weight\n\nThe list of pets is passed as a list of tuples, where each tuple contains the pet's name and its weight. Example: `[\"Dog\", 20), (\"Cat\", 5), (\"Hamster\", 0.5)]`\n\nExample call:\n```python\npets = [(\"Dog\", 20), (\"Cat\", 5), (\"Hamster\", 0.5)]\nprint(calculate_food_requirement(pets))\n```\n\nExpected output:\n```python\n[1.0, 0.15, 0.01]\n```",
    "code_skeleton": "def calculate_food_requirement(pets):\n    ## Insert code here",
    "model_solution": "def calculate_food_requirement(pets):\n    return [weight * (0.05 if pet == \"Dog\" else 0.03 if pet == \"Cat\" else 0.02) for pet, weight in pets]\n\npets = [(\"Dog\", 20), (\"Cat\", 5), (\"Hamster\", 0.5)]\nprint(calculate_food_requirement(pets))",
    "unit_tests": "import unittest\nfrom main import calculate_food_requirement\n\nclass TestCalculateFoodRequirement(unittest.TestCase):\n    def test_dogs_and_cats(self):\n        self.assertEqual(calculate_food_requirement([(\"Dog\", 20), (\"Cat\", 5)]), [1.0, 0.15])\n\n    def test_hamster(self):\n        self.assertEqual(calculate_food_requirement([(\"Hamster\", 0.5)]), [0.01])\n\n    def test_mixed_pets(self):\n        self.assertEqual(calculate_food_requirement([(\"Dog\", 20), (\"Cat\", 5), (\"Hamster\", 0.5)]), [1.0, 0.15, 0.01])\n\n    def test_empty_list(self):\n        self.assertEqual(calculate_food_requirement([]), [])\n\n    def test_unknown_pet(self):\n        self.assertEqual(calculate_food_requirement([(\"Parrot\", 1)]), [0.02])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 154,
    "programming_concept": "If-Else statements; Functions as variables; Boolean and None",
    "context": "Sports",
    "task_description": "### Exercise: Sporting Activity\n\nWrite a function named `sport_activity(activity)` that takes a sporting activity as a string and returns an appropriate message. The function should check the following conditions:\n\n- If the activity is \"Running\", it should return the message \"Running is a great way to stay fit!\".\n- If the activity is \"Swimming\", it should return the message \"Swimming exercises the entire body!\".\n- If the activity is \"Cycling\", it should return the message \"Cycling is good for endurance!\".\n- For all other activities, it should return the message \"That's a great sport too!\".\n\nExample calls:\n- `sport_activity(\"Running\")` returns \"Running is a great way to stay fit!\".\n- `sport_activity(\"Swimming\")` returns \"Swimming exercises the entire body!\".\n- `sport_activity(\"Basketball\")` returns \"That's a great sport too!\".",
    "code_skeleton": "def sport_activity(activity):\n    ## Insert code here",
    "model_solution": "def sport_activity(activity):\n    if activity == \"Running\":\n        return \"Running is a great way to stay fit!\"\n    elif activity == \"Swimming\":\n        return \"Swimming exercises the entire body!\"\n    elif activity == \"Cycling\":\n        return \"Cycling is good for endurance!\"\n    else:\n        return \"That's a great sport too!\"\n\n# Example calls\nprint(sport_activity(\"Running\"))\nprint(sport_activity(\"Swimming\"))\nprint(sport_activity(\"Basketball\"))",
    "unit_tests": "import unittest\nfrom main import sport_activity\n\nclass TestSportActivity(unittest.TestCase):\n    def test_running(self):\n        self.assertEqual(sport_activity(\"Running\"), \"Running is a great way to stay fit!\")\n\n    def test_swimming(self):\n        self.assertEqual(sport_activity(\"Swimming\"), \"Swimming exercises the entire body!\")\n\n    def test_cycling(self):\n        self.assertEqual(sport_activity(\"Cycling\"), \"Cycling is good for endurance!\")\n\n    def test_other_activity(self):\n        self.assertEqual(sport_activity(\"Basketball\"), \"That's a great sport too!\")\n        self.assertEqual(sport_activity(\"Yoga\"), \"That's a great sport too!\")\n        self.assertEqual(sport_activity(\"Tennis\"), \"That's a great sport too!\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 155,
    "programming_concept": "Boolean and None;Operations with numbers;If-Else statements",
    "context": "Relationships",
    "task_description": "### Exercise: Check Relationship Status\n\nWrite a function named `relationship_status(age, relationship_duration)` that verifies a person's relationship status based on their age and the duration of their current relationship. The function should return an appropriate message with `return`.\n\n- If the person is younger than 18 years, the function should return \"Too young for a serious relationship.\"\n- If the person is 18 years or older and the relationship duration is less than 1 year, the function should return \"Newly in love!\"\n- If the person is 18 years or older and the relationship duration is between 1 and 5 years, the function should return \"In a stable relationship.\"\n- If the person is 18 years or older and the relationship duration exceeds 5 years, the function should return \"Long-term relationship.\"\n\nExample calls:\n- `relationship_status(16, 0.5)` returns \"Too young for a serious relationship.\"\n- `relationship_status(25, 0.8)` returns \"Newly in love!\"\n- `relationship_status(30, 3)` returns \"In a stable relationship.\"\n- `relationship_status(40, 6)` returns \"Long-term relationship.\"",
    "code_skeleton": "def relationship_status(age, relationship_duration):\n    ## Insert code here",
    "model_solution": "def relationship_status(age, relationship_duration):\n    if age < 18:\n        return \"Too young for a serious relationship.\"\n    elif relationship_duration < 1:\n        return \"Newly in love!\"\n    elif relationship_duration <= 5:\n        return \"In a stable relationship.\"\n    else:\n        return \"Long-term relationship.\"\n\n# Example calls\nprint(relationship_status(16, 0.5))\nprint(relationship_status(25, 0.8))\nprint(relationship_status(30, 3))\nprint(relationship_status(40, 6))",
    "unit_tests": "import unittest\nfrom main import relationship_status\n\nclass TestRelationshipStatus(unittest.TestCase):\n    def test_too_young(self):\n        self.assertEqual(relationship_status(16, 0.5), \"Too young for a serious relationship.\")\n\n    def test_newly_in_love(self):\n        self.assertEqual(relationship_status(25, 0.8), \"Newly in love!\")\n\n    def test_stable_relationship(self):\n        self.assertEqual(relationship_status(30, 3), \"In a stable relationship.\")\n\n    def test_long_term_relationship(self):\n        self.assertEqual(relationship_status(40, 6), \"Long-term relationship.\")\n\n    def test_boundary_18_years(self):\n        self.assertEqual(relationship_status(18, 0.5), \"Newly in love!\")\n\n    def test_boundary_1_year(self):\n        self.assertEqual(relationship_status(25, 1), \"In a stable relationship.\")\n\n    def test_boundary_5_years(self):\n        self.assertEqual(relationship_status(30, 5), \"In a stable relationship.\")\n\n    def test_exceeds_5_years(self):\n        self.assertEqual(relationship_status(30, 5.1), \"Long-term relationship.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 156,
    "programming_concept": "If-Else statements; Higher-order functions; String",
    "context": "Rugby",
    "task_description": "### Exercise: Rugby Player Evaluation\n\nWrite a function named `evaluate_player(name, points)` that takes a rugby player's name and their scored points as arguments. The function should evaluate the player based on their points and return a corresponding message.\n\n- If the player has scored more than 20 points, the message should be: \"Excellent, [Name]! You are a star player!\"\n- If the player has scored between 10 and 20 points (including 10 and 20), the message should be: \"Well done, [Name]! You played solidly.\"\n- If the player has scored less than 10 points, the message should be: \"Chin up, [Name]! Practice makes perfect.\"\n\nExample call:\n```python\nevaluate_player(\"Max\", 25)\n```\nshould return the message \"Excellent, Max! You are a star player!\"",
    "code_skeleton": "def evaluate_player(name, points):\n    ## Insert code here\n",
    "model_solution": "def evaluate_player(name, points):\n    if points > 20:\n        return f\"Excellent, {name}! You are a star player!\"\n    elif 10 <= points <= 20:\n        return f\"Well done, {name}! You played solidly.\"\n    else:\n        return f\"Chin up, {name}! Practice makes perfect.\"\n\n# Example call\nevaluate_player(\"Max\", 25)",
    "unit_tests": "import unittest\nfrom main import evaluate_player\n\nclass TestEvaluatePlayer(unittest.TestCase):\n    def test_excellent(self):\n        self.assertEqual(evaluate_player(\"Max\", 25), \"Excellent, Max! You are a star player!\")\n\n    def test_well_done(self):\n        self.assertEqual(evaluate_player(\"Anna\", 15), \"Well done, Anna! You played solidly.\")\n\n    def test_chin_up(self):\n        self.assertEqual(evaluate_player(\"Tom\", 5), \"Chin up, Tom! Practice makes perfect.\")\n\n    def test_boundary_20(self):\n        self.assertEqual(evaluate_player(\"Lena\", 20), \"Well done, Lena! You played solidly.\")\n\n    def test_boundary_10(self):\n        self.assertEqual(evaluate_player(\"Paul\", 10), \"Well done, Paul! You played solidly.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 157,
    "programming_concept": "Functions as variables; Logical operators (==, !=, <, >, <=, >=, or, and, not); Lists",
    "context": "Virtual Reality",
    "task_description": "### Exercise: Virtual Reality - User Management\n\nIn a virtual reality system, users need to be managed. Each user has a name and age. Write a function `manage_users(user_list)` that takes a list of user names and their ages as input and performs the following tasks:\n\n1. **Create a list of users who are older than 18 years.**\n2. **Create a list of users who are 18 years old or younger.**\n3. **Return the count of users in each list.**\n\nThe function should return a dictionary containing the count of users in both lists. The dictionary should have the following keys: `\"adults\"` and `\"minors\"`.\n\nExample call:\n```python\nuser_list = [(\"Alice\", 22), (\"Bob\", 17), (\"Charlie\", 19), (\"Diana\", 15)]\nresult = manage_users(user_list)\nprint(result)  # Output: {\"adults\": 2, \"minors\": 2}\n```\n\nImplement the function `manage_users(user_list)` to meet the above requirements.",
    "code_skeleton": "def manage_users(user_list):\n    ## Insert code here",
    "model_solution": "def manage_users(user_list):\n    adults = [u for u in user_list if u[1] > 18]\n    minors = [u for u in user_list if u[1] <= 18]\n    return {\"adults\": len(adults), \"minors\": len(minors)}\n\nuser_list = [(\"Alice\", 22), (\"Bob\", 17), (\"Charlie\", 19), (\"Diana\", 15)]\nresult = manage_users(user_list)\nprint(result)",
    "unit_tests": "import unittest\nfrom main import manage_users\n\nclass TestManageUsers(unittest.TestCase):\n    def test_mixed_users(self):\n        user_list = [(\"Alice\", 22), (\"Bob\", 17), (\"Charlie\", 19), (\"Diana\", 15)]\n        self.assertEqual(manage_users(user_list), {\"adults\": 2, \"minors\": 2})\n\n    def test_only_adults(self):\n        user_list = [(\"Alice\", 22), (\"Charlie\", 19)]\n        self.assertEqual(manage_users(user_list), {\"adults\": 2, \"minors\": 0})\n\n    def test_only_minors(self):\n        user_list = [(\"Bob\", 17), (\"Diana\", 15)]\n        self.assertEqual(manage_users(user_list), {\"adults\": 0, \"minors\": 2})\n\n    def test_empty_list(self):\n        user_list = []\n        self.assertEqual(manage_users(user_list), {\"adults\": 0, \"minors\": 0})\n\n    def test_boundary_18(self):\n        user_list = [(\"Alice\", 18), (\"Bob\", 18)]\n        self.assertEqual(manage_users(user_list), {\"adults\": 0, \"minors\": 2})\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 158,
    "programming_concept": "Operations with numbers;String;Boolean and None",
    "context": "Olympics",
    "task_description": "### Exercise: Olympic Medal Table\n\nWrite a function named `medal_table(gold, silver, bronze)`, which takes the number of medals won by a country at the Olympic Games and returns an appropriate message.\n\n- If the country has not won any medals (all values are 0), the function should return \"No medals won.\"\n- If the country has won at least one gold medal, the function should return \"Gold medals: [number]\"\n- If the country has won at least one silver medal, the function should return \"Silver medals: [number]\"\n- If the country has won at least one bronze medal, the function should return \"Bronze medals: [number]\"\n\nExample calls:\n- `medal_table(0, 0, 0)` returns \"No medals won.\"\n- `medal_table(1, 0, 0)` returns \"Gold medals: 1\"\n- `medal_table(0, 2, 0)` returns \"Silver medals: 2\"\n- `medal_table(0, 0, 3)` returns \"Bronze medals: 3\"\n- `medal_table(1, 2, 3)` returns \"Gold medals: 1\\nSilver medals: 2\\nBronze medals: 3\"",
    "code_skeleton": "def medal_table(gold, silver, bronze):\n    ## Insert code here",
    "model_solution": "def medal_table(gold, silver, bronze):\n    if gold == silver == bronze == 0:\n        return \"No medals won.\"\n    result = []\n    if gold > 0:\n        result.append(f\"Gold medals: {gold}\")\n    if silver > 0:\n        result.append(f\"Silver medals: {silver}\")\n    if bronze > 0:\n        result.append(f\"Bronze medals: {bronze}\")\n    return \"\\n\".join(result)\n\n# Example calls\nprint(medal_table(0, 0, 0))\nprint(medal_table(1, 0, 0))\nprint(medal_table(0, 2, 0))\nprint(medal_table(0, 0, 3))\nprint(medal_table(1, 2, 3))",
    "unit_tests": "import unittest\nfrom main import medal_table\n\nclass TestMedalTable(unittest.TestCase):\n    def test_no_medals(self):\n        self.assertEqual(medal_table(0, 0, 0), \"No medals won.\")\n\n    def test_only_gold(self):\n        self.assertEqual(medal_table(1, 0, 0), \"Gold medals: 1\")\n\n    def test_only_silver(self):\n        self.assertEqual(medal_table(0, 2, 0), \"Silver medals: 2\")\n\n    def test_only_bronze(self):\n        self.assertEqual(medal_table(0, 0, 3), \"Bronze medals: 3\")\n\n    def test_gold_silver_bronze(self):\n        self.assertEqual(medal_table(1, 2, 3), \"Gold medals: 1\\nSilver medals: 2\\nBronze medals: 3\")\n\n    def test_gold_and_silver(self):\n        self.assertEqual(medal_table(1, 2, 0), \"Gold medals: 1\\nSilver medals: 2\")\n\n    def test_gold_and_bronze(self):\n        self.assertEqual(medal_table(1, 0, 3), \"Gold medals: 1\\nBronze medals: 3\")\n\n    def test_silver_and_bronze(self):\n        self.assertEqual(medal_table(0, 2, 3), \"Silver medals: 2\\nBronze medals: 3\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 159,
    "programming_concept": "If-Else statements; Float; While loops",
    "context": "Social Media",
    "task_description": "### Exercise: Social Media - Post Rating\n\nWrite a function named `rate_post(likes, dislikes)` that calculates the rating of a post on a social media platform. The rating should be returned as a float value between -1.0 and 1.0, where:\n\n- A rating of 1.0 means the post has only likes and no dislikes.\n- A rating of -1.0 means the post has only dislikes and no likes.\n- A rating of 0.0 means the post has an equal number of likes and dislikes.\n\nThe function should follow these steps:\n\n1. Calculate the total number of ratings (likes + dislikes).\n2. Calculate the rating value as `(likes - dislikes) / total number of ratings`.\n3. Return the rating value.\n\nIf the total number of ratings is 0, the function should return a rating of 0.0.\n\nExample calls:\n- `rate_post(100, 50)` returns `0.3333333333333333`.\n- `rate_post(0, 0)` returns `0.0`.\n- `rate_post(20, 80)` returns `-0.6`.",
    "code_skeleton": "def rate_post(likes, dislikes):\n    ## Insert code here",
    "model_solution": "def rate_post(likes, dislikes):\n    total = likes + dislikes\n    return (likes - dislikes) / total if total != 0 else 0.0\n\n# Example calls\nprint(rate_post(100, 50))\nprint(rate_post(0, 0))\nprint(rate_post(20, 80))",
    "unit_tests": "import unittest\n\nfrom main import rate_post\n\nclass TestRatePost(unittest.TestCase):\n    def test_only_likes(self):\n        self.assertEqual(rate_post(100, 0), 1.0)\n\n    def test_only_dislikes(self):\n        self.assertEqual(rate_post(0, 100), -1.0)\n\n    def test_equal_number(self):\n        self.assertEqual(rate_post(50, 50), 0.0)\n\n    def test_more_likes(self):\n        self.assertAlmostEqual(rate_post(75, 25), 0.5)\n\n    def test_more_dislikes(self):\n        self.assertAlmostEqual(rate_post(25, 75), -0.5)\n\n    def test_no_ratings(self):\n        self.assertEqual(rate_post(0, 0), 0.0)\n\n    def test_mixed_ratings(self):\n        self.assertAlmostEqual(rate_post(100, 50), 0.3333333333333333)\n        self.assertAlmostEqual(rate_post(20, 80), -0.6)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 160,
    "programming_concept": "While loops; Recursion; Operations with numbers",
    "context": "Olympics",
    "task_description": "### Exercise Task: Olympic Medal Counter\n\nWrite a function named `medal_counter(number_gold, number_silver, number_bronze)` that calculates the total number of medals won by a country at the Olympic Games. The function should take the number of gold, silver, and bronze medals as arguments and return the total number of medals.\n\nAdditionally, the function should call another function `medal_counter_recursive(number_gold, number_silver, number_bronze)` that performs the same calculation recursively.\n\nExample call:\n```python\nmedal_counter(10, 5, 8)\n```\nThis call should return the total number of medals that the country has won.",
    "code_skeleton": "def medal_counter(number_gold, number_silver, number_bronze):\n    ## Insert code here\n\ndef medal_counter_recursive(number_gold, number_silver, number_bronze):\n    ## Insert code here\n",
    "model_solution": "def medal_counter(number_gold, number_silver, number_bronze):\n    return number_gold + number_silver + number_bronze\n\ndef medal_counter_recursive(number_gold, number_silver, number_bronze):\n    if number_gold == 0 and number_silver == 0 and number_bronze == 0:\n        return 0\n    return (1 if number_gold > 0 else 0) + (1 if number_silver > 0 else 0) + (1 if number_bronze > 0 else 0) + medal_counter_recursive(max(0, number_gold-1), max(0, number_silver-1), max(0, number_bronze-1))\n\nprint(medal_counter(10, 5, 8))\nprint(medal_counter_recursive(10, 5, 8))",
    "unit_tests": "import unittest\nfrom main import medal_counter, medal_counter_recursive\n\nclass TestMedalCounter(unittest.TestCase):\n    def test_all_medals(self):\n        self.assertEqual(medal_counter(10, 5, 8), 23)\n        self.assertEqual(medal_counter_recursive(10, 5, 8), 23)\n\n    def test_no_medals(self):\n        self.assertEqual(medal_counter(0, 0, 0), 0)\n        self.assertEqual(medal_counter_recursive(0, 0, 0), 0)\n\n    def test_only_gold(self):\n        self.assertEqual(medal_counter(5, 0, 0), 5)\n        self.assertEqual(medal_counter_recursive(5, 0, 0), 5)\n\n    def test_only_silver(self):\n        self.assertEqual(medal_counter(0, 7, 0), 7)\n        self.assertEqual(medal_counter_recursive(0, 7, 0), 7)\n\n    def test_only_bronze(self):\n        self.assertEqual(medal_counter(0, 0, 3), 3)\n        self.assertEqual(medal_counter_recursive(0, 0, 3), 3)\n\n    def test_edge_cases(self):\n        self.assertEqual(medal_counter(1, 1, 1), 3)\n        self.assertEqual(medal_counter_recursive(1, 1, 1), 3)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 161,
    "programming_concept": "Functions as variables;Integer;Recursion",
    "context": "Mental Health",
    "task_description": "### Exercise Task: Mental Health - Recursive Calculation of Well-being\n\nWrite a function named `calculate_wellbeing(days)` that calculates a person's well-being over a certain number of days. The well-being is defined by a simple recursive formula:\n\n- On a specific day `n`, the well-being is the sum of the well-being of the two previous days `n-1` and `n-2`.\n- The well-being on the first day (`n=1`) is 1.\n- The well-being on the second day (`n=2`) is 1.\n\nThe function should take the number of days `days` as an argument and return the well-being on the last day.\n\nExample call: `calculate_wellbeing(5)` returns `5`.\n\n### Context\n\nIn psychology, it's often studied how a person's well-being develops over time. This task simulates a simple model of well-being, where the well-being on a specific day depends on previous days.",
    "code_skeleton": "def calculate_wellbeing(days):\n    ## Insert code here",
    "model_solution": "def calculate_wellbeing(days):\n    if days <= 2:\n        return 1\n    return calculate_wellbeing(days-1) + calculate_wellbeing(days-2)\n\nprint(calculate_wellbeing(5))",
    "unit_tests": "import unittest\nfrom main import calculate_wellbeing\n\nclass TestCalculateWellbeing(unittest.TestCase):\n    def test_wellbeing_day_1(self):\n        self.assertEqual(calculate_wellbeing(1), 1)\n\n    def test_wellbeing_day_2(self):\n        self.assertEqual(calculate_wellbeing(2), 1)\n\n    def test_wellbeing_day_3(self):\n        self.assertEqual(calculate_wellbeing(3), 2)\n\n    def test_wellbeing_day_5(self):\n        self.assertEqual(calculate_wellbeing(5), 5)\n\n    def test_wellbeing_day_10(self):\n        self.assertEqual(calculate_wellbeing(10), 55)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 162,
    "programming_concept": "Higher-order functions; Control structures (==, !=, <, >, <=, >=, or, and, not); Operations with numbers",
    "context": "Sports",
    "task_description": "### Exercise: Evaluate Athletic Performance\n\nWrite a function named `evaluate_performance(points)` that takes a score as an argument and returns a corresponding evaluation. The evaluation is based on the following criteria:\n\n- If the score is 90 or greater, the function should return \"Excellent\".\n- If the score is between 75 and 89 (inclusive), the function should return \"Good\".\n- If the score is between 50 and 74 (inclusive), the function should return \"Satisfactory\".\n- If the score is less than 50, the function should return \"Needs Improvement\".\n\nExample calls:\n\n```python\nprint(evaluate_performance(95))  # Output: Excellent\nprint(evaluate_performance(80))  # Output: Good\nprint(evaluate_performance(60))  # Output: Satisfactory\nprint(evaluate_performance(45))  # Output: Needs Improvement\n```",
    "code_skeleton": "def evaluate_performance(points):\n    ## Insert code here",
    "model_solution": "def evaluate_performance(points):\n    if points >= 90:\n        return \"Excellent\"\n    elif points >= 75:\n        return \"Good\"\n    elif points >= 50:\n        return \"Satisfactory\"\n    else:\n        return \"Needs Improvement\"\n\nprint(evaluate_performance(95))  # Output: Excellent\nprint(evaluate_performance(80))  # Output: Good\nprint(evaluate_performance(60))  # Output: Satisfactory\nprint(evaluate_performance(45))  # Output: Needs Improvement",
    "unit_tests": "import unittest\nfrom main import evaluate_performance\n\nclass TestEvaluatePerformance(unittest.TestCase):\n    def test_excellent(self):\n        self.assertEqual(evaluate_performance(95), \"Excellent\")\n        self.assertEqual(evaluate_performance(90), \"Excellent\")\n\n    def test_good(self):\n        self.assertEqual(evaluate_performance(80), \"Good\")\n        self.assertEqual(evaluate_performance(75), \"Good\")\n\n    def test_satisfactory(self):\n        self.assertEqual(evaluate_performance(60), \"Satisfactory\")\n        self.assertEqual(evaluate_performance(50), \"Satisfactory\")\n\n    def test_needs_improvement(self):\n        self.assertEqual(evaluate_performance(45), \"Needs Improvement\")\n        self.assertEqual(evaluate_performance(0), \"Needs Improvement\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 163,
    "programming_concept": "Integer; String; Boolean and None",
    "context": "Pets",
    "task_description": "### Exercise: Pet Information\n\nWrite a function named `pet_info(name, age, species)`, that takes information about a pet and returns an appropriate message. \n\n- `name` is a string containing the name of the pet.\n- `age` is an integer representing the pet's age in years.\n- `species` is a string describing the type of pet (e.g., \"Dog\", \"Cat\").\n\nThe function should meet the following conditions:\n1. If the name of the pet is not provided (None), the function should return \"No name provided\".\n2. If the pet's age is less than 0, the function should return \"Invalid age\".\n3. If the species of the pet is \"Dog\", the function should return \"The pet is a dog named [Name] and is [Age] years old.\".\n4. If the species of the pet is \"Cat\", the function should return \"The pet is a cat named [Name] and is [Age] years old.\".\n5. For all other species of pets, the function should return \"The pet is a [Species] named [Name] and is [Age] years old.\".\n\nExample calls:\n- `pet_info(\"Bello\", 5, \"Dog\")` returns \"The pet is a dog named Bello and is 5 years old.\".\n- `pet_info(None, 3, \"Cat\")` returns \"No name provided\".\n- `pet_info(\"Mimi\", -1, \"Cat\")` returns \"Invalid age\".",
    "code_skeleton": "def pet_info(name, age, species):\n    ## Insert code here",
    "model_solution": "def pet_info(name, age, species):\n    if name is None:\n        return \"No name provided\"\n    if age < 0:\n        return \"Invalid age\"\n    if species == \"Dog\":\n        return f\"The pet is a dog named {name} and is {age} years old.\"\n    if species == \"Cat\":\n        return f\"The pet is a cat named {name} and is {age} years old.\"\n    return f\"The pet is a {species} named {name} and is {age} years old.\"\n\n# Example calls\nprint(pet_info(\"Bello\", 5, \"Dog\"))\nprint(pet_info(None, 3, \"Cat\"))\nprint(pet_info(\"Mimi\", -1, \"Cat\"))",
    "unit_tests": "import unittest\nfrom main import pet_info\n\nclass TestPetInfo(unittest.TestCase):\n    def test_dog(self):\n        self.assertEqual(pet_info(\"Bello\", 5, \"Dog\"), \"The pet is a dog named Bello and is 5 years old.\")\n\n    def test_cat(self):\n        self.assertEqual(pet_info(\"Mimi\", 3, \"Cat\"), \"The pet is a cat named Mimi and is 3 years old.\")\n\n    def test_no_name(self):\n        self.assertEqual(pet_info(None, 3, \"Cat\"), \"No name provided\")\n\n    def test_invalid_age(self):\n        self.assertEqual(pet_info(\"Mimi\", -1, \"Cat\"), \"Invalid age\")\n\n    def test_other_species(self):\n        self.assertEqual(pet_info(\"Tweety\", 2, \"Bird\"), \"The pet is a Bird named Tweety and is 2 years old.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 164,
    "programming_concept": "Tuples; Float; Higher-order functions",
    "context": "Gardening",
    "task_description": "### Exercise: Gardening with Python\n\nWrite a function called `calculate_areas(tuple_list, function)` that takes a list of tuples and a function as arguments. Each tuple in the list represents the length and width of a rectangular garden bed in meters. The function passed as the second argument should be applied to each tuple to calculate the area of the respective garden bed. The `calculate_areas` function should return a list of the calculated areas.\n\nExample call:\n```python\ndef area(tuple):\n    return tuple[0] * tuple[1]\n\ngarden_beds = [(2.5, 3.0), (4.0, 1.5), (3.5, 2.0)]\nprint(calculate_areas(garden_beds, area))\n```\n\nExpected Output:\n```\n[7.5, 6.0, 7.0]\n```\n\nImplement the `calculate_areas(tuple_list, function)` function.",
    "code_skeleton": "def calculate_areas(tuple_list, function):\n    ## Insert code here\n",
    "model_solution": "def calculate_areas(tuple_list, function):\n    return [function(t) for t in tuple_list]\n\ndef area(tuple):\n    return tuple[0] * tuple[1]\n\ngarden_beds = [(2.5, 3.0), (4.0, 1.5), (3.5, 2.0)]\nprint(calculate_areas(garden_beds, area))",
    "unit_tests": "import unittest\nfrom main import calculate_areas\n\ndef area(tuple):\n    return tuple[0] * tuple[1]\n\nclass TestCalculateAreas(unittest.TestCase):\n    def test_simple_areas(self):\n        garden_beds = [(2.5, 3.0), (4.0, 1.5), (3.5, 2.0)]\n        self.assertEqual(calculate_areas(garden_beds, area), [7.5, 6.0, 7.0])\n\n    def test_empty_list(self):\n        garden_beds = []\n        self.assertEqual(calculate_areas(garden_beds, area), [])\n\n    def test_single_element(self):\n        garden_beds = [(5.0, 5.0)]\n        self.assertEqual(calculate_areas(garden_beds, area), [25.0])\n\n    def test_zero_area(self):\n        garden_beds = [(0, 5.0), (5.0, 0)]\n        self.assertEqual(calculate_areas(garden_beds, area), [0.0, 0.0])\n\n    def test_negative_values(self):\n        garden_beds = [(-2.0, 3.0), (4.0, -1.5)]\n        self.assertEqual(calculate_areas(garden_beds, area), [-6.0, -6.0])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 165,
    "programming_concept": "Boolean and None; Logical operators (==, !=, <, >, <=, >=, or, and, not); Float",
    "context": "Relationships",
    "task_description": "### Exercise: Check Relationship Status\n\nWrite a function named `relationship_status(age, relationship_duration, shared_interests)` that checks the relationship status based on the person's age, the duration of the relationship (in years), and the number of shared interests. The function should apply the following rules:\n\n1. If the person's age is under 18, the function should return `None`.\n2. If the relationship duration is less than 1 year and the number of shared interests is less than 3, the function should return `False`.\n3. If the relationship duration is 1 year or more and the number of shared interests is 3 or more, the function should return `True`.\n4. In all other cases, the function should return `False`.\n\nExample calls:\n- `relationship_status(17, 2, 5)` returns `None`.\n- `relationship_status(25, 0.5, 2)` returns `False`.\n- `relationship_status(30, 2, 4)` returns `True`.\n- `relationship_status(22, 1, 2)` returns `False`.",
    "code_skeleton": "def relationship_status(age, relationship_duration, shared_interests):\n    ## Insert code here",
    "model_solution": "def relationship_status(age, relationship_duration, shared_interests):\n    if age < 18:\n        return None\n    if relationship_duration >= 1 and shared_interests >= 3:\n        return True\n    return False\n\nprint(relationship_status(17, 2, 5))  # None\nprint(relationship_status(25, 0.5, 2))  # False\nprint(relationship_status(30, 2, 4))  # True\nprint(relationship_status(22, 1, 2))  # False",
    "unit_tests": "import unittest\n\nfrom main import relationship_status\n\nclass TestRelationshipStatus(unittest.TestCase):\n    def test_under_18(self):\n        self.assertIsNone(relationship_status(17, 2, 5))\n\n    def test_short_relationship_few_interests(self):\n        self.assertFalse(relationship_status(25, 0.5, 2))\n\n    def test_long_relationship_many_interests(self):\n        self.assertTrue(relationship_status(30, 2, 4))\n\n    def test_long_relationship_few_interests(self):\n        self.assertFalse(relationship_status(22, 1, 2))\n\n    def test_short_relationship_many_interests(self):\n        self.assertFalse(relationship_status(25, 0.5, 3))\n\n    def test_edge_case_18_years(self):\n        self.assertFalse(relationship_status(18, 0.5, 2))\n\n    def test_edge_case_1_year(self):\n        self.assertTrue(relationship_status(25, 1, 3))\n\n    def test_edge_case_3_interests(self):\n        self.assertTrue(relationship_status(25, 1, 3))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 166,
    "programming_concept": "Integer;For loops;Higher-order functions",
    "context": "Streaming Services",
    "task_description": "### Exercise: Most Popular Movies on Streaming Services\n\nWrite a function named `most_popular_movies(movies, ratings)` that receives a list of movies and a list of ratings as arguments. Each movie in the list `movies` has a corresponding rating in the list `ratings` at the same position. The function should return the movies that have a rating of 8 or higher.\n\nUse a for loop to iterate through the lists and a higher-order function to return the filtered movies.\n\nExample call:\n```python\nmovies = [\"Movie A\", \"Movie B\", \"Movie C\", \"Movie D\"]\nratings = [7, 9, 8, 6]\nprint(most_popular_movies(movies, ratings))\n```\n\nExpected output:\n```\n[\"Movie B\", \"Movie C\"]\n```",
    "code_skeleton": "def most_popular_movies(movies, ratings):\n    ## Insert code here",
    "model_solution": "def most_popular_movies(movies, ratings):\n    return [movie for movie, rating in zip(movies, ratings) if rating >= 8]\n\nmovies = [\"Movie A\", \"Movie B\", \"Movie C\", \"Movie D\"]\nratings = [7, 9, 8, 6]\nprint(most_popular_movies(movies, ratings))",
    "unit_tests": "import unittest\nfrom main import most_popular_movies\n\nclass TestMostPopularMovies(unittest.TestCase):\n    def test_all_movies_popular(self):\n        movies = [\"Movie A\", \"Movie B\", \"Movie C\"]\n        ratings = [8, 9, 10]\n        self.assertEqual(most_popular_movies(movies, ratings), [\"Movie A\", \"Movie B\", \"Movie C\"])\n\n    def test_no_movies_popular(self):\n        movies = [\"Movie A\", \"Movie B\", \"Movie C\"]\n        ratings = [7, 6, 5]\n        self.assertEqual(most_popular_movies(movies, ratings), [])\n\n    def test_mixed_ratings(self):\n        movies = [\"Movie A\", \"Movie B\", \"Movie C\", \"Movie D\"]\n        ratings = [7, 9, 8, 6]\n        self.assertEqual(most_popular_movies(movies, ratings), [\"Movie B\", \"Movie C\"])\n\n    def test_empty_list(self):\n        movies = []\n        ratings = []\n        self.assertEqual(most_popular_movies(movies, ratings), [])\n\n    def test_boundary_rating(self):\n        movies = [\"Movie A\", \"Movie B\", \"Movie C\"]\n        ratings = [8, 7, 8]\n        self.assertEqual(most_popular_movies(movies, ratings), [\"Movie A\", \"Movie C\"])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 167,
    "programming_concept": "Functions as variables;Recursion;Tuples",
    "context": "Cooking",
    "task_description": "### Exercise: Recipe Management with Recursion and Tuples\n\nWrite a function `cook_recipe(recipe)` that takes a recipe as input and recursively processes the ingredients and preparation steps. The recipe is provided as a nested tuple, where each element is either an ingredient (as a string) or another preparation step (as a tuple). The function should output the ingredients and steps in the correct order.\n\nExample:\n\n```python\nrecipe = (\n    \"Prepare ingredients\",\n    (\n        \"Chop tomatoes\",\n        \"Chop onions\",\n        (\n            \"Peel garlic\",\n            \"Chop garlic\"\n        )\n    ),\n    \"Put everything in the pan\",\n    \"Season with salt and pepper\"\n)\n\ncook_recipe(recipe)\n```\n\nExpected Output:\n\n```\nPrepare ingredients\nChop tomatoes\nChop onions\nPeel garlic\nChop garlic\nPut everything in the pan\nSeason with salt and pepper\n```\n\nImplement the function `cook_recipe(recipe)` that recursively traverses the recipe and outputs the steps in the correct order.",
    "code_skeleton": "def cook_recipe(recipe):\n    ## Insert code here",
    "model_solution": "def cook_recipe(recipe):\n    for step in recipe:\n        if isinstance(step, tuple):\n            cook_recipe(step)\n        else:\n            print(step)\n\nrecipe = (\n    \"Prepare ingredients\",\n    (\n        \"Chop tomatoes\",\n        \"Chop onions\",\n        (\n            \"Peel garlic\",\n            \"Chop garlic\"\n        )\n    ),\n    \"Put everything in the pan\",\n    \"Season with salt and pepper\"\n)\n\ncook_recipe(recipe)",
    "unit_tests": "import unittest\nfrom io import StringIO\nimport sys\nfrom main import cook_recipe\n\nclass TestCookRecipe(unittest.TestCase):\n    def setUp(self):\n        self.recipe = (\n            \"Prepare ingredients\",\n            (\n                \"Chop tomatoes\",\n                \"Chop onions\",\n                (\n                    \"Peel garlic\",\n                    \"Chop garlic\"\n                )\n            ),\n            \"Put everything in the pan\",\n            \"Season with salt and pepper\"\n        )\n\n    def test_cook_recipe(self):\n        expected_output = (\n            \"Prepare ingredients\\n\"\n            \"Chop tomatoes\\n\"\n            \"Chop onions\\n\"\n            \"Peel garlic\\n\"\n            \"Chop garlic\\n\"\n            \"Put everything in the pan\\n\"\n            \"Season with salt and pepper\\n\"\n        )\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        cook_recipe(self.recipe)\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue(), expected_output)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 168,
    "programming_concept": "Logical operators (==, !=, <, >, <=, >=, or, and, not); Recursion; For loops",
    "context": "Streaming Services",
    "task_description": "### Exercise: Most Popular Show on a Streaming Service\n\nWrite a function `most_popular_show(show_list)` that receives a list of shows and their ratings as input and returns the show with the highest rating. Each show in the list is a dictionary with keys `name` and `rating`. The function should recursively find the show with the highest rating.\n\nExample call:\n```python\nshows = [\n    {\"name\": \"Show A\", \"rating\": 8.5},\n    {\"name\": \"Show B\", \"rating\": 9.0},\n    {\"name\": \"Show C\", \"rating\": 7.8}\n]\nprint(most_popular_show(shows))  # Output: \"Show B\"\n```\n\nImplement the function so that it recursively determines the highest rating and returns the name of the show with the highest rating.",
    "code_skeleton": "def most_popular_show(show_list):\n    ## Insert code here",
    "model_solution": "def most_popular_show(show_list):\n    if len(show_list) == 1:\n        return show_list[0]['name']\n    rest_best = most_popular_show(show_list[1:])\n    return show_list[0]['name'] if show_list[0]['rating'] > next(s['rating'] for s in show_list if s['name'] == rest_best) else rest_best\n\nshows = [\n    {\"name\": \"Show A\", \"rating\": 8.5},\n    {\"name\": \"Show B\", \"rating\": 9.0},\n    {\"name\": \"Show C\", \"rating\": 7.8}\n]\nprint(most_popular_show(shows))  # Output: \"Show B\"",
    "unit_tests": "import unittest\nfrom main import most_popular_show\n\nclass TestMostPopularShow(unittest.TestCase):\n    def test_simple_case(self):\n        shows = [\n            {\"name\": \"Show A\", \"rating\": 8.5},\n            {\"name\": \"Show B\", \"rating\": 9.0},\n            {\"name\": \"Show C\", \"rating\": 7.8}\n        ]\n        self.assertEqual(most_popular_show(shows), \"Show B\")\n\n    def test_same_rating(self):\n        shows = [\n            {\"name\": \"Show A\", \"rating\": 8.0},\n            {\"name\": \"Show B\", \"rating\": 8.0},\n            {\"name\": \"Show C\", \"rating\": 8.0}\n        ]\n        self.assertEqual(most_popular_show(shows), \"Show A\")\n\n    def test_single_show(self):\n        shows = [\n            {\"name\": \"Show A\", \"rating\": 8.5}\n        ]\n        self.assertEqual(most_popular_show(shows), \"Show A\")\n\n    def test_empty_list(self):\n        shows = []\n        with self.assertRaises(IndexError):\n            most_popular_show(shows)\n\n    def test_negative_ratings(self):\n        shows = [\n            {\"name\": \"Show A\", \"rating\": -1.0},\n            {\"name\": \"Show B\", \"rating\": -2.0},\n            {\"name\": \"Show C\", \"rating\": -3.0}\n        ]\n        self.assertEqual(most_popular_show(shows), \"Show A\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 169,
    "programming_concept": "Integer;For loops;Higher-order functions",
    "context": "Music",
    "task_description": "### Exercise: Counting Musical Notes\n\nWrite a function named `count_notes(musical_piece)` that accepts a list of integers as an argument. Each integer in the list represents a note in a musical piece. The function should count the occurrences of each note and return the result as a dictionary, with the keys being the notes and the values being the count of occurrences.\n\nExample call:\n```python\nmusical_piece = [60, 62, 64, 60, 62, 60, 65, 67, 60]\nprint(count_notes(musical_piece))\n```\n\nExpected output:\n```python\n{60: 4, 62: 2, 64: 1, 65: 1, 67: 1}\n```\n\nImplement the function `count_notes(musical_piece)` so that it correctly counts the occurrences of each note in the list and returns the result as a dictionary.",
    "code_skeleton": "def count_notes(musical_piece):\n    ## Insert code here",
    "model_solution": "def count_notes(musical_piece):\n    return {note: musical_piece.count(note) for note in set(musical_piece)}\n\nmusical_piece = [60, 62, 64, 60, 62, 60, 65, 67, 60]\nprint(count_notes(musical_piece))",
    "unit_tests": "import unittest\n\nfrom main import count_notes\n\nclass TestCountNotes(unittest.TestCase):\n    def test_simple_piece(self):\n        self.assertEqual(count_notes([60, 62, 64, 60, 62, 60, 65, 67, 60]), {60: 4, 62: 2, 64: 1, 65: 1, 67: 1})\n\n    def test_empty_piece(self):\n        self.assertEqual(count_notes([]), {})\n\n    def test_single_note(self):\n        self.assertEqual(count_notes([60]), {60: 1})\n\n    def test_all_notes_once(self):\n        self.assertEqual(count_notes([60, 61, 62, 63, 64, 65, 66, 67]), {60: 1, 61: 1, 62: 1, 63: 1, 64: 1, 65: 1, 66: 1, 67: 1})\n\n    def test_all_notes_multiple_times(self):\n        self.assertEqual(count_notes([60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67]), {60: 2, 61: 2, 62: 2, 63: 2, 64: 2, 65: 2, 66: 2, 67: 2})\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 170,
    "programming_concept": "Lists;While loops;Functions as variables",
    "context": "Streaming Services",
    "task_description": "### Exercise Task: Streaming Services and Series\n\nWrite a function `filter_series(series_list, rating)`, which receives a list of series and a minimum rating as parameters. The function should return all series from the list that have a rating equal to or higher than the specified minimum rating.\n\nThe series list is a list of tuples, where each tuple contains the name of the series and its rating. The rating is a number between 1 and 10.\n\nUse a `while` loop to iterate through the list and filter the series.\n\nExample:\n\n```python\nseries = [\"Breaking Bad\", 9.5), (\"Stranger Things\", 8.7), (\"The Office\", 8.9), (\"Friends\", 8.0)]\nprint(filter_series(series, 8.5))\n```\n\nExpected Output:\n\n```\n[('Breaking Bad', 9.5), ('Stranger Things', 8.7), ('The Office', 8.9)]\n```\n",
    "code_skeleton": "def filter_series(series_list, rating):\n    ## Insert code here\n",
    "model_solution": "def filter_series(series_list, rating):\n    result = []\n    i = 0\n    while i < len(series_list):\n        if series_list[i][1] >= rating:\n            result.append(series_list[i])\n        i += 1\n    return result\n\nseries = [(\"Breaking Bad\", 9.5), (\"Stranger Things\", 8.7), (\"The Office\", 8.9), (\"Friends\", 8.0)]\nprint(filter_series(series, 8.5))\n",
    "unit_tests": "import unittest\nfrom main import filter_series\n\nclass TestFilterSeries(unittest.TestCase):\n    def test_all_series(self):\n        series = [(\"Breaking Bad\", 9.5), (\"Stranger Things\", 8.7), (\"The Office\", 8.9), (\"Friends\", 8.0)]\n        self.assertEqual(filter_series(series, 8.0), series)\n\n    def test_no_series(self):\n        series = [(\"Breaking Bad\", 9.5), (\"Stranger Things\", 8.7), (\"The Office\", 8.9), (\"Friends\", 8.0)]\n        self.assertEqual(filter_series(series, 10.0), [])\n\n    def test_some_series(self):\n        series = [(\"Breaking Bad\", 9.5), (\"Stranger Things\", 8.7), (\"The Office\", 8.9), (\"Friends\", 8.0)]\n        self.assertEqual(filter_series(series, 8.5), [(\"Breaking Bad\", 9.5), (\"Stranger Things\", 8.7), (\"The Office\", 8.9)])\n\n    def test_empty_list(self):\n        series = []\n        self.assertEqual(filter_series(series, 8.5), [])\n\n    def test_boundary_rating(self):\n        series = [(\"Breaking Bad\", 9.5), (\"Stranger Things\", 8.7), (\"The Office\", 8.9), (\"Friends\", 8.0)]\n        self.assertEqual(filter_series(series, 8.7), [(\"Breaking Bad\", 9.5), (\"Stranger Things\", 8.7), (\"The Office\", 8.9)])\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 171,
    "programming_concept": "If-Else statements;For loops;Tuples",
    "context": "Basketball",
    "task_description": "### Exercise: Basketball Statistics\n\nWrite a function named `evaluate_player(player_statistics)` that takes a list of tuples as an argument. Each tuple contains a player's name and the number of points scored in a game. The function should evaluate the players and return an appropriate message.\n\n- If a player scores more than 20 points, the message should be \"Excellent, [Name]!\"\n- If a player scores between 10 and 20 points, the message should be \"Well done, [Name]!\"\n- If a player scores less than 10 points, the message should be \"Keep it up, [Name]!\"\n\nExample call:\n```python\nplayer_statistics = [(\"Anna\", 25), (\"Ben\", 15), (\"Chris\", 8)]\nevaluate_player(player_statistics)\n```\n\nExpected output:\n```\nExcellent, Anna!\nWell done, Ben!\nKeep it up, Chris!\n```",
    "code_skeleton": "def evaluate_player(player_statistics):\n    ## Insert code here\n",
    "model_solution": "def evaluate_player(player_statistics):\n    for name, points in player_statistics:\n        if points > 20:\n            print(f\"Excellent, {name}!\")\n        elif 10 <= points <= 20:\n            print(f\"Well done, {name}!\")\n        else:\n            print(f\"Keep it up, {name}!\")\n\nplayer_statistics = [(\"Anna\", 25), (\"Ben\", 15), (\"Chris\", 8)]\nevaluate_player(player_statistics)\n",
    "unit_tests": "import unittest\nfrom main import evaluate_player\n\nclass TestEvaluatePlayer(unittest.TestCase):\n    def test_excellent(self):\n        player_statistics = [(\"Anna\", 25)]\n        expected_output = \"Excellent, Anna!\\n\"\n        with self.assertLogs(level='INFO') as log:\n            evaluate_player(player_statistics)\n            self.assertEqual(log.output, [expected_output])\n\n    def test_well_done(self):\n        player_statistics = [(\"Ben\", 15)]\n        expected_output = \"Well done, Ben!\\n\"\n        with self.assertLogs(level='INFO') as log:\n            evaluate_player(player_statistics)\n            self.assertEqual(log.output, [expected_output])\n\n    def test_keep_it_up(self):\n        player_statistics = [(\"Chris\", 8)]\n        expected_output = \"Keep it up, Chris!\\n\"\n        with self.assertLogs(level='INFO') as log:\n            evaluate_player(player_statistics)\n            self.assertEqual(log.output, [expected_output])\n\n    def test_mixed_evaluations(self):\n        player_statistics = [(\"Anna\", 25), (\"Ben\", 15), (\"Chris\", 8)]\n        expected_output = [\n            \"Excellent, Anna!\\n\",\n            \"Well done, Ben!\\n\",\n            \"Keep it up, Chris!\\n\"\n        ]\n        with self.assertLogs(level='INFO') as log:\n            evaluate_player(player_statistics)\n            self.assertEqual(log.output, expected_output)\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 172,
    "programming_concept": "Float;Higher-order functions;Integer",
    "context": "Animals",
    "task_description": "### Exercise: Animals and Their Characteristics\n\nWrite a function named `animal_info(animal, characteristic)` that returns information about different animals and their characteristics. The function should accept two parameters: `animal` (a string) and `characteristic` (a string). \n\nThe function should support the following animals and characteristics:\n\n- Dog:\n  - \"weight\" (Float): Returns the average weight of a dog in kilograms.\n  - \"legs\" (Integer): Returns the number of legs a dog has.\n- Cat:\n  - \"weight\" (Float): Returns the average weight of a cat in kilograms.\n  - \"legs\" (Integer): Returns the number of legs a cat has.\n- Bird:\n  - \"weight\" (Float): Returns the average weight of a bird in kilograms.\n  - \"legs\" (Integer): Returns the number of legs a bird has.\n\nExample calls:\n- `animal_info(\"Dog\", \"weight\")` should return the average weight of a dog.\n- `animal_info(\"Cat\", \"legs\")` should return the number of legs a cat has.\n\nImplement the function so that it returns the corresponding values.",
    "code_skeleton": "def animal_info(animal, characteristic):\n    ## Insert code here",
    "model_solution": "def animal_info(animal, characteristic):\n    data = {\n        \"Dog\": {\"weight\": 30.0, \"legs\": 4},\n        \"Cat\": {\"weight\": 4.5, \"legs\": 4},\n        \"Bird\": {\"weight\": 0.1, \"legs\": 2}\n    }\n    return data[animal][characteristic]\n\nprint(animal_info(\"Dog\", \"weight\"))\nprint(animal_info(\"Cat\", \"legs\"))\nprint(animal_info(\"Bird\", \"weight\"))",
    "unit_tests": "import unittest\nfrom main import animal_info\n\nclass TestAnimalInfo(unittest.TestCase):\n    def test_dog_weight(self):\n        self.assertEqual(animal_info(\"Dog\", \"weight\"), 30.0)\n\n    def test_dog_legs(self):\n        self.assertEqual(animal_info(\"Dog\", \"legs\"), 4)\n\n    def test_cat_weight(self):\n        self.assertEqual(animal_info(\"Cat\", \"weight\"), 4.5)\n\n    def test_cat_legs(self):\n        self.assertEqual(animal_info(\"Cat\", \"legs\"), 4)\n\n    def test_bird_weight(self):\n        self.assertEqual(animal_info(\"Bird\", \"weight\"), 0.1)\n\n    def test_bird_legs(self):\n        self.assertEqual(animal_info(\"Bird\", \"legs\"), 2)\n\n    def test_unknown_animal(self):\n        with self.assertRaises(KeyError):\n            animal_info(\"Elephant\", \"weight\")\n\n    def test_unknown_characteristic(self):\n        with self.assertRaises(KeyError):\n            animal_info(\"Dog\", \"color\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 173,
    "programming_concept": "Operations with numbers; Tuples; For loops",
    "context": "Sports",
    "task_description": "### Exercise: Analyzing Sports Performances\n\nWrite a function named `analyze_performances(performances)` that takes a list of tuples as an argument. Each tuple contains the name of an athlete and their score in a competition. The function should calculate and return the average score of all athletes.\n\nExample call:\n```python\nperformances = [(\"Anna\", 15), (\"Ben\", 20), (\"Clara\", 18), (\"David\", 22)]\naverage = analyze_performances(performances)\nprint(average)  # Expected output: 18.75\n```\n\n**Note:** The function should not expect input from standard input.",
    "code_skeleton": "def analyze_performances(performances):\n    ## Insert code here",
    "model_solution": "def analyze_performances(performances):\n    return sum(score for _, score in performances) / len(performances)\n\nperformances = [(\"Anna\", 15), (\"Ben\", 20), (\"Clara\", 18), (\"David\", 22)]\naverage = analyze_performances(performances)\nprint(average)  # Expected output: 18.75",
    "unit_tests": "import unittest\n\nfrom main import analyze_performances\n\nclass TestAnalyzePerformances(unittest.TestCase):\n    def test_average(self):\n        performances = [(\"Anna\", 15), (\"Ben\", 20), (\"Clara\", 18), (\"David\", 22)]\n        self.assertEqual(analyze_performances(performances), 18.75)\n\n    def test_empty_list(self):\n        performances = []\n        with self.assertRaises(ZeroDivisionError):\n            analyze_performances(performances)\n\n    def test_single_athlete(self):\n        performances = [(\"Anna\", 15)]\n        self.assertEqual(analyze_performances(performances), 15)\n\n    def test_negative_scores(self):\n        performances = [(\"Anna\", -5), (\"Ben\", 10)]\n        self.assertEqual(analyze_performances(performances), 2.5)\n\n    def test_mixed_scores(self):\n        performances = [(\"Anna\", 0), (\"Ben\", 10), (\"Clara\", 20)]\n        self.assertEqual(analyze_performances(performances), 10)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 174,
    "programming_concept": "Functions as variables; Float; For loops",
    "context": "Mental Health",
    "task_description": "### Exercise: Calculating Average Stress Level\n\nIn this task, you should implement a function that calculates the average stress level of a person over a week. The stress level is given as a list of floating point numbers (floats) for each day of the week.\n\nWrite a function named `average_stress_level(stress_level_list)`, which takes a list of floats as an argument and calculates and returns the average stress level.\n\nExample call:\n```python\nstress_level = [3.5, 4.0, 2.8, 5.1, 3.3, 4.2, 3.9]\nprint(average_stress_level(stress_level))  # Expected output: 3.9714285714285715\n```\n\n### Requirements:\n1. The function should accept a list of floats as input.\n2. The function should return the average stress level as a float.\n3. Use a `for` loop to calculate the sum of the stress levels.\n4. Calculate the average by dividing the sum by the number of days.\n\n### Context:\nA person's stress level can vary greatly and is an important indicator of mental health. By calculating the average stress level over a week, one can better understand how stressed a person is on average and whether stress management measures are necessary.",
    "code_skeleton": "def average_stress_level(stress_level_list):\n    # Insert code here",
    "model_solution": "def average_stress_level(stress_level_list):\n    return sum(stress_level_list) / len(stress_level_list)\n\nstress_level = [3.5, 4.0, 2.8, 5.1, 3.3, 4.2, 3.9]\nprint(average_stress_level(stress_level))",
    "unit_tests": "import unittest\nfrom main import average_stress_level\n\nclass TestAverageStressLevel(unittest.TestCase):\n    def test_average(self):\n        self.assertAlmostEqual(average_stress_level([3.5, 4.0, 2.8, 5.1, 3.3, 4.2, 3.9]), 3.9714285714285715)\n\n    def test_empty_list(self):\n        with self.assertRaises(ZeroDivisionError):\n            average_stress_level([])\n\n    def test_single_element(self):\n        self.assertEqual(average_stress_level([4.0]), 4.0)\n\n    def test_negative_values(self):\n        self.assertAlmostEqual(average_stress_level([-1.0, -2.0, -3.0]), -2.0)\n\n    def test_mixed_values(self):\n        self.assertAlmostEqual(average_stress_level([1.0, -1.0, 1.0, -1.0]), 0.0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 175,
    "programming_concept": "Functions as variables; If-Else statements; Lists",
    "context": "Pets",
    "task_description": "### Exercise: Pet Filter\n\nWrite a function named `filter_pets(pets, criterion)`, which takes a list of pets and a criterion as parameters. The function should return a new list containing only the pets that match the criterion.\n\nThe pets are given as words in a list, e.g., `['Dog', 'Cat', 'Hamster', 'Bird', 'Fish']`.\n\nThe criterion is a function that takes a pet as an argument and returns a Boolean value. For example, a criterion could be a function that checks if the pet's name starts with a specific letter.\n\nExample call:\n```python\npets = ['Dog', 'Cat', 'Hamster', 'Bird', 'Fish']\ncriterion = lambda pet: pet.startswith('H')\nprint(filter_pets(pets, criterion))  # Output: ['Dog', 'Hamster']\n```\n\nImplement the function `filter_pets(pets, criterion)` so that it fulfills the functionality described above.",
    "code_skeleton": "def filter_pets(pets, criterion):\n    ## Insert code here",
    "model_solution": "def filter_pets(pets, criterion):\n    return [pet for pet in pets if criterion(pet)]\n\npets = ['Dog', 'Cat', 'Hamster', 'Bird', 'Fish']\ncriterion = lambda pet: pet.startswith('H')\nprint(filter_pets(pets, criterion))  # Output: ['Dog', 'Hamster']",
    "unit_tests": "import unittest\nfrom main import filter_pets\n\nclass TestFilterPets(unittest.TestCase):\n    def test_pets_with_h(self):\n        pets = ['Dog', 'Cat', 'Hamster', 'Bird', 'Fish']\n        criterion = lambda pet: pet.startswith('H')\n        self.assertEqual(filter_pets(pets, criterion), ['Dog', 'Hamster'])\n\n    def test_pets_with_k(self):\n        pets = ['Dog', 'Cat', 'Hamster', 'Bird', 'Fish']\n        criterion = lambda pet: pet.startswith('K')\n        self.assertEqual(filter_pets(pets, criterion), ['Cat'])\n\n    def test_pets_with_v(self):\n        pets = ['Dog', 'Cat', 'Hamster', 'Bird', 'Fish']\n        criterion = lambda pet: pet.startswith('V')\n        self.assertEqual(filter_pets(pets, criterion), ['Bird'])\n\n    def test_pets_with_f(self):\n        pets = ['Dog', 'Cat', 'Hamster', 'Bird', 'Fish']\n        criterion = lambda pet: pet.startswith('F')\n        self.assertEqual(filter_pets(pets, criterion), ['Fish'])\n\n    def test_empty_list(self):\n        pets = []\n        criterion = lambda pet: pet.startswith('H')\n        self.assertEqual(filter_pets(pets, criterion), [])\n\n    def test_no_pets_meet_criterion(self):\n        pets = ['Dog', 'Cat', 'Hamster', 'Bird', 'Fish']\n        criterion = lambda pet: pet.startswith('Z')\n        self.assertEqual(filter_pets(pets, criterion), [])\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 176,
    "programming_concept": "If-Else statements;Tuples;Float",
    "context": "Rugby",
    "task_description": "### Exercise: Rugby Player Weight\n\nWrite a function named `player_weight(player)`, which receives a tuple as an argument. The tuple contains the player's name and weight in kilograms as a float. The function should check whether the player's weight is above or below 100 kg and return an appropriate message.\n\n- If the player's weight is 100 kg or more, the message should be: \"`[Name] is a heavy player.`\"\n- If the player's weight is below 100 kg, the message should be: \"`[Name] is a light player.`\"\n\nExample call:\n```python\nplayer_weight((\"Max\", 105.5))  # returns \"Max is a heavy player.\"\nplayer_weight((\"Tom\", 95.0))   # returns \"Tom is a light player.\"\n```",
    "code_skeleton": "def player_weight(player):\n    ## Insert code here",
    "model_solution": "def player_weight(player):\n    name, weight = player\n    if weight >= 100:\n        return f\"{name} is a heavy player.\"\n    else:\n        return f\"{name} is a light player.\"\n\nplayer_weight((\"Max\", 105.5))\nplayer_weight((\"Tom\", 95.0))",
    "unit_tests": "import unittest\nfrom main import player_weight\n\nclass TestPlayerWeight(unittest.TestCase):\n    def test_heavy_player(self):\n        self.assertEqual(player_weight((\"Max\", 105.5)), \"Max is a heavy player.\")\n\n    def test_light_player(self):\n        self.assertEqual(player_weight((\"Tom\", 95.0)), \"Tom is a light player.\")\n\n    def test_boundary_heavy_player(self):\n        self.assertEqual(player_weight((\"John\", 100.0)), \"John is a heavy player.\")\n\n    def test_boundary_light_player(self):\n        self.assertEqual(player_weight((\"Alex\", 99.9)), \"Alex is a light player.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 177,
    "programming_concept": "String; Functions as variables; Lists",
    "context": "Streaming Services",
    "task_description": "### Exercise Task: Streaming Services\n\nWrite a function named `filter_genres(movies, genre)`, which takes a list of movies and a genre as parameters. Each movie is a dictionary with the keys \"title\" and \"genre\". The function should return a new list containing only the movies that match the specified genre.\n\nExample call:\n```python\nmovies = [\n    {\"title\": \"Film A\", \"genre\": \"Action\"},\n    {\"title\": \"Film B\", \"genre\": \"Drama\"},\n    {\"title\": \"Film C\", \"genre\": \"Action\"},\n    {\"title\": \"Film D\", \"genre\": \"Comedy\"}\n]\n\nresult = filter_genres(movies, \"Action\")\n# result should be [{\"title\": \"Film A\", \"genre\": \"Action\"}, {\"title\": \"Film C\", \"genre\": \"Action\"}]\n```\n\nImplement the `filter_genres(movies, genre)` function to fulfill the functionality as described above.",
    "code_skeleton": "def filter_genres(movies, genre):\n    ## Insert code here\n",
    "model_solution": "def filter_genres(movies, genre):\n    return [movie for movie in movies if movie['genre'] == genre]\n\nmovies = [\n    {\"title\": \"Film A\", \"genre\": \"Action\"},\n    {\"title\": \"Film B\", \"genre\": \"Drama\"},\n    {\"title\": \"Film C\", \"genre\": \"Action\"},\n    {\"title\": \"Film D\", \"genre\": \"Comedy\"}\n]\n\nresult = filter_genres(movies, \"Action\")\nprint(result)\n",
    "unit_tests": "import unittest\nfrom main import filter_genres\n\nclass TestFilterGenres(unittest.TestCase):\n    def test_action_genre(self):\n        movies = [\n            {\"title\": \"Film A\", \"genre\": \"Action\"},\n            {\"title\": \"Film B\", \"genre\": \"Drama\"},\n            {\"title\": \"Film C\", \"genre\": \"Action\"},\n            {\"title\": \"Film D\", \"genre\": \"Comedy\"}\n        ]\n        self.assertEqual(filter_genres(movies, \"Action\"), [\n            {\"title\": \"Film A\", \"genre\": \"Action\"},\n            {\"title\": \"Film C\", \"genre\": \"Action\"}\n        ])\n\n    def test_drama_genre(self):\n        movies = [\n            {\"title\": \"Film A\", \"genre\": \"Action\"},\n            {\"title\": \"Film B\", \"genre\": \"Drama\"},\n            {\"title\": \"Film C\", \"genre\": \"Action\"},\n            {\"title\": \"Film D\", \"genre\": \"Comedy\"}\n        ]\n        self.assertEqual(filter_genres(movies, \"Drama\"), [\n            {\"title\": \"Film B\", \"genre\": \"Drama\"}\n        ])\n\n    def test_comedy_genre(self):\n        movies = [\n            {\"title\": \"Film A\", \"genre\": \"Action\"},\n            {\"title\": \"Film B\", \"genre\": \"Drama\"},\n            {\"title\": \"Film C\", \"genre\": \"Action\"},\n            {\"title\": \"Film D\", \"genre\": \"Comedy\"}\n        ]\n        self.assertEqual(filter_genres(movies, \"Comedy\"), [\n            {\"title\": \"Film D\", \"genre\": \"Comedy\"}\n        ])\n\n    def test_empty_result(self):\n        movies = [\n            {\"title\": \"Film A\", \"genre\": \"Action\"},\n            {\"title\": \"Film B\", \"genre\": \"Drama\"},\n            {\"title\": \"Film C\", \"genre\": \"Action\"},\n            {\"title\": \"Film D\", \"genre\": \"Comedy\"}\n        ]\n        self.assertEqual(filter_genres(movies, \"Horror\"), [])\n\n    def test_empty_movie_list(self):\n        movies = []\n        self.assertEqual(filter_genres(movies, \"Action\"), [])\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 178,
    "programming_concept": "Boolean and None;For loops;Operations with numbers",
    "context": "Virtual Reality",
    "task_description": "### Exercise: Virtual Reality - Visibility Calculation\n\nIn virtual reality, it is important to calculate the visibility of objects to optimize performance. Write a function `calculate_visibility(objects)`, which receives a list of objects. Each object is represented by a number indicating the distance of the object from the viewer.\n\nThe function should return the number of objects that are within a certain viewing distance. The viewing distance is 100 units. If the list is empty, the function should return `None`.\n\nExample call:\n```python\nobjects = [50, 150, 30, 200, 90]\ncalculate_visibility(objects)\n```\nExpected return:\n```\n3\n```\n\n### Requirements:\n- Implement the function `calculate_visibility(objects)`.\n- The function should return the number of objects within the viewing distance of 100 units.\n- If the list is empty, the function should return `None`.",
    "code_skeleton": "def calculate_visibility(objects):\n    ## Insert code here",
    "model_solution": "def calculate_visibility(objects):\n    if not objects:\n        return None\n    return sum(1 for obj in objects if obj <= 100)\n\nobjects = [50, 150, 30, 200, 90]\nprint(calculate_visibility(objects))",
    "unit_tests": "import unittest\nfrom main import calculate_visibility\n\nclass TestCalculateVisibility(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertIsNone(calculate_visibility([]))\n\n    def test_all_objects_within_view(self):\n        self.assertEqual(calculate_visibility([10, 20, 30, 40, 50]), 5)\n\n    def test_no_objects_in_view(self):\n        self.assertEqual(calculate_visibility([110, 120, 130, 140, 150]), 0)\n\n    def test_mixed_objects(self):\n        self.assertEqual(calculate_visibility([50, 150, 30, 200, 90]), 3)\n\n    def test_boundary_view_distance(self):\n        self.assertEqual(calculate_visibility([100, 101, 99, 102, 98]), 3)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 179,
    "programming_concept": "For loops;While loops;If-Else statements",
    "context": "Fishing",
    "task_description": "### Exercise: Count Fish\n\nWrite a function named `count_fish(fish_list)` that takes a list of fish as input. The function should count the number of fish in the list while distinguishing between \"Carp\" and \"Pike\".\n\n- If the fish is a \"Carp\", it should be added to the Carp count.\n- If the fish is a \"Pike\", it should be added to the Pike count.\n- All other fish should be ignored.\n\nThe function should return a dictionary containing the number of Carp and Pike.\n\nExample call:\n```python\nfish = [\"Carp\", \"Pike\", \"Carp\", \"Trout\", \"Pike\", \"Carp\"]\nprint(count_fish(fish))\n```\n\nExpected output:\n```python\n{\"Carp\": 3, \"Pike\": 2}\n```",
    "code_skeleton": "def count_fish(fish_list):\n    ## Insert code here\n",
    "model_solution": "def count_fish(fish_list):\n    count = {\"Carp\": 0, \"Pike\": 0}\n    for fish in fish_list:\n        if fish in count:\n            count[fish] += 1\n    return count\n\nfish = [\"Carp\", \"Pike\", \"Carp\", \"Trout\", \"Pike\", \"Carp\"]\nprint(count_fish(fish))",
    "unit_tests": "import unittest\nfrom main import count_fish\n\nclass TestCountFish(unittest.TestCase):\n    def test_mixed_fish(self):\n        self.assertEqual(count_fish([\"Carp\", \"Pike\", \"Carp\", \"Trout\", \"Pike\", \"Carp\"]), {\"Carp\": 3, \"Pike\": 2})\n\n    def test_only_carp(self):\n        self.assertEqual(count_fish([\"Carp\", \"Carp\", \"Carp\"]), {\"Carp\": 3, \"Pike\": 0})\n\n    def test_only_pike(self):\n        self.assertEqual(count_fish([\"Pike\", \"Pike\", \"Pike\"]), {\"Carp\": 0, \"Pike\": 3})\n\n    def test_no_fish(self):\n        self.assertEqual(count_fish([]), {\"Carp\": 0, \"Pike\": 0})\n\n    def test_ignored_fish(self):\n        self.assertEqual(count_fish([\"Trout\", \"Perch\", \"Catfish\"]), {\"Carp\": 0, \"Pike\": 0})\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 180,
    "programming_concept": "Tuples;Operations with numbers;Control structures (==, !=, <, >, <=, >=, or, and, not)",
    "context": "Music",
    "task_description": "### Exercise: Music Playlist Analysis \n\nWrite a function named `analyse_playlist(playlist)`, that takes a list of tuples as an argument. Each tuple represents a song and contains two elements: the name of the song (String) and the duration of the song in seconds (Integer).\n\nThe function should accomplish the following tasks:\n1. Check if the playlist contains at least 5 songs. If not, the function should return \"Too few songs in the playlist\".\n2. Find and return the name of the longest song in the playlist.\n3. Find and return the name of the shortest song in the playlist.\n4. Calculate and return the average duration of the songs in the playlist.\n\nExample call:\n```python\nplaylist = [(\"Song A\", 210), (\"Song B\", 180), (\"Song C\", 240), (\"Song D\", 150), (\"Song E\", 200)]\nanalyse_playlist(playlist)\n```\n\nExpected return:\n```python\n(\"Longest Song: Song C\", \"Shortest Song: Song D\", \"Average Duration: 196.0 Seconds\")\n```",
    "code_skeleton": "def analyse_playlist(playlist):\n    ## Insert code here",
    "model_solution": "def analyse_playlist(playlist):\n    if len(playlist) < 5:\n        return \"Too few songs in the playlist\"\n    longest = max(playlist, key=lambda x: x[1])\n    shortest = min(playlist, key=lambda x: x[1])\n    avg_duration = sum(song[1] for song in playlist) / len(playlist)\n    return (f\"Longest Song: {longest[0]}\", f\"Shortest Song: {shortest[0]}\", f\"Average Duration: {avg_duration:.1f} Seconds\")\n\nplaylist = [(\"Song A\", 210), (\"Song B\", 180), (\"Song C\", 240), (\"Song D\", 150), (\"Song E\", 200)]\nprint(analyse_playlist(playlist))",
    "unit_tests": "import unittest\n\nclass TestAnalysePlaylist(unittest.TestCase):\n    def test_too_few_songs(self):\n        playlist = [(\"Song A\", 210), (\"Song B\", 180)]\n        self.assertEqual(analyse_playlist(playlist), \"Too few songs in the playlist\")\n\n    def test_longest_song(self):\n        playlist = [(\"Song A\", 210), (\"Song B\", 180), (\"Song C\", 240), (\"Song D\", 150), (\"Song E\", 200)]\n        result = analyse_playlist(playlist)\n        self.assertIn(\"Longest Song: Song C\", result)\n\n    def test_shortest_song(self):\n        playlist = [(\"Song A\", 210), (\"Song B\", 180), (\"Song C\", 240), (\"Song D\", 150), (\"Song E\", 200)]\n        result = analyse_playlist(playlist)\n        self.assertIn(\"Shortest Song: Song D\", result)\n\n    def test_average_duration(self):\n        playlist = [(\"Song A\", 210), (\"Song B\", 180), (\"Song C\", 240), (\"Song D\", 150), (\"Song E\", 200)]\n        result = analyse_playlist(playlist)\n        self.assertIn(\"Average Duration: 196.0 Seconds\", result)\n\n    def test_exactly_five_songs(self):\n        playlist = [(\"Song A\", 210), (\"Song B\", 180), (\"Song C\", 240), (\"Song D\", 150), (\"Song E\", 200)]\n        result = analyse_playlist(playlist)\n        self.assertEqual(result, (\"Longest Song: Song C\", \"Shortest Song: Song D\", \"Average Duration: 196.0 Seconds\"))\n\n    def test_more_than_five_songs(self):\n        playlist = [(\"Song A\", 210), (\"Song B\", 180), (\"Song C\", 240), (\"Song D\", 150), (\"Song E\", 200), (\"Song F\", 300)]\n        result = analyse_playlist(playlist)\n        self.assertEqual(result, (\"Longest Song: Song F\", \"Shortest Song: Song D\", \"Average Duration: 213.3 Seconds\"))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 181,
    "programming_concept": "For loops; Recursion; Operations with numbers",
    "context": "Sports",
    "task_description": "### Exercise: Sports Points Calculation\n\nWrite a function named `points_calculation(player_points)`, which receives a list of points scored by different players in a tournament as an argument. The function should calculate and return the total score of all players. Use a for loop to sum the points. Additionally, implement a recursive function `max_points(points_list)`, which finds and returns the highest score in the list.\n\nExample call:\n```python\nplayer_points = [10, 20, 15, 30, 25]\ntotal_points = points_calculation(player_points)\nhighest_score = max_points(player_points)\nprint(\"Total Points:\", total_points)  # Output: Total Points: 100\nprint(\"Highest Score:\", highest_score)  # Output: Highest Score: 30\n```",
    "code_skeleton": "def points_calculation(player_points):\n    ## Insert code here\n\ndef max_points(points_list):\n    ## Insert code here\n",
    "model_solution": "def points_calculation(player_points):\n    return sum(player_points)\n\ndef max_points(points_list):\n    if len(points_list) == 1:\n        return points_list[0]\n    else:\n        max_rest = max_points(points_list[1:])\n        return points_list[0] if points_list[0] > max_rest else max_rest\n\nplayer_points = [10, 20, 15, 30, 25]\ntotal_points = points_calculation(player_points)\nhighest_score = max_points(player_points)\nprint(\"Total Points:\", total_points)\nprint(\"Highest Score:\", highest_score)",
    "unit_tests": "import unittest\nfrom main import points_calculation, max_points\n\nclass TestPointsCalculation(unittest.TestCase):\n    def test_total_points(self):\n        self.assertEqual(points_calculation([10, 20, 15, 30, 25]), 100)\n        self.assertEqual(points_calculation([0, 0, 0, 0]), 0)\n        self.assertEqual(points_calculation([5, 5, 5, 5, 5]), 25)\n        self.assertEqual(points_calculation([-10, 20, -15, 30, -25]), 0)\n        self.assertEqual(points_calculation([100]), 100)\n\n    def test_max_points(self):\n        self.assertEqual(max_points([10, 20, 15, 30, 25]), 30)\n        self.assertEqual(max_points([0, 0, 0, 0]), 0)\n        self.assertEqual(max_points([5, 5, 5, 5, 5]), 5)\n        self.assertEqual(max_points([-10, 20, -15, 30, -25]), 30)\n        self.assertEqual(max_points([100]), 100)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 182,
    "programming_concept": "String; Lists; Functions as variables",
    "context": "Mental Health",
    "task_description": "### Exercise: Positive Affirmations\n\nPositive affirmations can help to boost self-esteem and promote mental health. In this task, you are to implement a function that processes a list of positive affirmations and returns a random affirmation.\n\n#### Task\n\nWrite a function `random_affirmation(affirmations)` that takes a list of positive affirmations as an argument and returns a random affirmation from this list. Use the `random.choice` function from the `random` module to make the random selection.\n\n#### Example\n\n```python\naffirmations = [\n    \"I am strong and capable.\",\n    \"I deserve love and respect.\",\n    \"I am enough just as I am.\",\n    \"I can achieve anything I set my mind to.\"\n]\n\nprint(random_affirmation(affirmations))\n```\n\nThe output could be one of the affirmations from the list, e.g. \"I am strong and capable.\"\n\n#### Hints\n\n- Import the `random` module to use the `random.choice` function.\n- The function should return one of the affirmations from the list.\n\nGood luck!",
    "code_skeleton": "def random_affirmation(affirmations):\n    ## Insert code here",
    "model_solution": "import random\n\ndef random_affirmation(affirmations):\n    return random.choice(affirmations)\n\naffirmations = [\n    \"I am strong and capable.\",\n    \"I deserve love and respect.\",\n    \"I am enough just as I am.\",\n    \"I can achieve anything I set my mind to.\"\n]\n\nprint(random_affirmation(affirmations))",
    "unit_tests": "import unittest\nfrom main import random_affirmation\n\nclass TestRandomAffirmation(unittest.TestCase):\n    def test_selection_from_list(self):\n        affirmations = [\n            \"I am strong and capable.\",\n            \"I deserve love and respect.\",\n            \"I am enough just as I am.\",\n            \"I can achieve anything I set my mind to.\"\n        ]\n        result = random_affirmation(affirmations)\n        self.assertIn(result, affirmations)\n\n    def test_empty_list(self):\n        affirmations = []\n        with self.assertRaises(IndexError):\n            random_affirmation(affirmations)\n\n    def test_single_element(self):\n        affirmations = [\"I am strong and capable.\"]\n        self.assertEqual(random_affirmation(affirmations), \"I am strong and capable.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 183,
    "programming_concept": "Tuples;Integer;Logical operators (==, !=, <, >, <=, >=, or, and, not)",
    "context": "Pets",
    "task_description": "### Exercise: Pet Check\n\nWrite a function named `pet_check(pet)`, which checks if the given pet is included in a predefined list of allowed pets. The list of allowed pets is a tuple and includes the following animals: \"Dog\", \"Cat\", \"Hamster\", \"Rabbit\", \"Parrot\".\n\nThe function should:\n1. Check if the given pet is included in the list of allowed pets.\n2. If the pet is allowed, the function should return `True`.\n3. If the pet is not allowed, the function should return `False`.\n\nExample calls:\n- `pet_check(\"Dog\")` returns `True`.\n- `pet_check(\"Snake\")` returns `False`.",
    "code_skeleton": "def pet_check(pet):\n    ## Insert code here\n",
    "model_solution": "def pet_check(pet):\n    return pet in (\"Dog\", \"Cat\", \"Hamster\", \"Rabbit\", \"Parrot\")\n\n# Example calls\nprint(pet_check(\"Dog\"))  # True\nprint(pet_check(\"Snake\"))  # False\n",
    "unit_tests": "import unittest\n\nfrom main import pet_check\n\nclass TestPetCheck(unittest.TestCase):\n    def test_allowed_pet_dog(self):\n        self.assertTrue(pet_check(\"Dog\"))\n\n    def test_allowed_pet_cat(self):\n        self.assertTrue(pet_check(\"Cat\"))\n\n    def test_not_allowed_pet_snake(self):\n        self.assertFalse(pet_check(\"Snake\"))\n\n    def test_not_allowed_pet_horse(self):\n        self.assertFalse(pet_check(\"Horse\"))\n\n    def test_allowed_pet_hamster(self):\n        self.assertTrue(pet_check(\"Hamster\"))\n\n    def test_allowed_pet_rabbit(self):\n        self.assertTrue(pet_check(\"Rabbit\"))\n\n    def test_allowed_pet_parrot(self):\n        self.assertTrue(pet_check(\"Parrot\"))\n\n    def test_empty_string(self):\n        self.assertFalse(pet_check(\"\"))\n\n    def test_none(self):\n        self.assertFalse(pet_check(None))\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  {
    "id": 184,
    "programming_concept": "String;Integer;For loops",
    "context": "Fishing",
    "task_description": "### Exercise: Count Fish\n\nWrite a function named `count_fish(fish_types)` that receives a list of strings as an argument. Each string in the list represents a type of fish caught on a given day. The function should count the number of each type of fish and return the result as a dictionary, where the fish type is the key and the number of fish caught is the value.\n\nExample call:\n```python\nfish_types = [\"Pike\", \"Carp\", \"Pike\", \"Trout\", \"Carp\", \"Pike\"]\nprint(count_fish(fish_types))\n```\n\nExpected output:\n```python\n{\"Pike\": 3, \"Carp\": 2, \"Trout\": 1}\n```",
    "code_skeleton": "def count_fish(fish_types):\n    ## Insert code here",
    "model_solution": "def count_fish(fish_types):\n    counts = {}\n    for fish in fish_types:\n        if fish in counts:\n            counts[fish] += 1\n        else:\n            counts[fish] = 1\n    return counts\n\nfish_types = [\"Pike\", \"Carp\", \"Pike\", \"Trout\", \"Carp\", \"Pike\"]\nprint(count_fish(fish_types))",
    "unit_tests": "import unittest\nfrom main import count_fish\n\nclass TestCountFish(unittest.TestCase):\n    def test_simple_case(self):\n        self.assertEqual(count_fish([\"Pike\", \"Carp\", \"Pike\", \"Trout\", \"Carp\", \"Pike\"]), {\"Pike\": 3, \"Carp\": 2, \"Trout\": 1})\n\n    def test_empty_list(self):\n        self.assertEqual(count_fish([]), {})\n\n    def test_single_fish_type(self):\n        self.assertEqual(count_fish([\"Pike\", \"Pike\", \"Pike\"]), {\"Pike\": 3})\n\n    def test_different_fish_types(self):\n        self.assertEqual(count_fish([\"Pike\", \"Carp\", \"Trout\"]), {\"Pike\": 1, \"Carp\": 1, \"Trout\": 1})\n\n    def test_mixed_fish_types(self):\n        self.assertEqual(count_fish([\"Pike\", \"Carp\", \"Pike\", \"Trout\", \"Carp\", \"Pike\", \"Trout\", \"Trout\"]), {\"Pike\": 3, \"Carp\": 2, \"Trout\": 3})\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 185,
    "programming_concept": "Recursion;Float;Integer",
    "context": "Olympics",
    "task_description": "### Exercise Task: Recursive Calculation of Medal Points\n\nIn the Olympic Games, medals are awarded in gold, silver, and bronze. Each medal has a specific point value:\n\n- Gold: 3 points\n- Silver: 2 points\n- Bronze: 1 point\n\nWrite a recursive function `calculate_medal_points(gold, silver, bronze)` that calculates the total score for a nation based on the number of medals won. The parameters `gold`, `silver`, and `bronze` are integers that indicate the number of each type of medal won. The function should return the total score as a floating-point number (Float).\n\nExample call:\n```python\npoints = calculate_medal_points(5, 3, 2)\nprint(points)  # Output: 21.0\n```\n\nImplement the function to work recursively.",
    "code_skeleton": "def calculate_medal_points(gold, silver, bronze):\n    ## Insert code here",
    "model_solution": "def calculate_medal_points(gold, silver, bronze):\n    if gold == 0 and silver == 0 and bronze == 0:\n        return 0.0\n    if gold > 0:\n        return 3.0 + calculate_medal_points(gold - 1, silver, bronze)\n    if silver > 0:\n        return 2.0 + calculate_medal_points(gold, silver - 1, bronze)\n    return 1.0 + calculate_medal_points(gold, silver, bronze - 1)\n\npoints = calculate_medal_points(5, 3, 2)\nprint(points)  # Output: 21.0",
    "unit_tests": "import unittest\nfrom main import calculate_medal_points\n\nclass TestCalculateMedalPoints(unittest.TestCase):\n    def test_no_medals(self):\n        self.assertEqual(calculate_medal_points(0, 0, 0), 0.0)\n\n    def test_only_gold(self):\n        self.assertEqual(calculate_medal_points(5, 0, 0), 15.0)\n\n    def test_only_silver(self):\n        self.assertEqual(calculate_medal_points(0, 3, 0), 6.0)\n\n    def test_only_bronze(self):\n        self.assertEqual(calculate_medal_points(0, 0, 2), 2.0)\n\n    def test_mixed_medals(self):\n        self.assertEqual(calculate_medal_points(5, 3, 2), 21.0)\n\n    def test_edge_case(self):\n        self.assertEqual(calculate_medal_points(1, 1, 1), 6.0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 186,
    "programming_concept": "If-Else statements; While loops; Boolean and None",
    "context": "Modern Gaming",
    "task_description": "### Exercise Task: Modern Gaming - Player Level and Experience Points\n\nWrite a function `level_up(player_level, experience_points)` that checks if a player can level up based on their experience points. \n\n- If the player has 1000 or more experience points, they level up and the function returns `True`.\n- If the player has less than 1000 experience points, they remain at the current level and the function returns `False`.\n- If the player has no experience points (None), the function also returns `False`.\n\nAdditionally, the function should use a while loop to reduce the player's experience points until they are below 1000 if the player levels up.\n\nExample call:\n```python\nlevel_up(5, 1200)  # returns True and reduces experience points to 200\nlevel_up(3, 800)   # returns False\nlevel_up(2, None)  # returns False\n```",
    "code_skeleton": "def level_up(player_level, experience_points):\n    ## Insert code here",
    "model_solution": "def level_up(player_level, experience_points):\n    if experience_points is None or experience_points < 1000:\n        return False\n    while experience_points >= 1000:\n        experience_points -= 1000\n        player_level += 1\n    return True\n\n# Example calls\nprint(level_up(5, 1200))  # True\nprint(level_up(3, 800))   # False\nprint(level_up(2, None))  # False",
    "unit_tests": "import unittest\n\nfrom main import level_up\n\nclass TestLevelUp(unittest.TestCase):\n    def test_level_up_with_enough_experience(self):\n        self.assertTrue(level_up(5, 1200))\n\n    def test_level_up_with_not_enough_experience(self):\n        self.assertFalse(level_up(3, 800))\n\n    def test_level_up_with_no_experience(self):\n        self.assertFalse(level_up(2, None))\n\n    def test_level_up_with_exact_experience(self):\n        self.assertTrue(level_up(1, 1000))\n\n    def test_level_up_with_multiple_levels(self):\n        self.assertTrue(level_up(1, 2500))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 187,
    "programming_concept": "Recursion;Higher-order functions;Operations with numbers",
    "context": "Fishing",
    "task_description": "### Exercise: Counting Fish\n\nYou are an enthusiastic angler and wish to write a function that helps you count the number of fish in a lake. The function should work recursively and use higher-order functions.\n\nWrite a function `count_fish(lake)` that counts the number of fish in a lake. The lake is represented as a list of lists, where each inner list represents a group of fish. Each fish is represented by a number indicating its weight in grams.\n\nThe function `count_fish(lake)` should return the total number of fish in the lake.\n\nExample:\n\n```python\nlake = [\n    [200, 150, 300],  # Group 1\n    [100, 250],       # Group 2\n    [400, 500, 100]   # Group 3\n]\n\nprint(count_fish(lake))  # Output: 8\n```\n\nIn this example, there are a total of 8 fish in the lake.",
    "code_skeleton": "def count_fish(lake):\n    ## Insert code here\n",
    "model_solution": "def count_fish(lake):\n    return sum(map(len, lake))\n\nlake = [\n    [200, 150, 300],\n    [100, 250],\n    [400, 500, 100]\n]\n\nprint(count_fish(lake))",
    "unit_tests": "import unittest\n\nfrom main import count_fish\n\nclass TestCountFish(unittest.TestCase):\n    def test_simple_lake(self):\n        self.assertEqual(count_fish([[200, 150, 300], [100, 250], [400, 500, 100]]), 8)\n\n    def test_empty_lake(self):\n        self.assertEqual(count_fish([]), 0)\n\n    def test_lake_with_one_group(self):\n        self.assertEqual(count_fish([[200, 150, 300]]), 3)\n\n    def test_lake_with_empty_group(self):\n        self.assertEqual(count_fish([[200, 150, 300], [], [400, 500, 100]]), 6)\n\n    def test_lake_with_many_groups(self):\n        self.assertEqual(count_fish([[200], [150], [300], [100], [250], [400], [500], [100]]), 8)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 188,
    "programming_concept": "Integer; Logical operators (==, !=, <, >, <=, >=, or, and, not); Lists",
    "context": "Basketball",
    "task_description": "### Exercise: Basketball Statistics\n\nWrite a function called `evaluate_player(points_list)`, which receives a list of points scored by a basketball player in different games. The function should assess the player's performance and return an appropriate message.\n\n- If the player scored more than 30 points in any game, the message 'Outstanding performance!' should be returned.\n- If the player scored at least 10 points in all games, the message 'Consistently good performance!' should be returned.\n- If the player scored no more than 5 points in any game, the message 'Weak performance!' should be returned.\n- In all other cases, the message 'Average performance.' should be returned.\n\nExample calls:\n- `evaluate_player([12, 15, 8, 22, 30])` returns 'Average performance.'\n- `evaluate_player([35, 28, 40, 22, 31])` returns 'Outstanding performance!'\n- `evaluate_player([10, 12, 14, 11, 10])` returns 'Consistently good performance!'\n- `evaluate_player([3, 4, 2, 5, 1])` returns 'Weak performance!'",
    "code_skeleton": "def evaluate_player(points_list):\n    ## Insert code here",
    "model_solution": "def evaluate_player(points_list):\n    if any(p > 30 for p in points_list):\n        return 'Outstanding performance!'\n    elif all(p >= 10 for p in points_list):\n        return 'Consistently good performance!'\n    elif all(p <= 5 for p in points_list):\n        return 'Weak performance!'\n    else:\n        return 'Average performance.'\n\n# Example calls\nprint(evaluate_player([12, 15, 8, 22, 30]))\nprint(evaluate_player([35, 28, 40, 22, 31]))\nprint(evaluate_player([10, 12, 14, 11, 10]))\nprint(evaluate_player([3, 4, 2, 5, 1]))",
    "unit_tests": "import unittest\nfrom main import evaluate_player\n\nclass TestEvaluatePlayer(unittest.TestCase):\n    def test_outstanding_performance(self):\n        self.assertEqual(evaluate_player([35, 28, 40, 22, 31]), 'Outstanding performance!')\n\n    def test_consistently_good_performance(self):\n        self.assertEqual(evaluate_player([10, 12, 14, 11, 10]), 'Consistently good performance!')\n\n    def test_weak_performance(self):\n        self.assertEqual(evaluate_player([3, 4, 2, 5, 1]), 'Weak performance!')\n\n    def test_average_performance(self):\n        self.assertEqual(evaluate_player([12, 15, 8, 22, 30]), 'Average performance.')\n\n    def test_empty_list(self):\n        self.assertEqual(evaluate_player([]), 'Average performance.')\n\n    def test_boundary_30_points(self):\n        self.assertEqual(evaluate_player([30, 30, 30]), 'Average performance.')\n\n    def test_boundary_10_points(self):\n        self.assertEqual(evaluate_player([10, 10, 10]), 'Consistently good performance.')\n\n    def test_boundary_5_points(self):\n        self.assertEqual(evaluate_player([5, 5, 5]), 'Weak performance.')\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 189,
    "programming_concept": "Float;Operations with numbers;Control structures (==, !=, <, >, <=, >=, or, and, not)",
    "context": "Pets",
    "task_description": "### Exercise Task: Pet Weight Control\n\nWrite a function named `weight_control(weight)` that takes the weight of a pet (in kilograms) as a float and returns an appropriate message with `return`. The function should decide whether the pet is underweight, normal weight, or overweight based on its weight.\n\n- If the weight is less than 2.0 kg, the message \"The pet is underweight.\" should be returned.\n- If the weight is between 2.0 kg and 5.0 kg (inclusive), the message \"The pet has a normal weight.\" should be returned.\n- If the weight is greater than 5.0 kg, the message \"The pet is overweight.\" should be returned.\n\nExample Calls:\n- `weight_control(1.5)` returns \"The pet is underweight.\"\n- `weight_control(3.0)` returns \"The pet has a normal weight.\"\n- `weight_control(6.0)` returns \"The pet is overweight.\"",
    "code_skeleton": "def weight_control(weight):\n    ## Insert code here",
    "model_solution": "def weight_control(weight):\n    if weight < 2.0:\n        return \"The pet is underweight.\"\n    elif weight <= 5.0:\n        return \"The pet has a normal weight.\"\n    else:\n        return \"The pet is overweight.\"\n\n# Example calls\nprint(weight_control(1.5))\nprint(weight_control(3.0))\nprint(weight_control(6.0))",
    "unit_tests": "import unittest\nfrom main import weight_control\n\nclass TestWeightControl(unittest.TestCase):\n    def test_underweight(self):\n        self.assertEqual(weight_control(1.5), \"The pet is underweight.\")\n\n    def test_normal_weight_lower_bound(self):\n        self.assertEqual(weight_control(2.0), \"The pet has a normal weight.\")\n\n    def test_normal_weight_middle(self):\n        self.assertEqual(weight_control(3.0), \"The pet has a normal weight.\")\n\n    def test_normal_weight_upper_bound(self):\n        self.assertEqual(weight_control(5.0), \"The pet has a normal weight.\")\n\n    def test_overweight(self):\n        self.assertEqual(weight_control(6.0), \"The pet is overweight.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 190,
    "programming_concept": "Integer;Lists;String",
    "context": "Rugby",
    "task_description": "### Exercise: Rugby Player Statistics\n\nWrite a function named `player_statistics(player_list)` that receives a list of player names and their scores in a rugby game. The list contains strings in the format \"Name:Points\", where \"Name\" is the player's name and \"Points\" are the points scored as an integer.\n\nThe function should fulfill the following tasks:\n1. Calculate and return the total score of all players.\n2. Return the name of the player with the most points. If multiple players have the same highest score, the first one in the list should be returned.\n\nExample call:\n```python\nplayer_list = [\"Max:5\", \"Anna:3\", \"Tom:7\", \"Lisa:7\"]\ntotal_points, best_player = player_statistics(player_list)\nprint(total_points)  # Output: 22\nprint(best_player)  # Output: Tom\n```\n\nImplement the function `player_statistics(player_list)` to meet the requirements above.",
    "code_skeleton": "def player_statistics(player_list):\n    ## Insert code here",
    "model_solution": "def player_statistics(player_list):\n    total_points = 0\n    best_player = \"\"\n    max_points = -1\n    for entry in player_list:\n        name, points = entry.split(\":\")\n        points = int(points)\n        total_points += points\n        if points > max_points:\n            max_points = points\n            best_player = name\n    return total_points, best_player\n\nplayer_list = [\"Max:5\", \"Anna:3\", \"Tom:7\", \"Lisa:7\"]\ntotal_points, best_player = player_statistics(player_list)\nprint(total_points)  # Output: 22\nprint(best_player)  # Output: Tom",
    "unit_tests": "import unittest\n\nfrom main import player_statistics\n\nclass TestPlayerStatistics(unittest.TestCase):\n    def test_simple_case(self):\n        player_list = [\"Max:5\", \"Anna:3\", \"Tom:7\", \"Lisa:7\"]\n        total_points, best_player = player_statistics(player_list)\n        self.assertEqual(total_points, 22)\n        self.assertEqual(best_player, \"Tom\")\n\n    def test_all_players_same_points(self):\n        player_list = [\"Max:5\", \"Anna:5\", \"Tom:5\", \"Lisa:5\"]\n        total_points, best_player = player_statistics(player_list)\n        self.assertEqual(total_points, 20)\n        self.assertEqual(best_player, \"Max\")\n\n    def test_single_player(self):\n        player_list = [\"Max:10\"]\n        total_points, best_player = player_statistics(player_list)\n        self.assertEqual(total_points, 10)\n        self.assertEqual(best_player, \"Max\")\n\n    def test_empty_list(self):\n        player_list = []\n        total_points, best_player = player_statistics(player_list)\n        self.assertEqual(total_points, 0)\n        self.assertEqual(best_player, \"\")\n\n    def test_negative_points(self):\n        player_list = [\"Max:-5\", \"Anna:3\", \"Tom:7\", \"Lisa:7\"]\n        total_points, best_player = player_statistics(player_list)\n        self.assertEqual(total_points, 12)\n        self.assertEqual(best_player, \"Tom\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 191,
    "programming_concept": "If-Else statements; Recursion; Boolean and None",
    "context": "Rugby",
    "task_description": "### Exercise: Rugby Player Classification\n\nWrite a function `classify_player(weight, height)` that classifies a rugby player based on their weight (in kilograms) and height (in centimeters). The classification is according to the following rules:\n\n- A player is classified as \"Lightweight\" if their weight is less than 75 kg.\n- A player is classified as \"Heavyweight\" if their weight is 75 kg or more.\n- A player is classified as \"Tall\" if their height is 185 cm or more.\n- A player is classified as \"Short\" if their height is less than 185 cm.\n\nThe function should return a message describing the player's classification. Example:\n\n- `classify_player(70, 190)` returns \"Lightweight and Tall\".\n- `classify_player(80, 180)` returns \"Heavyweight and Short\".\n\nAdditionally, a recursive function `is_tall(weight, height)` should be implemented to check if a player is classified as \"Tall\". This function should return `True` if the player's height is 185 cm or more, and `False` otherwise.\n\nExample calls:\n- `classify_player(70, 190)`\n- `classify_player(80, 180)`\n- `is_tall(70, 190)`\n- `is_tall(80, 180)`",
    "code_skeleton": "def classify_player(weight, height):\n    ## Insert code here\n\ndef is_tall(weight, height):\n    ## Insert code here",
    "model_solution": "def classify_player(weight, height):\n    weight_classification = \"Lightweight\" if weight < 75 else \"Heavyweight\"\n    height_classification = \"Tall\" if height >= 185 else \"Short\"\n    return f\"{weight_classification} and {height_classification}\"\n\ndef is_tall(weight, height):\n    if height >= 185:\n        return True\n    return False\n\nprint(classify_player(70, 190))\nprint(classify_player(80, 180))\nprint(is_tall(70, 190))\nprint(is_tall(80, 180))",
    "unit_tests": "import unittest\n\nclass TestClassifyPlayer(unittest.TestCase):\n    def test_lightweight_tall(self):\n        self.assertEqual(classify_player(70, 190), \"Lightweight and Tall\")\n\n    def test_heavyweight_short(self):\n        self.assertEqual(classify_player(80, 180), \"Heavyweight and Short\")\n\n    def test_lightweight_short(self):\n        self.assertEqual(classify_player(70, 180), \"Lightweight and Short\")\n\n    def test_heavyweight_tall(self):\n        self.assertEqual(classify_player(80, 190), \"Heavyweight and Tall\")\n\nclass TestIsTall(unittest.TestCase):\n    def test_tall(self):\n        self.assertTrue(is_tall(70, 190))\n\n    def test_not_tall(self):\n        self.assertFalse(is_tall(80, 180))\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 192,
    "programming_concept": "Logical operators (==, !=, <, >, <=, >=, or, and, not);For loops;Tuples",
    "context": "Rugby",
    "task_description": "### Exercise Task: Rugby Player Statistics\n\nWrite a function `player_statistics(player_list)` that takes a list of tuples as an argument. Each tuple represents a rugby player and contains the following information in this order: Name (String), Age (Integer), Number of Tries (Integer).\n\nThe function should perform the following tasks:\n1. Store all players who are older than 30 years and have scored more than 5 tries in a new list.\n2. Return the number of players who meet these criteria.\n3. Print the names of these players to the console.\n\nExample call:\n```python\nplayer_list = [(\"Max\", 32, 6), (\"Tom\", 28, 4), (\"John\", 35, 7), (\"Alex\", 22, 3)]\nnumber_of_players = player_statistics(player_list)\nprint(number_of_players)  # Output: 2\n```\n\nIn this example, \"Max\" and \"John\" are the players who are older than 30 and have scored more than 5 tries.",
    "code_skeleton": "def player_statistics(player_list):\n    ## Insert code here\n",
    "model_solution": "def player_statistics(player_list):\n    result = [player[0] for player in player_list if player[1] > 30 and player[2] > 5]\n    for name in result:\n        print(name)\n    return len(result)\n\nplayer_list = [(\"Max\", 32, 6), (\"Tom\", 28, 4), (\"John\", 35, 7), (\"Alex\", 22, 3)]\nnumber_of_players = player_statistics(player_list)\nprint(number_of_players)",
    "unit_tests": "import unittest\nfrom main import player_statistics\n\nclass TestPlayerStatistics(unittest.TestCase):\n    def test_multiple_players(self):\n        player_list = [(\"Max\", 32, 6), (\"Tom\", 28, 4), (\"John\", 35, 7), (\"Alex\", 22, 3)]\n        self.assertEqual(player_statistics(player_list), 2)\n\n    def test_no_players(self):\n        player_list = [(\"Tom\", 28, 4), (\"Alex\", 22, 3)]\n        self.assertEqual(player_statistics(player_list), 0)\n\n    def test_all_players(self):\n        player_list = [(\"Max\", 32, 6), (\"John\", 35, 7)]\n        self.assertEqual(player_statistics(player_list), 2)\n\n    def test_boundary_players(self):\n        player_list = [(\"Max\", 30, 6), (\"John\", 31, 5)]\n        self.assertEqual(player_statistics(player_list), 0)\n\n    def test_empty_list(self):\n        player_list = []\n        self.assertEqual(player_statistics(player_list), 0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 193,
    "programming_concept": "For loops; Control structures (==, !=, <, >, <=, >=, or, and, not); If-Else statements",
    "context": "Cooking",
    "task_description": "### Exercise: Ingredient Check for a Recipe\n\nWrite a function named `check_ingredients(ingredient_list)`, which receives a list of ingredients as an argument. The function should check whether all necessary ingredients for a particular recipe are present. The recipe requires the following ingredients: 'flour', 'eggs', 'milk', 'sugar', and 'butter'.\n\nThe function should:\n1. Check if each required ingredient is included in the provided list.\n2. Return a message indicating whether all ingredients are present or which ingredients are missing.\n\nExample call:\n```python\ncheck_ingredients(['flour', 'eggs', 'milk', 'sugar', 'butter'])\n```\nshould return:\n```python\n'All ingredients are present.'\n```\n\nAnother example call:\n```python\ncheck_ingredients(['flour', 'eggs', 'milk'])\n```\nshould return:\n```python\n'The following ingredients are missing: sugar, butter'\n```",
    "code_skeleton": "def check_ingredients(ingredient_list):\n    ## Insert code here",
    "model_solution": "def check_ingredients(ingredient_list):\n    recipe_ingredients = {'flour', 'eggs', 'milk', 'sugar', 'butter'}\n    missing_ingredients = recipe_ingredients - set(ingredient_list)\n    if missing_ingredients:\n        return f'The following ingredients are missing: {', '.join(missing_ingredients)}'\n    else:\n        return 'All ingredients are present.'\n\nprint(check_ingredients(['flour', 'eggs', 'milk', 'sugar', 'butter']))\nprint(check_ingredients(['flour', 'eggs', 'milk']))",
    "unit_tests": "import unittest\n\nfrom main import check_ingredients\n\nclass TestCheckIngredients(unittest.TestCase):\n    def test_all_ingredients_present(self):\n        self.assertEqual(check_ingredients(['flour', 'eggs', 'milk', 'sugar', 'butter']), 'All ingredients are present.')\n\n    def test_some_ingredients_missing(self):\n        self.assertEqual(check_ingredients(['flour', 'eggs', 'milk']), 'The following ingredients are missing: sugar, butter')\n\n    def test_all_ingredients_missing(self):\n        self.assertEqual(check_ingredients([]), 'The following ingredients are missing: flour, eggs, milk, sugar, butter')\n\n    def test_one_ingredient_missing(self):\n        self.assertEqual(check_ingredients(['flour', 'eggs', 'milk', 'sugar']), 'The following ingredient is missing: butter')\n\n    def test_duplicate_ingredients(self):\n        self.assertEqual(check_ingredients(['flour', 'eggs', 'milk', 'sugar', 'butter', 'butter']), 'All ingredients are present.')\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 194,
    "programming_concept": "Boolean and None;String;Operations with numbers",
    "context": "Sports",
    "task_description": "### Exercise Task: Evaluate Athletic Performance\n\nWrite a function named `evaluate_performance(points)` that receives a score as an argument and returns a corresponding evaluation as a string. The evaluation is based on the following criteria:\n\n- If the score is greater than or equal to 90, the function should return \"Excellent\".\n- If the score is between 70 and 89 (inclusive), the function should return \"Good\".\n- If the score is between 50 and 69 (inclusive), the function should return \"Satisfactory\".\n- If the score is between 30 and 49 (inclusive), the function should return \"Sufficient\".\n- If the score is less than 30, the function should return \"Insufficient\".\n- If the score is `None`, the function should return \"No evaluation possible\".\n\nExample calls:\n- `evaluate_performance(95)` returns \"Excellent\".\n- `evaluate_performance(75)` returns \"Good\".\n- `evaluate_performance(None)` returns \"No evaluation possible\".",
    "code_skeleton": "def evaluate_performance(points):\n    ## Insert code here",
    "model_solution": "def evaluate_performance(points):\n    if points is None:\n        return \"No evaluation possible\"\n    if points >= 90:\n        return \"Excellent\"\n    if points >= 70:\n        return \"Good\"\n    if points >= 50:\n        return \"Satisfactory\"\n    if points >= 30:\n        return \"Sufficient\"\n    return \"Insufficient\"\n\n# Example calls\nprint(evaluate_performance(95))  # Excellent\nprint(evaluate_performance(75))  # Good\nprint(evaluate_performance(None))  # No evaluation possible",
    "unit_tests": "import unittest\nfrom main import evaluate_performance\n\nclass TestEvaluatePerformance(unittest.TestCase):\n    def test_excellent(self):\n        self.assertEqual(evaluate_performance(95), \"Excellent\")\n        self.assertEqual(evaluate_performance(90), \"Excellent\")\n\n    def test_good(self):\n        self.assertEqual(evaluate_performance(75), \"Good\")\n        self.assertEqual(evaluate_performance(70), \"Good\")\n\n    def test_satisfactory(self):\n        self.assertEqual(evaluate_performance(60), \"Satisfactory\")\n        self.assertEqual(evaluate_performance(50), \"Satisfactory\")\n\n    def test_sufficient(self):\n        self.assertEqual(evaluate_performance(40), \"Sufficient\")\n        self.assertEqual(evaluate_performance(30), \"Sufficient\")\n\n    def test_insufficient(self):\n        self.assertEqual(evaluate_performance(20), \"Insufficient\")\n        self.assertEqual(evaluate_performance(0), \"Insufficient\")\n\n    def test_no_evaluation(self):\n        self.assertEqual(evaluate_performance(None), \"No evaluation possible\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 195,
    "programming_concept": "If-Else statements;Boolean and None;Functions as variables",
    "context": "Restaurant",
    "task_description": "### Exercise: Restaurant Order\n\nWrite a function called `take_order(order)`, which receives an order in a restaurant and returns an appropriate message. The function should check the following conditions:\n\n1. If the order is \"Pizza\", the message \"Your Pizza is being prepared.\" should be returned.\n2. If the order is \"Pasta\", the message \"Your Pasta is being prepared.\" should be returned.\n3. If the order is \"Salad\", the message \"Your Salad is being prepared.\" should be returned.\n4. For all other orders, the message \"Unfortunately, this order is not available.\" should be returned.\n\nExample calls:\n- `take_order(\"Pizza\")` returns \"Your Pizza is being prepared.\"\n- `take_order(\"Burger\")` returns \"Unfortunately, this order is not available.\"",
    "code_skeleton": "def take_order(order):\n    ## Insert code here",
    "model_solution": "def take_order(order):\n    if order == \"Pizza\":\n        return \"Your Pizza is being prepared.\"\n    elif order == \"Pasta\":\n        return \"Your Pasta is being prepared.\"\n    elif order == \"Salad\":\n        return \"Your Salad is being prepared.\"\n    else:\n        return \"Unfortunately, this order is not available.\"\n\n# Example calls\nprint(take_order(\"Pizza\"))\nprint(take_order(\"Burger\"))",
    "unit_tests": "import unittest\nfrom main import take_order\n\nclass TestTakeOrder(unittest.TestCase):\n    def test_pizza_order(self):\n        self.assertEqual(take_order(\"Pizza\"), \"Your Pizza is being prepared.\")\n\n    def test_pasta_order(self):\n        self.assertEqual(take_order(\"Pasta\"), \"Your Pasta is being prepared.\")\n\n    def test_salad_order(self):\n        self.assertEqual(take_order(\"Salad\"), \"Your Salad is being prepared.\")\n\n    def test_unavailable_order(self):\n        self.assertEqual(take_order(\"Burger\"), \"Unfortunately, this order is not available.\")\n\n    def test_empty_order(self):\n        self.assertEqual(take_order(\"\"), \"Unfortunately, this order is not available.\")\n\n    def test_none_order(self):\n        self.assertEqual(take_order(None), \"Unfortunately, this order is not available.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 196,
    "programming_concept": "Operations with numbers;Recursion;Float",
    "context": "Rugby",
    "task_description": "### Exercise Task: Calculate Rugby Score\n\nIn a rugby game, points can be scored in different ways:\n- A Try gives 5 points.\n- A Conversion gives 2 points.\n- A Penalty or a Dropgoal gives 3 points each.\n\nWrite a function `calculate_points(tries, conversions, penalties, dropgoals)`, which calculates the total score of a rugby team. The function should take the number of tries, conversions, penalties, and dropgoals as arguments and return the total score as a `float`.\n\nExample call:\n```python\npoints = calculate_points(3, 2, 1, 1)\nprint(points)  # Output: 22.0\n```\n\n### Extension: Recursive Calculation\n\nExtend the function `calculate_points_recursive(tries, conversions, penalties, dropgoals)`, which has the same functionality as `calculate_points`, but performs the computation of total score recursively.\n\nExample call:\n```python\npoints = calculate_points_recursive(3, 2, 1, 1)\nprint(points)  # Output: 22.0\n```",
    "code_skeleton": "def calculate_points(tries, conversions, penalties, dropgoals):\n    ## Insert code here\n\ndef calculate_points_recursive(tries, conversions, penalties, dropgoals):\n    ## Insert code here",
    "model_solution": "def calculate_points(tries, conversions, penalties, dropgoals):\n    return tries * 5 + conversions * 2 + penalties * 3 + dropgoals * 3\n\ndef calculate_points_recursive(tries, conversions, penalties, dropgoals):\n    if tries == 0 and conversions == 0 and penalties == 0 and dropgoals == 0:\n        return 0\n    if tries > 0:\n        return 5 + calculate_points_recursive(tries - 1, conversions, penalties, dropgoals)\n    if conversions > 0:\n        return 2 + calculate_points_recursive(tries, conversions - 1, penalties, dropgoals)\n    if penalties > 0:\n        return 3 + calculate_points_recursive(tries, conversions, penalties - 1, dropgoals)\n    if dropgoals > 0:\n        return 3 + calculate_points_recursive(tries, conversions, penalties, dropgoals - 1)\n\npoints = calculate_points(3, 2, 1, 1)\nprint(points)  # Output: 22.0\n\npoints_recursive = calculate_points_recursive(3, 2, 1, 1)\nprint(points_recursive)  # Output: 22.0",
    "unit_tests": "import unittest\nfrom main import calculate_points, calculate_points_recursive\n\nclass TestCalculatePoints(unittest.TestCase):\n    def test_all_zero(self):\n        self.assertEqual(calculate_points(0, 0, 0, 0), 0.0)\n    \n    def test_only_tries(self):\n        self.assertEqual(calculate_points(3, 0, 0, 0), 15.0)\n    \n    def test_only_conversions(self):\n        self.assertEqual(calculate_points(0, 2, 0, 0), 4.0)\n    \n    def test_only_penalties(self):\n        self.assertEqual(calculate_points(0, 0, 1, 0), 3.0)\n    \n    def test_only_dropgoals(self):\n        self.assertEqual(calculate_points(0, 0, 0, 1), 3.0)\n    \n    def test_mixed(self):\n        self.assertEqual(calculate_points(3, 2, 1, 1), 22.0)\n\nclass TestCalculatePointsRecursive(unittest.TestCase):\n    def test_all_zero(self):\n        self.assertEqual(calculate_points_recursive(0, 0, 0, 0), 0.0)\n    \n    def test_only_tries(self):\n        self.assertEqual(calculate_points_recursive(3, 0, 0, 0), 15.0)\n    \n    def test_only_conversions(self):\n        self.assertEqual(calculate_points_recursive(0, 2, 0, 0), 4.0)\n    \n    def test_only_penalties(self):\n        self.assertEqual(calculate_points_recursive(0, 0, 1, 0), 3.0)\n    \n    def test_only_dropgoals(self):\n        self.assertEqual(calculate_points_recursive(0, 0, 0, 1), 3.0)\n    \n    def test_mixed(self):\n        self.assertEqual(calculate_points_recursive(3, 2, 1, 1), 22.0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 197,
    "programming_concept": "Float;If-Else statements;Higher-order functions",
    "context": "Social Media",
    "task_description": "### Exercise: Social Media - Engagement Rate Calculation\n\nWrite a function named `calculate_engagement_rate(likes, comments, followers)` to calculate the engagement rate of a social media post. The engagement rate is determined as a percentage of the interactions (likes and comments) relative to the number of followers.\n\nThe function should execute the following steps:\n1. Calculate the total number of interactions (likes + comments).\n2. Calculate the engagement rate as a percentage of the interactions relative to the number of followers.\n3. Return the engagement rate.\n\nAdditionally, the function should output a message evaluating the engagement rate:\n- If the engagement rate is greater than or equal to 10%, output the message \"High engagement rate!\"\n- If the engagement rate is between 5% and 10%, output the message \"Average engagement rate\"\n- If the engagement rate is below 5%, output the message \"Low engagement rate\"\n\nExample Call:\n```python\ncalculate_engagement_rate(150, 30, 2000)\n```\n\nExpected Output:\n```\nAverage engagement rate\n```\n\nExpected Return Value:\n```python\n9.0\n```",
    "code_skeleton": "def calculate_engagement_rate(likes, comments, followers):\n    ## Insert code here",
    "model_solution": "def calculate_engagement_rate(likes, comments, followers):\n    interactions = likes + comments\n    engagement_rate = (interactions / followers) * 100\n    if engagement_rate >= 10:\n        print(\"High engagement rate!\")\n    elif engagement_rate >= 5:\n        print(\"Average engagement rate\")\n    else:\n        print(\"Low engagement rate\")\n    return engagement_rate\n\n# Example call\nprint(calculate_engagement_rate(150, 30, 2000))",
    "unit_tests": "import unittest\nfrom main import calculate_engagement_rate\n\nclass TestCalculateEngagementRate(unittest.TestCase):\n    def test_high_engagement_rate(self):\n        self.assertEqual(calculate_engagement_rate(200, 100, 2000), 15.0)\n\n    def test_average_engagement_rate(self):\n        self.assertEqual(calculate_engagement_rate(150, 30, 2000), 9.0)\n\n    def test_low_engagement_rate(self):\n        self.assertEqual(calculate_engagement_rate(50, 20, 2000), 3.5)\n\n    def test_zero_followers(self):\n        with self.assertRaises(ZeroDivisionError):\n            calculate_engagement_rate(100, 50, 0)\n\n    def test_no_interactions(self):\n        self.assertEqual(calculate_engagement_rate(0, 0, 2000), 0.0)\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 198,
    "programming_concept": "Logical operators (==, !=, <, >, <=, >=, or, and, not); Tuples; For loops",
    "context": "Mental Health",
    "task_description": "### Exercise: Mental Health and Activity Level\n\nWrite a function named `evaluate_activity(days)` that takes a tuple of 7 integers (each between 0 and 24) as input. Each number in the tuple represents the number of hours a person was active on a specific day of the week. The function should evaluate the person's activity levels and return an appropriate message.\n\n- If the person was active for more than 1 hour on at least 5 days of the week, return the message \"Well done! You are very active.\"\n- If the person was active for more than 1 hour on at least 3 days of the week, return the message \"Not bad, but there's room for improvement.\"\n- Otherwise, return the message \"Try to be more active to improve your mental health.\"\n\nExample call:\n```python\nevaluate_activity((1, 2, 0, 3, 4, 0, 1))\n```\n\nExpected output:\n```\nNot bad, but there's room for improvement.\n```",
    "code_skeleton": "def evaluate_activity(days):\n    ## Insert code here",
    "model_solution": "def evaluate_activity(days):\n    active_days = sum(1 for hours in days if hours > 1)\n    if active_days >= 5:\n        return \"Well done! You are very active.\"\n    elif active_days >= 3:\n        return \"Not bad, but there's room for improvement.\"\n    else:\n        return \"Try to be more active to improve your mental health.\"\n\nevaluate_activity((1, 2, 0, 3, 4, 0, 1))",
    "unit_tests": "import unittest\nfrom main import evaluate_activity\n\nclass TestEvaluateActivity(unittest.TestCase):\n    def test_very_active(self):\n        self.assertEqual(evaluate_activity((2, 3, 4, 5, 6, 1, 0)), \"Well done! You are very active.\")\n\n    def test_moderately_active(self):\n        self.assertEqual(evaluate_activity((1, 2, 0, 3, 4, 0, 1)), \"Not bad, but there's room for improvement.\")\n\n    def test_less_active(self):\n        self.assertEqual(evaluate_activity((0, 1, 0, 1, 0, 0, 0)), \"Try to be more active to improve your mental health.\")\n\n    def test_boundary_active(self):\n        self.assertEqual(evaluate_activity((1, 2, 1, 2, 1, 2, 1)), \"Not bad, but there's room for improvement.\")\n\n    def test_boundary_very_active(self):\n        self.assertEqual(evaluate_activity((2, 2, 2, 2, 2, 0, 0)), \"Well done! You are very active.\")\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 199,
    "programming_concept": "While loops;String;Tuple",
    "context": "Film",
    "task_description": "### Exercise: Counting Film Quotes\n\nWrite a function named `count_quotes(movie_quotes)` that receives a list of movie quotes as tuples. Each tuple contains the name of the movie and the quote. The function should count the number of quotes for each movie and return the result as a dictionary. Use a While loop to iterate through the list of film quotes.\n\n#### Example:\n```python\nmovie_quotes = [\n    (\"The Godfather\", \"I'm going to make him an offer he can't refuse.\"),\n    (\"Star Wars\", \"May the Force be with you.\"),\n    (\"The Godfather\", \"Leave the gun. Take the cannoli.\"),\n    (\"Star Wars\", \"I am your father.\"),\n    (\"The Godfather\", \"It was Barzini all along.\"),\n]\n\nresult = count_quotes(movie_quotes)\nprint(result)  # Output: {'The Godfather': 3, 'Star Wars': 2}\n```\n\nImplement the function `count_quotes(movie_quotes)` that behaves as described above.",
    "code_skeleton": "def count_quotes(movie_quotes):\n    ## Insert code here",
    "model_solution": "def count_quotes(movie_quotes):\n    result = {}\n    i = 0\n    while i < len(movie_quotes):\n        movie, _ = movie_quotes[i]\n        if movie in result:\n            result[movie] += 1\n        else:\n            result[movie] = 1\n        i += 1\n    return result\n\nmovie_quotes = [\n    (\"The Godfather\", \"I'm going to make him an offer he can't refuse.\"),\n    (\"Star Wars\", \"May the Force be with you.\"),\n    (\"The Godfather\", \"Leave the gun. Take the cannoli.\"),\n    (\"Star Wars\", \"I am your father.\"),\n    (\"The Godfather\", \"It was Barzini all along.\"),\n]\n\nresult = count_quotes(movie_quotes)\nprint(result)  # Output: {'The Godfather': 3, 'Star Wars': 2}",
    "unit_tests": "import unittest\n\nfrom main import count_quotes\n\nclass TestCountQuotes(unittest.TestCase):\n    def test_multiple_movies(self):\n        movie_quotes = [\n            (\"The Godfather\", \"I'm going to make him an offer he can't refuse.\"),\n            (\"Star Wars\", \"May the Force be with you.\"),\n            (\"The Godfather\", \"Leave the gun. Take the cannoli.\"),\n            (\"Star Wars\", \"I am your father.\"),\n            (\"The Godfather\", \"It was Barzini all along.\"),\n        ]\n        self.assertEqual(count_quotes(movie_quotes), {'The Godfather': 3, 'Star Wars': 2})\n\n    def test_one_movie(self):\n        movie_quotes = [\n            (\"Inception\", \"You have to go deeper.\"),\n            (\"Inception\", \"An idea is like a virus.\"),\n        ]\n        self.assertEqual(count_quotes(movie_quotes), {'Inception': 2})\n\n    def test_no_quotes(self):\n        movie_quotes = []\n        self.assertEqual(count_quotes(movie_quotes), {})\n\n    def test_one_quote(self):\n        movie_quotes = [(\"Matrix\", \"There is no spoon.\")]\n        self.assertEqual(count_quotes(movie_quotes), {'Matrix': 1})\n\n    def test_various_movies(self):\n        movie_quotes = [\n            (\"Matrix\", \"There is no spoon.\"),\n            (\"Inception\", \"You have to go deeper.\"),\n            (\"Star Wars\", \"May the Force be with you.\"),\n        ]\n        self.assertEqual(count_quotes(movie_quotes), {'Matrix': 1, 'Inception': 1, 'Star Wars': 1})\n\nif __name__ == '__main__':\n    unittest.main()"
  },
  {
    "id": 200,
    "programming_concept": "Lists; Operations with numbers; If-Else statements",
    "context": "Relationships",
    "task_description": "### Exercise: Relationships and Age Differences\n\nWrite a function named `age_differences(relationships)`, which takes a list of tuples as argument. Each tuple contains two names and their respective ages. The function should calculate the age difference for each pair and return an appropriate message.\n\nThe messages should be as follows:\n- If the age difference is less than 5 years: \"`[Name1] and [Name2] are almost the same age.`\"\n- If the age difference is between 5 and 10 years: \"`[Name1] is slightly older/younger than [Name2].`\"\n- If the age difference is more than 10 years: \"`[Name1] and [Name2] have a large age difference.`\"\n\nExample call:\n```python\nrelationships = [(\"Anna\", 25, \"Ben\", 30), (\"Clara\", 40, \"David\", 50), (\"Eva\", 20, \"Frank\", 35)]\nage_differences(relationships)\n```\n\nExpected output:\n```\nAnna and Ben are almost the same age.\nClara is slightly older than David.\nEva and Frank have a large age difference.\n```",
    "code_skeleton": "def age_differences(relationships):\n    ## Insert code here",
    "model_solution": "def age_differences(relationships):\n    for r in relationships:\n        name1, age1, name2, age2 = r\n        diff = abs(age1 - age2)\n        if diff < 5:\n            print(f\"{name1} and {name2} are almost the same age.\")\n        elif 5 <= diff <= 10:\n            if age1 > age2:\n                print(f\"{name1} is slightly older than {name2}.\")\n            else:\n                print(f\"{name1} is slightly younger than {name2}.\")\n        else:\n            print(f\"{name1} and {name2} have a large age difference.\")\n\nrelationships = [(\"Anna\", 25, \"Ben\", 30), (\"Clara\", 40, \"David\", 50), (\"Eva\", 20, \"Frank\", 35)]\nage_differences(relationships)",
    "unit_tests": "import unittest\nfrom main import age_differences\n\nclass TestAgeDifferences(unittest.TestCase):\n    def test_almost_same_age(self):\n        relationships = [(\"Anna\", 25, \"Ben\", 27)]\n        expected_output = \"Anna and Ben are almost the same age.\\n\"\n        with self.assertLogs(level='INFO') as log:\n            age_differences(relationships)\n            self.assertIn(expected_output.strip(), log.output[0])\n\n    def test_slightly_older(self):\n        relationships = [(\"Clara\", 40, \"David\", 45)]\n        expected_output = \"Clara is slightly older than David.\\n\"\n        with self.assertLogs(level='INFO') as log:\n            age_differences(relationships)\n            self.assertIn(expected_output.strip(), log.output[0])\n\n    def test_large_age_difference(self):\n        relationships = [(\"Eva\", 20, \"Frank\", 35)]\n        expected_output = \"Eva and Frank have a large age difference.\\n\"\n        with self.assertLogs(level='INFO') as log:\n            age_differences(relationships)\n            self.assertIn(expected_output.strip(), log.output[0])\n\n    def test_slightly_younger(self):\n        relationships = [(\"Gina\", 30, \"Hank\", 35)]\n        expected_output = \"Gina is slightly younger than Hank.\\n\"\n        with self.assertLogs(level='INFO') as log:\n            age_differences(relationships)\n            self.assertIn(expected_output.strip(), log.output[0])\n\n    def test_edge_cases(self):\n        relationships = [(\"Ivy\", 18, \"Jack\", 18), (\"Kate\", 20, \"Leo\", 30), (\"Mia\", 25, \"Nate\", 35)]\n        expected_outputs = [\n            \"Ivy and Jack are almost the same age.\\n\",\n            \"Kate and Leo have a large age difference.\\n\",\n            \"Mia and Nate have a large age difference.\\n\"\n        ]\n        with self.assertLogs(level='INFO') as log:\n            age_differences(relationships)\n            for expected_output in expected_outputs:\n                self.assertIn(expected_output.strip(), log.output)\n\nif __name__ == '__main__':\n    unittest.main()"
  }
]